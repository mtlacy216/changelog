<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Latest Legislation</title>
<style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  background: #f7f8f9;
  color: #2d3748;
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 2rem;
}

.header {
  background: white;
  border-radius: 12px;
  padding: 1.5rem 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.title {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1a202c;
}

.controls {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  margin-top: 1rem;
}

.controls input,
.controls select,
.controls button {
  padding: 0.5rem 0.75rem;
  border: 1px solid #cbd5e0;
  border-radius: 8px;
  font-size: 0.875rem;
  background: white;
}

.controls button {
  cursor: pointer;
}

.table-container {
  background: white;
  border-radius: 12px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  overflow: hidden;
}

.legislation-table {
  width: 100%;
  border-collapse: collapse;
}

.legislation-table thead {
  background: #f7fafc;
  border-bottom: 1px solid #e2e8f0;
}

.legislation-table th {
  text-align: left;
  padding: 1rem 1.5rem;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  color: #4a5568;
  cursor: pointer;
  user-select: none;
}

.legislation-table th:hover {
  background: #edf2f7;
}

.legislation-table th.sorted-asc::after {
  content: ' ↑';
  opacity: 0.7;
}

.legislation-table th.sorted-desc::after {
  content: ' ↓';
  opacity: 0.7;
}

.legislation-table td {
  padding: 1rem 1.5rem;
  font-size: 0.875rem;
  border-bottom: 1px solid #edf2f7;
}

.legislation-table tbody tr {
  cursor: pointer;
  transition: background 0.2s;
}

.legislation-table tbody tr:hover {
  background: #f7fafc;
}

.pagination {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 1.5rem;
  font-size: 0.875rem;
}

.pagination button {
  padding: 0.5rem 0.75rem;
  background: #3182ce;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

.pagination button:disabled {
  background: #cbd5e0;
  cursor: not-allowed;
}

.search-status {
  color: #718096;
  font-size: 0.875rem;
  margin-top: 0.5rem;
}

.data-source {
  display: inline-block;
  padding: 0.125rem 0.375rem;
  border-radius: 3px;
  font-size: 0.625rem;
  font-weight: 600;
  margin-left: 0.5rem;
}

.source-archive {
  background: #bee3f8;
  color: #2c5282;
}

.source-live {
  background: #c6f6d5;
  color: #276749;
}

.loading-indicator {
  display: inline-block;
  margin-left: 0.5rem;
  color: #3182ce;
}

.loading-indicator.hidden {
  display: none;
}
</style>
</head>
<body>
<div class="container">
  <div class="header">
    <h1 class="title">Latest Legislation</h1>
    <div class="controls">
      <input type="text" id="search-input" placeholder="Search..." />
      <button id="clear-search">Clear</button>
      <select id="type-filter">
        <option value="all">All Types</option>
      </select>
      <select id="sort-by">
        <option value="MatterIntroDate">Date Introduced</option>
        <option value="MatterTitle">Title</option>
        <option value="MatterFile">File Number</option>
        <option value="MatterTypeName">Type</option>
        <option value="MatterStatusName">Status</option>
      </select>
      <select id="sort-direction">
        <option value="desc">Newest First</option>
        <option value="asc">Oldest First</option>
      </select>
      <select id="page-size">
        <option value="10">10 per page</option>
        <option value="20" selected>20 per page</option>
        <option value="50">50 per page</option>
      </select>
    </div>
    <div id="search-status" class="search-status"></div>
  </div>
  <div class="table-container">
    <table class="legislation-table">
      <thead>
        <tr>
          <th data-field="MatterFile">File #</th>
          <th data-field="MatterTitle">Title</th>
          <th data-field="MatterTypeName">Type</th>
          <th data-field="MatterBodyName">Body</th>
          <th data-field="MatterStatusName">Status</th>
          <th data-field="MatterIntroDate">Introduced</th>
        </tr>
      </thead>
      <tbody id="table-content">
        <tr><td colspan="6">Loading...</td></tr>
      </tbody>
    </table>
    <div class="pagination">
      <button id="prev-btn">Prev</button>
      <span id="page-info">Page 1</span>
      <button id="next-btn">Next</button>
    </div>
  </div>
</div>

<script>
// Configuration
const CONFIG = {
  xanoUrl: 'https://xvkq-pq7i-idtl.n7d.xano.io/api:Hj4C6PGO/archiverecords',
  legistarUrl: 'https://webapi.legistar.com/v1/nashville',
  corsProxy: 'https://corsproxy.io/?',
  softrDomain: 'https://eonashville.preview.softr.app',
  recentDaysCutoff: 90,
  archivePerPage: 100 // Update this after fixing Xano
};

// Global state
let allMatters = [];
let filteredMatters = [];
let currentPage = 1;
let pageSize = 20;
let loading = false;
let currentSearchTerm = '';
let currentSortBy = 'MatterIntroDate';
let currentSortDirection = 'desc';
let searchDebounceTimer = null;
let archivePagination = {
  currentPage: 1,
  totalPages: 0,
  totalItems: 0,
  hasMore: false
};

// Helper functions
function showLoading(message = 'Loading...') {
  document.getElementById('table-content').innerHTML = `<tr><td colspan="6">${message}</td></tr>`;
}

function updateSearchStatus(message, showLoader = false) {
  const statusEl = document.getElementById('search-status');
  statusEl.innerHTML = message + (showLoader ? '<span class="loading-indicator">⟳</span>' : '');
}

function formatDate(dateStr) {
  return dateStr ? new Date(dateStr).toLocaleDateString() : '';
}

function populateTypeFilter() {
  const select = document.getElementById('type-filter');
  const current = select.value;
  const types = Array.from(new Set(allMatters.map(m => m.MatterTypeName).filter(Boolean))).sort();
  select.innerHTML = '<option value="all">All Types</option>';
  types.forEach(t => {
    const opt = document.createElement('option');
    opt.value = t;
    opt.textContent = t;
    select.appendChild(opt);
  });
  if (types.includes(current)) select.value = current;
}

function deduplicateMatters(matters) {
  const seen = new Map();
  matters.forEach(matter => {
    const id = matter.MatterId;
    if (!seen.has(id) || (matter._source === 'live')) {
      seen.set(id, matter);
    }
  });
  return Array.from(seen.values());
}

// Fetch from Xano archive with pagination
async function fetchFromArchive(searchTerm = '', page = 1) {
  try {
    updateSearchStatus('Searching archive...', true);
    
    const params = new URLSearchParams();
    if (searchTerm) {
      params.append('search', searchTerm);
    }
    params.append('per_page', String(CONFIG.archivePerPage));
    params.append('page', String(page));
    
    const url = `${CONFIG.xanoUrl}?${params.toString()}`;
    console.log('Fetching from Xano:', url);
    
    const response = await fetch(url);
    
    if (!response.ok) {
      console.error(`Archive API error: ${response.status}`);
      return { records: [], pagination: null };
    }
    
    const data = await response.json();
    console.log('Xano response:', {
      itemsReceived: data.itemsReceived,
      itemsCount: data.items ? data.items.length : 0,
      currentPage: data.curPage,
      totalPages: data.pageTotal,
      totalItems: data.itemsTotal
    });
    
    let records = [];
    let pagination = null;
    
    if (data && data.items && Array.isArray(data.items)) {
      records = data.items;
      pagination = {
        currentPage: data.curPage || 1,
        totalPages: data.pageTotal || 1,
        totalItems: data.itemsTotal || data.itemsReceived,
        hasMore: data.nextPage !== null
      };
      
      console.log(`Got ${records.length} records from archive (page ${pagination.currentPage} of ${pagination.totalPages}, total: ${pagination.totalItems})`);
    }
    
    return {
      records: records.map(item => ({ ...item, _source: 'archive' })),
      pagination: pagination
    };
  } catch (error) {
    console.error('Archive fetch error:', error);
    return { records: [], pagination: null };
  }
}

// Fetch recent data from Legistar
async function fetchRecentFromLegistar() {
  try {
    updateSearchStatus('Fetching recent updates...', true);
    
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - CONFIG.recentDaysCutoff);
    const dateFilter = cutoffDate.toISOString().split('T')[0];
    
    const apiUrl = `${CONFIG.legistarUrl}/matters?$top=500&$filter=MatterIntroDate ge datetime'${dateFilter}'&$orderby=MatterIntroDate desc`;
    const url = `${CONFIG.corsProxy}${encodeURIComponent(apiUrl)}`;
    
    console.log('Fetching from Legistar:', apiUrl);
    
    const response = await fetch(url);
    if (!response.ok) {
      console.error(`Legistar API error: ${response.status}`);
      throw new Error(`Legistar API error: ${response.status}`);
    }
    
    const data = await response.json();
    console.log(`Fetched ${data.length} recent records from Legistar`);
    
    return data.map(item => ({ ...item, _source: 'live' }));
  } catch (error) {
    console.error('Legistar fetch failed:', error.message);
    return [];
  }
}

// Main data loading function
async function loadData(appendArchive = false) {
  if (loading) return;
  loading = true;
  
  try {
    if (!appendArchive) {
      showLoading('Loading legislation data...');
      archivePagination.currentPage = 1;
    } else {
      updateSearchStatus('Loading more archive results...', true);
    }
    
    const archiveResult = await fetchFromArchive(currentSearchTerm, archivePagination.currentPage);
    const archiveData = archiveResult.records || [];
    
    if (archiveResult.pagination) {
      archivePagination = archiveResult.pagination;
    }
    
    let liveData = [];
    if (!appendArchive) {
      liveData = await fetchRecentFromLegistar();
    }
    
    if (appendArchive) {
      allMatters = deduplicateMatters([...allMatters, ...archiveData]);
    } else {
      let combinedData = [...archiveData, ...liveData];
      allMatters = deduplicateMatters(combinedData);
      
      if (currentSearchTerm && liveData.length > 0) {
        const searchLower = currentSearchTerm.toLowerCase();
        const filteredLive = liveData.filter(matter => 
          (matter.MatterTitle && matter.MatterTitle.toLowerCase().includes(searchLower)) ||
          (matter.MatterFile && matter.MatterFile.toLowerCase().includes(searchLower)) ||
          (matter.MatterBodyName && matter.MatterBodyName.toLowerCase().includes(searchLower)) ||
          (matter.MatterName && matter.MatterName.toLowerCase().includes(searchLower)) ||
          (matter.MatterTypeName && matter.MatterTypeName.toLowerCase().includes(searchLower)) ||
          (matter.MatterStatusName && matter.MatterStatusName.toLowerCase().includes(searchLower))
        );
        
        allMatters = deduplicateMatters([...archiveData, ...filteredLive]);
      }
    }
    
    sortMatters();
    populateTypeFilter();
    
    const archiveCount = allMatters.filter(m => m._source === 'archive').length;
    const liveCount = allMatters.filter(m => m._source === 'live').length;
    const totalCount = allMatters.length;
    
    let statusMessage = '';
    if (totalCount > 0) {
      statusMessage = `Showing ${totalCount} records `;
      statusMessage += `(<span class="data-source source-archive">${archiveCount} archived</span>`;
      statusMessage += `<span class="data-source source-live">${liveCount} recent</span>)`;
      
      if (archivePagination.hasMore && archivePagination.totalItems) {
        const remaining = archivePagination.totalItems - archiveCount;
        statusMessage += ` - <a href="#" onclick="loadMoreArchive(); return false;" style="color: #3182ce; text-decoration: underline;">Load more (${remaining} more available)</a>`;
      }
    } else {
      statusMessage = 'No results found';
    }
    
    updateSearchStatus(statusMessage);
    renderTable();
  } catch (error) {
    console.error('Failed to load data:', error);
    showLoading('Error loading data. Please refresh the page.');
    updateSearchStatus('Error loading data');
  } finally {
    loading = false;
  }
}

// Load more archive results
async function loadMoreArchive() {
  if (loading || !archivePagination.hasMore) return;
  archivePagination.currentPage++;
  await loadData(true);
}

// Sort matters
function sortMatters() {
  allMatters.sort((a, b) => {
    let aVal = a[currentSortBy];
    let bVal = b[currentSortBy];
    
    if (aVal == null && bVal == null) return 0;
    if (aVal == null) return 1;
    if (bVal == null) return -1;
    
    if (typeof aVal === 'string') {
      aVal = aVal.toLowerCase();
      bVal = (bVal || '').toLowerCase();
    }
    
    if (currentSortDirection === 'asc') {
      return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
    } else {
      return aVal < bVal ? 1 : aVal > bVal ? -1 : 0;
    }
  });
}

// Render table
function renderTable() {
  const typeFilter = document.getElementById('type-filter').value;
  
  filteredMatters = allMatters.filter(m => {
    const matchesType = typeFilter === 'all' || m.MatterTypeName === typeFilter;
    return matchesType;
  });
  
  const totalPages = Math.ceil(filteredMatters.length / pageSize) || 1;
  if (currentPage > totalPages) {
    currentPage = totalPages;
  }
  
  const tbody = document.getElementById('table-content');
  tbody.innerHTML = '';
  
  const start = (currentPage - 1) * pageSize;
  const pageItems = filteredMatters.slice(start, start + pageSize);
  
  if (pageItems.length === 0) {
    tbody.innerHTML = '<tr><td colspan="6">No results found.</td></tr>';
  } else {
    pageItems.forEach(matter => {
      const link = `${CONFIG.softrDomain}/legislation-details?recordId=${matter.MatterId}`;
      const sourceIndicator = matter._source === 'live' ? 
        '<span class="data-source source-live">LIVE</span>' : 
        '<span class="data-source source-archive">ARCHIVE</span>';
      
      tbody.innerHTML += `
        <tr onclick="window.location.href='${link}'">
          <td>${matter.MatterFile || ''}</td>
          <td>${matter.MatterTitle || ''} ${sourceIndicator}</td>
          <td>${matter.MatterTypeName || ''}</td>
          <td>${matter.MatterBodyName || ''}</td>
          <td>${matter.MatterStatusName || ''}</td>
          <td>${formatDate(matter.MatterIntroDate)}</td>
        </tr>`;
    });
  }
  
  renderPagination(totalPages);
  updateSortIndicators();
}

function renderPagination(totalPages) {
  document.getElementById('page-info').textContent = `Page ${currentPage} of ${totalPages}`;
  document.getElementById('prev-btn').disabled = currentPage === 1;
  document.getElementById('next-btn').disabled = currentPage === totalPages;
}

function updateSortIndicators() {
  document.querySelectorAll('.legislation-table th').forEach(th => {
    th.classList.remove('sorted-asc', 'sorted-desc');
    if (th.dataset.field === currentSortBy) {
      th.classList.add(`sorted-${currentSortDirection}`);
    }
  });
}

// Event Listeners
document.getElementById('search-input').addEventListener('input', (e) => {
  clearTimeout(searchDebounceTimer);
  searchDebounceTimer = setTimeout(() => {
    currentSearchTerm = e.target.value.trim();
    currentPage = 1;
    archivePagination.currentPage = 1;
    loadData();
  }, 500);
});

document.getElementById('clear-search').addEventListener('click', () => {
  document.getElementById('search-input').value = '';
  currentSearchTerm = '';
  currentPage = 1;
  archivePagination.currentPage = 1;
  loadData();
});

document.getElementById('type-filter').addEventListener('change', () => {
  currentPage = 1;
  renderTable();
});

document.getElementById('sort-by').addEventListener('change', (e) => {
  currentSortBy = e.target.value;
  sortMatters();
  currentPage = 1;
  renderTable();
});

document.getElementById('sort-direction').addEventListener('change', (e) => {
  currentSortDirection = e.target.value;
  sortMatters();
  currentPage = 1;
  renderTable();
});

document.getElementById('page-size').addEventListener('change', e => {
  pageSize = parseInt(e.target.value, 10);
  currentPage = 1;
  renderTable();
});

document.getElementById('prev-btn').addEventListener('click', () => {
  if (currentPage > 1) {
    currentPage--;
    renderTable();
  }
});

document.getElementById('next-btn').addEventListener('click', () => {
  currentPage++;
  renderTable();
});

// Table header click sorting
document.querySelectorAll('.legislation-table th').forEach(th => {
  th.addEventListener('click', () => {
    const field = th.dataset.field;
    if (field) {
      if (currentSortBy === field) {
        currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
      } else {
        currentSortBy = field;
        currentSortDirection = 'desc';
      }
      document.getElementById('sort-by').value = currentSortBy;
      document.getElementById('sort-direction').value = currentSortDirection;
      sortMatters();
      currentPage = 1;
      renderTable();
    }
  });
});

// Initial load
loadData();
</script>
</body>
</html>
