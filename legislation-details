<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<!-- IMPORTANT: Ensure this viewport meta tag is present for proper mobile responsiveness -->
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5">
<title>Nashville Legislation Details - Enhanced UI</title>
<style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
  background: #f8fafc;
  color: #1a1a1a;
  line-height: 1.6;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  overflow-x: hidden;
  min-width: 320px;
}

/* Hero Header */
.hero-header {
  background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
  color: white;
  padding: 3rem 0 2rem;
  position: relative;
  overflow: hidden;
}

.hero-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
}

.hero-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 2rem;
  position: relative;
  z-index: 1;
}

.breadcrumb {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  margin-bottom: 1.5rem;
  opacity: 0.8;
}

.matter-badge {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.375rem 0.875rem;
  background: rgba(255, 255, 255, 0.15);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 999px;
  font-size: 0.875rem;
  font-weight: 500;
  margin-bottom: 1rem;
}

.matter-badge svg {
  width: 16px;
  height: 16px;
}

.hero-title {
  font-size: 2.25rem;
  font-weight: 700;
  margin-bottom: 1rem;
  line-height: 1.2;
}

.hero-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
  margin-bottom: 1.5rem;
}

.meta-item {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.meta-label {
  font-size: 0.75rem;
  opacity: 0.7;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.meta-value {
  font-size: 1rem;
  font-weight: 500;
}

/* Live Activity Bar */
.activity-bar {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 12px;
  padding: 1rem 1.5rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 1.5rem;
}

.live-indicator {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.pulse-container {
  position: relative;
  width: 10px;
  height: 10px;
}

.pulse-dot {
  position: absolute;
  width: 10px;
  height: 10px;
  background: #22c55e;
  border-radius: 50%;
  animation: pulse 2s infinite;
}

.pulse-ring {
  position: absolute;
  width: 10px;
  height: 10px;
  border: 2px solid #22c55e;
  border-radius: 50%;
  animation: pulse-ring 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.6; }
}

@keyframes pulse-ring {
  0% { transform: scale(1); opacity: 1; }
  100% { transform: scale(2); opacity: 0; }
}

.activity-stats {
  display: flex;
  gap: 1.5rem;
  font-size: 0.875rem;
}

.stat {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

/* Main Container */
.main-container {
  max-width: 1200px;
  margin: -2rem auto 2rem;
  padding: 0 2rem;
  position: relative;
  z-index: 2;
}

/* Navigation Tabs */
.nav-tabs {
  background: white;
  border-radius: 16px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
  padding: 0.5rem;
  display: flex;
  gap: 0.25rem;
  margin-bottom: 2rem;
  overflow-x: auto;
  scrollbar-width: thin;
  scrollbar-color: #cbd5e0 #f1f5f9;
}

.nav-tabs::-webkit-scrollbar {
  height: 6px;
}

.nav-tabs::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 3px;
}

.nav-tabs::-webkit-scrollbar-thumb {
  background: #cbd5e0;
  border-radius: 3px;
}

.tab-btn {
  padding: 0.75rem 1.5rem;
  background: transparent;
  border: none;
  border-radius: 12px;
  font-weight: 500;
  color: #64748b;
  cursor: pointer;
  transition: all 0.2s;
  white-space: nowrap;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.9rem;
  flex-shrink: 0;
  min-height: 44px; /* Better touch target */
}

.tab-btn:hover {
  background: #f1f5f9;
  color: #334155;
}

.tab-btn.active {
  background: linear-gradient(135deg, #3b82f6, #6366f1);
  color: white;
}

.tab-btn .badge {
  padding: 0.125rem 0.375rem;
  background: rgba(0, 0, 0, 0.1);
  border-radius: 999px;
  font-size: 0.75rem;
  font-weight: 600;
}

.tab-btn.active .badge {
  background: rgba(255, 255, 255, 0.2);
}

/* Content Grid */
.content-grid {
  display: grid;
  grid-template-columns: 1fr 380px;
  gap: 2rem;
}

/* Main Content Area */
.main-content {
  min-width: 0;
}

/* Content Card */
.content-card {
  background: white;
  border-radius: 16px;
  padding: 2rem;
  margin-bottom: 2rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
}

.card-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 2px solid #f1f5f9;
}

.card-title {
  font-size: 1.25rem;
  font-weight: 700;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  color: #1e293b;
}

.card-icon {
  width: 32px;
  height: 32px;
  background: linear-gradient(135deg, #3b82f6, #6366f1);
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 1.25rem;
}

/* Content Section */
.content-section {
  display: none;
  animation: fadeIn 0.3s ease-out;
}

.content-section.active {
  display: block;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Info Grid */
.info-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

.info-item {
  padding: 1rem;
  background: #f8fafc;
  border-radius: 12px;
  border: 1px solid #e2e8f0;
}

.info-item.full-width {
  grid-column: 1 / -1;
}

.info-label {
  font-size: 0.75rem;
  color: #64748b;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  margin-bottom: 0.5rem;
  font-weight: 600;
}

.info-value {
  font-size: 1rem;
  font-weight: 600;
  color: #1e293b;
  word-wrap: break-word;
  overflow-wrap: break-word;
}

/* Full Text Section */
.full-text {
  padding: 1.5rem;
  background: #fafafa;
  border-radius: 12px;
  margin-top: 1.5rem;
  max-height: 400px;
  overflow-y: auto;
}

.full-text::-webkit-scrollbar {
  width: 8px;
}

.full-text::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 4px;
}

.full-text::-webkit-scrollbar-thumb {
  background: #cbd5e0;
  border-radius: 4px;
}

.full-text h4 {
  margin-bottom: 1rem;
  color: #334155;
}

.full-text p {
  line-height: 1.7;
  color: #475569;
  margin-bottom: 1rem;
  font-size: 0.95rem;
}

/* Sponsors Grid */
.sponsors-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 1rem;
}

.sponsor-card {
  padding: 1.25rem;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  display: flex;
  align-items: center;
  gap: 1rem;
  cursor: pointer;
  transition: all 0.2s;
  text-decoration: none;
  color: inherit;
  position: relative;
  min-height: 80px;
  -webkit-tap-highlight-color: transparent;
}

.sponsor-card:hover {
  background: white;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  border-color: #cbd5e0;
}

.sponsor-card:active {
  transform: translateY(0);
}

.sponsor-avatar {
  width: 48px;
  height: 48px;
  background: linear-gradient(135deg, #667eea, #764ba2);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  font-size: 1.125rem;
}

.sponsor-info {
  flex: 1;
}

.sponsor-name {
  font-weight: 600;
  margin-bottom: 0.25rem;
  color: #1e293b;
}

.sponsor-type {
  font-size: 0.875rem;
  color: #64748b;
}

.sponsor-card svg {
  position: absolute;
  right: 1.25rem;
  width: 16px;
  height: 16px;
  color: #cbd5e0;
  opacity: 0;
  transition: all 0.2s;
}

.sponsor-card:hover svg {
  opacity: 1;
  transform: translateX(2px);
  color: #6366f1;
}

/* Documents List */
.documents-list {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.document-item {
  padding: 1.25rem;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  transition: all 0.2s;
  position: relative;
  overflow: hidden;
}

.document-item::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  width: 3px;
  background: linear-gradient(180deg, #3b82f6, #6366f1);
  transform: translateX(-100%);
  transition: transform 0.3s;
}

.document-item:hover {
  background: white;
  transform: translateX(4px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.document-item:hover::before {
  transform: translateX(0);
}

.document-info {
  display: flex;
  align-items: center;
  gap: 1rem;
  flex: 1;
  min-width: 0;
}

.doc-icon {
  width: 40px;
  height: 40px;
  background: linear-gradient(135deg, #3b82f6, #6366f1);
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  flex-shrink: 0;
}

.doc-icon svg {
  width: 20px;
  height: 20px;
}

.doc-name {
  font-weight: 600;
  margin-bottom: 0.25rem;
  color: #1e293b;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.doc-actions {
  display: flex;
  gap: 0.5rem;
}

.btn-secondary {
  padding: 0.5rem 1rem;
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  color: #475569;
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.2s;
  display: inline-flex;
  align-items: center;
  gap: 0.375rem;
  text-decoration: none;
  min-height: 36px;
  -webkit-tap-highlight-color: transparent;
}

.btn-secondary:hover {
  background: #f8fafc;
  border-color: #cbd5e0;
  transform: translateY(-1px);
}

.btn-secondary:active {
  transform: translateY(0);
}

.btn-secondary svg {
  width: 16px;
  height: 16px;
}

/* History Timeline */
.history-timeline {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.history-item {
  padding: 1.25rem;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  transition: all 0.2s;
  position: relative;
}

.history-item:hover {
  background: white;
  transform: translateX(4px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

.history-action {
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 0.25rem;
  font-size: 1rem;
}

.history-date {
  font-size: 0.8125rem;
  color: #64748b;
  margin-bottom: 0.5rem;
}

.history-text {
  font-size: 0.875rem;
  color: #475569;
  line-height: 1.5;
}

.history-body {
  font-size: 0.8125rem;
  color: #64748b;
  margin-top: 0.25rem;
}

.history-status {
  font-size: 0.8125rem;
  color: #6366f1;
  margin-top: 0.25rem;
  font-weight: 500;
}

/* Discussion Section */
.discussion-section {
  background: white;
  border-radius: 16px;
  padding: 2rem;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.08);
  overflow: hidden;
}

/* Sidebar Discussion Section */
.sidebar .discussion-section {
  padding: 1.5rem;
  max-height: calc(100vh - 120px);
  overflow-y: auto;
  position: sticky;
  top: 2rem;
  overflow-x: hidden;
}

.sidebar .discussion-section::-webkit-scrollbar {
  width: 6px;
}

.sidebar .discussion-section::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 3px;
}

.sidebar .discussion-section::-webkit-scrollbar-thumb {
  background: #cbd5e0;
  border-radius: 3px;
}

.sidebar .comment-input-section {
  padding: 1rem;
  margin-bottom: 1rem;
  overflow: visible;
}

.sidebar .input-footer {
  gap: 0.5rem;
}

.sidebar .footer-right {
  flex-wrap: nowrap;
}

.sidebar #comments-list {
  max-height: 400px;
}

.discussion-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
}

.discussion-title {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-size: 1.25rem;
  font-weight: 700;
  color: #1e293b;
}

.discussion-stats {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 0.5rem 1rem;
  background: #f0fdf4;
  border: 1px solid #bbf7d0;
  border-radius: 999px;
  font-size: 0.875rem;
}

.discussion-stats .pulse-dot {
  position: static;
  margin: 0;
  width: 8px;
  height: 8px;
  background: #22c55e;
}

/* Comment Input */
.comment-input-section {
  padding: 1.5rem;
  background: linear-gradient(135deg, rgba(59,130,246,0.05), rgba(99,102,241,0.05));
  border: 2px solid transparent;
  border-radius: 12px;
  margin-bottom: 1.5rem;
  transition: all 0.3s;
}

.comment-input-section:focus-within {
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.input-header {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-bottom: 1rem;
}

.user-avatar {
  width: 40px;
  height: 40px;
  background: #e2e8f0;
  color: #718096;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1rem;
  font-weight: 600;
}

.user-avatar-authenticated {
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
}

.input-title {
  font-weight: 600;
  color: #1e293b;
}

.input-subtitle {
  font-size: 0.875rem;
  color: #64748b;
  margin-top: 0.125rem;
}

.comment-textarea {
  width: 100%;
  min-height: 80px;
  padding: 0.75rem;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  resize: vertical;
  font-family: inherit;
  font-size: 16px; /* Prevents zoom on iOS */
  transition: all 0.2s;
  -webkit-appearance: none;
}

@media (min-width: 768px) {
  .comment-textarea {
    font-size: 0.95rem;
  }
}

.comment-textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.input-footer {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 1rem;
  gap: 0.5rem;
  width: 100%;
  max-width: 100%;
}

.input-tools {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  flex-wrap: wrap;
  flex: 1;
  min-width: 0;
}

.tool-btn {
  padding: 0.5rem;
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  cursor: pointer;
  font-size: 1.2rem;
  transition: all 0.2s;
  min-width: 40px;
  min-height: 40px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.tool-btn:hover {
  background: #f8fafc;
  transform: scale(1.1);
}

.anonymous-toggle {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  color: #475569;
  margin-left: 0.5rem;
  white-space: nowrap;
  flex-shrink: 1;
}

.anonymous-toggle input[type="checkbox"] {
  flex-shrink: 0;
}

.footer-right {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  flex-shrink: 0;
}

.post-btn {
  padding: 0.625rem 1rem;
  background: linear-gradient(135deg, #3b82f6, #6366f1);
  color: white;
  border: none;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;
  font-size: 0.875rem;
  min-height: 40px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  white-space: nowrap;
  flex-shrink: 0;
}

.post-btn:hover:not(:disabled) {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
}

.post-btn:active:not(:disabled) {
  transform: translateY(0);
}

.post-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

.char-count {
  font-size: 0.75rem;
  color: #94a3b8;
  white-space: nowrap;
  flex-shrink: 0;
}

/* Comment Success Message */
.comment-success {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1rem;
  background: #f0fdf4;
  border: 1px solid #bbf7d0;
  border-radius: 8px;
  color: #22c55e;
  font-size: 0.875rem;
  font-weight: 500;
  margin-bottom: 0.75rem;
  animation: slideDown 0.3s ease-out;
}

@keyframes slideDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Comments Section */
.comments-section {
  margin-top: 2rem;
  padding-top: 2rem;
  border-top: 1px solid #f1f5f9;
}

.comments-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
}

.comments-title {
  font-size: 1.125rem;
  font-weight: 700;
  color: #1e293b;
}

.comments-count {
  font-size: 0.875rem;
  color: #64748b;
  font-weight: 500;
}

/* Comments List */
#comments-list {
  max-height: 600px;
  overflow-y: auto;
  padding-right: 0.5rem;
}

#comments-list::-webkit-scrollbar {
  width: 6px;
}

#comments-list::-webkit-scrollbar-track {
  background: #f1f5f9;
  border-radius: 3px;
}

#comments-list::-webkit-scrollbar-thumb {
  background: #cbd5e0;
  border-radius: 3px;
}

.comment-item {
  padding: 1.25rem;
  border-bottom: 1px solid #f1f5f9;
  transition: all 0.2s;
  animation: commentFadeIn 0.3s ease-out;
}

@keyframes commentFadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.comment-item:hover {
  background: #fafafa;
}

.comment-item:last-child {
  border-bottom: none;
  padding-bottom: 0;
}

.comment-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 0.75rem;
}

.comment-author {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.comment-avatar {
  width: 36px;
  height: 36px;
  background: #e2e8f0;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.875rem;
  color: #64748b;
  font-weight: 600;
}

.comment-avatar-user {
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
}

.author-info {
  display: flex;
  flex-direction: column;
}

.comment-name {
  font-weight: 600;
  font-size: 0.9rem;
  color: #1e293b;
}

.comment-time {
  font-size: 0.75rem;
  color: #94a3b8;
}

.comment-text {
  margin-bottom: 1rem;
  line-height: 1.6;
  color: #334155;
  font-size: 0.9rem;
  word-wrap: break-word;
  white-space: pre-wrap;
}

/* Reactions Bar */
.comment-footer {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.reaction-btn {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.375rem 0.625rem;
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 999px;
  cursor: pointer;
  transition: all 0.2s;
  font-size: 0.875rem;
  min-height: 32px;
  -webkit-tap-highlight-color: transparent;
}

.reaction-btn:hover {
  background: #f8fafc;
  transform: translateY(-2px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
}

.reaction-btn:active {
  transform: translateY(0);
}

.reaction-btn.active {
  background: #eff6ff;
  border-color: var(--reaction-color, #3b82f6);
  color: var(--reaction-color, #3b82f6);
}

.reaction-emoji {
  line-height: 1;
}

.reaction-count {
  font-weight: 600;
  color: #475569;
}

.reply-button {
  margin-left: auto;
  display: inline-flex;
  align-items: center;
  gap: 0.375rem;
  padding: 0.375rem 0.75rem;
  background: transparent;
  color: #3b82f6;
  border: 1px solid transparent;
  border-radius: 6px;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  min-height: 32px;
  -webkit-tap-highlight-color: transparent;
}

.reply-button:hover {
  background: #eff6ff;
  border-color: #dbeafe;
}

.reply-button:active {
  transform: scale(0.98);
}

.reply-button svg {
  width: 14px;
  height: 14px;
}

/* Reply Form */
.reply-form {
  margin-top: 1rem;
  padding: 1rem;
  background: #f8fafc;
  border-radius: 8px;
  border: 1px solid #e2e8f0;
  animation: slideDown 0.2s ease-out;
}

.reply-form-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 0.75rem;
}

.replying-to {
  font-size: 0.8125rem;
  color: #64748b;
}

.cancel-reply {
  font-size: 0.8125rem;
  color: #64748b;
  cursor: pointer;
  text-decoration: none;
  transition: color 0.2s;
}

.cancel-reply:hover {
  color: #475569;
  text-decoration: underline;
}

.reply-textarea {
  width: 100%;
  min-height: 80px;
  padding: 0.75rem;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  resize: vertical;
  font-family: inherit;
  font-size: 16px; /* Prevents zoom on iOS */
  line-height: 1.5;
  transition: all 0.2s;
  -webkit-appearance: none;
}

@media (min-width: 768px) {
  .reply-textarea {
    font-size: 0.875rem;
  }
}

.reply-textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.reply-actions {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-top: 0.75rem;
}

.reply-submit {
  padding: 0.5rem 1rem;
  background: linear-gradient(135deg, #3b82f6, #6366f1);
  color: white;
  border: none;
  border-radius: 6px;
  font-size: 0.8125rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  min-height: 36px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  -webkit-tap-highlight-color: transparent;
}

.reply-submit:hover:not(:disabled) {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
}

.reply-submit:active:not(:disabled) {
  transform: translateY(0);
}

.reply-submit:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

/* Nested Replies */
.comment-replies {
  margin-left: 2.5rem;
  margin-top: 1rem;
  padding-left: 1rem;
  border-left: 2px solid #e2e8f0;
}

.comment-replies .comment-item {
  padding: 0.75rem 0;
}

.comment-replies .comment-avatar {
  width: 32px;
  height: 32px;
  font-size: 0.8125rem;
}

/* Sidebar */
.sidebar {
  position: sticky;
  top: 2rem;
  height: fit-content;
}

/* Related Content */
#related-content {
  padding: 1rem;
}

#related-content p {
  text-align: center;
  color: #64748b;
  font-size: 0.875rem;
  padding: 2rem;
}

/* Status Message */
.status-message {
  font-size: 0.875rem;
  color: rgba(255, 255, 255, 0.9);
  display: flex;
  align-items: center;
  gap: 0.5rem;
  min-height: 1.5rem;
  margin-top: 0.5rem;
}

.status-icon {
  width: 16px;
  height: 16px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* Empty State */
.empty-state {
  text-align: center;
  padding: 3rem;
  color: #64748b;
}

.empty-state svg {
  width: 48px;
  height: 48px;
  margin: 0 auto 1rem;
  opacity: 0.5;
}

.empty-state p {
  font-size: 0.875rem;
  margin-bottom: 0.5rem;
}

/* Loading Skeleton */
.loading-skeleton {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.skeleton-item {
  background: linear-gradient(90deg, #f7fafc 25%, #e2e8f0 50%, #f7fafc 75%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
  border-radius: 8px;
}

.skeleton-line {
  height: 1rem;
  width: 100%;
}

.skeleton-line:nth-child(2) { width: 90%; }
.skeleton-line:nth-child(3) { width: 95%; }
.skeleton-line:nth-child(4) { width: 85%; }

@keyframes shimmer {
  0% { background-position: 200% 0; }
  100% { background-position: -200% 0; }
}

/* Error State */
.error-state {
  background: #fff5f5;
  border: 1px solid #feb2b2;
  border-radius: 12px;
  padding: 1.5rem;
  display: flex;
  align-items: start;
  gap: 1rem;
}

.error-state svg {
  width: 20px;
  height: 20px;
  color: #dc2626;
  flex-shrink: 0;
}

.error-state p {
  color: #dc2626;
  font-size: 0.875rem;
  margin: 0;
}

/* Modal for PDF Preview */
#pdf-modal {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0);
  backdrop-filter: blur(0px);
  z-index: 50;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

#pdf-modal.show {
  opacity: 1;
  visibility: visible;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(8px);
}

.modal-content {
  background: white;
  border-radius: 16px;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  width: 100%;
  max-width: 56rem;
  height: 85vh;
  display: flex;
  flex-direction: column;
  transform: scale(0.9) translateY(20px);
  opacity: 0;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

#pdf-modal.show .modal-content {
  transform: scale(1) translateY(0);
  opacity: 1;
}

.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1.25rem 1.5rem;
  border-bottom: 1px solid #e2e8f0;
  background: #f8fafc;
  border-radius: 16px 16px 0 0;
}

#pdf-title {
  font-weight: 600;
  color: #1e293b;
  font-size: 1.125rem;
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.modal-close {
  width: 2rem;
  height: 2rem;
  border-radius: 8px;
  background: transparent;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #64748b;
  transition: all 0.2s;
  min-width: 44px;
  min-height: 44px;
  -webkit-tap-highlight-color: transparent;
}

.modal-close:hover {
  background: #e2e8f0;
  color: #1e293b;
}

.modal-close:active {
  transform: scale(0.95);
}

#pdf-frame {
  flex: 1;
  width: 100%;
  border: none;
  background: #f8fafc;
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 0.75rem;
  padding: 1.25rem 1.5rem;
  border-top: 1px solid #e2e8f0;
  background: #f8fafc;
  border-radius: 0 0 16px 16px;
}

.download-button {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.625rem 1.25rem;
  background: linear-gradient(135deg, #3b82f6, #6366f1);
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 0.875rem;
  font-weight: 500;
  text-decoration: none;
  cursor: pointer;
  transition: all 0.2s;
}

.download-button:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
}

.close-button {
  padding: 0.625rem 1.25rem;
  background: white;
  color: #475569;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
}

.close-button:hover {
  background: #f8fafc;
  border-color: #cbd5e0;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .content-grid {
    grid-template-columns: 1fr;
  }
  
  .hero-title {
    font-size: 1.75rem;
  }
  
  .info-grid {
    grid-template-columns: 1fr;
  }
  
  .sidebar {
    position: static;
    margin-top: 2rem;
  }
  
  .sidebar .discussion-section {
    position: static;
    max-height: none;
  }
  
  .hero-meta {
    gap: 1rem;
  }
  
  .activity-stats {
    display: none;
  }
  
  .nav-tabs {
    gap: 0;
  }
  
  .tab-btn {
    padding: 0.5rem 1rem;
    font-size: 0.8125rem;
  }
}

@media (max-width: 640px) {
  .hero-title {
    font-size: 1.5rem;
  }
  
  .main-container {
    padding: 0 1rem;
  }
  
  .content-card {
    padding: 1.5rem;
  }
  
  .discussion-section {
    padding: 1.5rem;
  }
  
  .comment-replies {
    margin-left: 1.5rem;
    padding-left: 0.5rem;
  }
}

/* No comments state */
.no-comments {
  text-align: center;
  padding: 2rem;
  color: #94a3b8;
}

.no-comments p {
  font-size: 0.875rem;
}
</style>
</head>
<body>

<!-- Hero Header with Legislation Details -->
<div class="hero-header">
  <div class="hero-content">
    <div class="breadcrumb">
      <span>Nashville</span>
      <span>›</span>
      <span>Legislation</span>
      <span>›</span>
      <span id="breadcrumb-file">Loading...</span>
    </div>
    
    <div class="matter-badge">
      <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
      </svg>
      <span class="matter-file-number">Loading...</span>
    </div>
    
    <h1 class="hero-title" id="hero-title">Loading legislation details...</h1>
    
    <div class="hero-meta" id="hero-meta">
      <div class="meta-item">
        <span class="meta-label">Status</span>
        <span class="meta-value" id="meta-status">Loading...</span>
      </div>
      <div class="meta-item">
        <span class="meta-label">Type</span>
        <span class="meta-value" id="meta-type">Loading...</span>
      </div>
      <div class="meta-item">
        <span class="meta-label">Introduced</span>
        <span class="meta-value" id="meta-introduced">Loading...</span>
      </div>
      <div class="meta-item">
        <span class="meta-label">Last Action</span>
        <span class="meta-value" id="meta-action">Loading...</span>
      </div>
    </div>
    
    <!-- Live Activity Bar -->
    <div class="activity-bar">
      <div class="live-indicator">
        <div class="pulse-container">
          <span class="pulse-ring"></span>
          <span class="pulse-dot"></span>
        </div>
        <span style="font-weight: 600;">Live Activity</span>
      </div>
      
      <div class="activity-stats">
        <div class="stat">
          <span>💬</span>
          <span style="font-weight: 600;" id="comments-today">0</span>
          <span>comments</span>
        </div>
      </div>
    </div>
    
    <div class="status-message">
      <svg class="status-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
      </svg>
      <span id="status-text">Loading legislation data...</span>
    </div>
  </div>
</div>

<!-- Main Container -->
<div class="main-container">
  <!-- Navigation Tabs -->
  <div class="nav-tabs" id="nav-tabs">
    <button class="tab-btn active" data-tab="overview">
      <span>📊</span>
      <span>Overview</span>
    </button>
    <button class="tab-btn" data-tab="sponsors">
      <span>👥</span>
      <span>Sponsors</span>
      <span class="badge" id="sponsors-count">0</span>
    </button>
    <button class="tab-btn" data-tab="documents">
      <span>📎</span>
      <span>Documents</span>
      <span class="badge" id="documents-count">0</span>
    </button>
    <button class="tab-btn" data-tab="history">
      <span>📜</span>
      <span>History</span>
    </button>
  </div>
  
  <!-- Content Grid -->
  <div class="content-grid">
    <!-- Main Content Area -->
    <div class="main-content">
      <div id="content-container">
        <div class="content-card">
          <div class="loading-skeleton">
            <div class="skeleton-item skeleton-line"></div>
            <div class="skeleton-item skeleton-line"></div>
            <div class="skeleton-item skeleton-line"></div>
            <div class="skeleton-item skeleton-line"></div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Sidebar -->
    <div class="sidebar">
      <!-- Discussion Section in Sidebar -->
      <div class="discussion-section" style="margin-bottom: 0;">
        <div class="discussion-header">
          <div class="discussion-title">
            <span>💬</span>
            <span>Community Discussion</span>
          </div>
          <div class="discussion-stats">
            <span class="pulse-dot"></span>
            <span><strong id="active-discussions">0</strong> comments</span>
          </div>
        </div>

        <div class="comment-input-section">
          <div class="input-header">
            <div class="user-avatar" id="comment-user-avatar">?</div>
            <div style="flex: 1;">
              <div class="input-title">Join the conversation</div>
              <div class="input-subtitle">Commenting as <strong id="comment-user-name">Anonymous</strong></div>
            </div>
          </div>

          <div id="comment-success" class="comment-success" style="display: none;">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="16" height="16">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
            <span>Comment posted successfully!</span>
          </div>

          <textarea
            class="comment-textarea"
            id="comment-input"
            placeholder="What's your perspective on this proposal?"
            maxlength="1000"
          ></textarea>

          <div class="input-footer">
            <div class="input-tools">
              <button class="tool-btn" type="button">😊</button>
              <button class="tool-btn" type="button">📎</button>
              <button class="tool-btn" type="button">@</button>
              <label class="anonymous-toggle">
                <input type="checkbox" id="post-anonymous" checked>
                Post anonymously
              </label>
            </div>
            <div class="footer-right">
              <span class="char-count"><span id="char-count">0</span>/1000</span>
              <button class="post-btn" id="comment-btn">Post Comment</button>
            </div>
          </div>
        </div>

        <div class="comments-section">
          <div class="comments-header">
            <h4 class="comments-title">Community Comments</h4>
            <span class="comments-count">0 comments</span>
          </div>
          <div id="comments-list">
            <div class="no-comments">
              <p>No comments yet. Be the first to share your thoughts!</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- PDF Preview Modal -->
<div id="pdf-modal">
  <div class="modal-content">
    <div class="modal-header">
      <span id="pdf-title">
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="20" height="20">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
        </svg>
        <span class="title-text"></span>
      </span>
      <button class="modal-close" onclick="closeModal()">
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="20" height="20">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
    <iframe id="pdf-frame"></iframe>
    <div class="modal-footer">
      <a id="download-link" href="#" download class="download-button">
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="16" height="16">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
        </svg>
        Download
      </a>
      <button class="close-button" onclick="closeModal()">Close</button>
    </div>
  </div>
</div>

<script>
(function() {
  // ========================================
  // SOFTR USER INTEGRATION
  // ========================================
  let softrUserData = null;
  let softrUserEmail = null;
  let softrUserName = 'Anonymous';
  let isSoftrUserAuthenticated = false;
  
  // Function to detect Softr user
  function detectSoftrUser() {
    return new Promise((resolve) => {
      let attempts = 0;
      const maxAttempts = 10;
      
      const checkUser = () => {
        if (window.logged_in_user) {
          softrUserData = window.logged_in_user;
          
          // Try different possible email field names
          softrUserEmail = softrUserData.email || 
                          softrUserData.Email || 
                          softrUserData.softr_user_email || 
                          softrUserData.user_email ||
                          softrUserData.EMAIL ||
                          null;
          
          // Extract name from various possible fields
          if (softrUserData.softr_user_full_name) {
            softrUserName = softrUserData.softr_user_full_name;
          } else if (softrUserData.name) {
            softrUserName = softrUserData.name;
          } else if (softrUserData.full_name) {
            softrUserName = softrUserData.full_name;
          } else if (softrUserData.Name) {
            softrUserName = softrUserData.Name;
          } else if (softrUserEmail) {
            // Extract name from email
            const emailName = softrUserEmail.split('@')[0];
            softrUserName = emailName
              .split(/[._-]/)
              .map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())
              .join(' ');
          }
          
          isSoftrUserAuthenticated = true;
          
          console.log('Softr user detected:', {
            name: softrUserName,
            email: '[hidden for privacy]',
            authenticated: isSoftrUserAuthenticated
          });
          
          resolve(true);
        } else if (attempts < maxAttempts) {
          attempts++;
          setTimeout(checkUser, 500);
        } else {
          console.log('No Softr user detected after', maxAttempts, 'attempts');
          resolve(false);
        }
      };
      
      // Start checking
      checkUser();
    });
  }
  
  // Configuration
  const CONFIG = {
    softrDomain: 'https://eonashville.softr.app',
    sponsorIdMapping: {}
  };
  
  // Extract matterId from URL parameter 'recordId'
  const urlParams = new URLSearchParams(window.location.search);
  const matterId = urlParams.get('recordId') || '7447605';
  
  console.log('Matter ID extracted from URL:', matterId);
  
  // API endpoints
  const baseUrl = 'https://webapi.legistar.com/v1/nashville';
  const corsProxy = 'https://corsproxy.io/?';
  
  const endpoints = {
    matter: `${baseUrl}/matters/${matterId}`,
    sponsors: `${baseUrl}/matters/${matterId}/sponsors`,
    attachments: `${baseUrl}/matters/${matterId}/attachments`,
    history: `${baseUrl}/matters/${matterId}/histories`,
    versions: `${baseUrl}/matters/${matterId}/versions`
  };
  
  // DOM elements
  const statusEl = document.getElementById('status-text');
  const matterFileEl = document.querySelector('.matter-file-number');
  const breadcrumbFileEl = document.getElementById('breadcrumb-file');
  const contentContainer = document.getElementById('content-container');
  const modalEl = document.getElementById('pdf-modal');
  const frameEl = document.getElementById('pdf-frame');
  const downloadEl = document.getElementById('download-link');
  const titleTextEl = document.querySelector('.title-text');
  
  // Initial status
  statusEl.textContent = 'Loading legislation data...';
  
  // Data storage
  let matterData = null;
  let sponsorsData = null;
  let attachmentsData = null;
  let historyData = null;
  
  // Comment functionality
  let commentsData = [];
  let currentUserName = 'Anonymous';
  let activeReplyForm = null;
  
  // Configuration for Xano API
  const XANO_CONFIG = {
    API_BASE_URL: 'https://xvkq-pq7i-idtl.n7d.xano.io/api:Hj4C6PGO',
    ENDPOINTS: {
      COMMENTS: '/comment',
      VOTES: '/comment_vote'
    }
  };

  const REACTIONS = {
    '👍': { name: 'like', color: '#3b82f6' },
    '❤️': { name: 'love', color: '#ef4444' },
    '🔥': { name: 'fire', color: '#f59e0b' },
    '💡': { name: 'insight', color: '#fbbf24' },
    '🤔': { name: 'thinking', color: '#8b5cf6' },
    '👏': { name: 'applause', color: '#10b981' }
  };
  
  // Structure comments into a tree
  function structureComments(flatComments) {
    const commentMap = new Map();
    const rootComments = [];
    
    flatComments.forEach(comment => {
      comment.replies = [];
      commentMap.set(comment.id, comment);
    });
    
    flatComments.forEach(comment => {
      if (comment.parent_comment_id && comment.parent_comment_id !== 0) {
        const parent = commentMap.get(comment.parent_comment_id);
        if (parent) {
          parent.replies.push(comment);
        } else {
          rootComments.push(comment);
        }
      } else {
        rootComments.push(comment);
      }
    });
    
    rootComments.sort((a, b) => b.timestamp - a.timestamp);
    
    const sortReplies = (comments) => {
      comments.forEach(comment => {
        if (comment.replies && comment.replies.length > 0) {
          comment.replies.sort((a, b) => a.timestamp - b.timestamp);
          sortReplies(comment.replies);
        }
      });
    };
    
    sortReplies(rootComments);
    
    return rootComments;
  }
  
  // Load comments from Xano
  async function loadCommentsFromXano() {
    try {
      console.log('Loading comments for matter:', matterId);
      
      // Fetch comments for this matter from Xano using matterId query parameter
      const response = await fetch(`${XANO_CONFIG.API_BASE_URL}${XANO_CONFIG.ENDPOINTS.COMMENTS}?matterId=${matterId}`, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`Failed to load comments: ${response.status}`);
      }
      
      const xanoComments = await response.json();
      
      console.log('Xano response:', xanoComments);
      
      // Also load votes
      const votesResponse = await fetch(`${XANO_CONFIG.API_BASE_URL}${XANO_CONFIG.ENDPOINTS.VOTES}?matterId=${matterId}`, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      let votes = [];
      if (votesResponse.ok) {
        const votesData = await votesResponse.json();
        votes = Array.isArray(votesData) ? votesData : (votesData.items || votesData.data || []);
      }
      
      const commentsArray = Array.isArray(xanoComments) 
        ? xanoComments 
        : (xanoComments.items || xanoComments.data || xanoComments.comment || []);
      
      const allComments = commentsArray
        .filter(comment => !comment.is_deleted)
        .map(comment => {
          let authorName = 'Anonymous';
          if (!comment.is_anonymous && comment.user_email) {
            const emailName = comment.user_email.split('@')[0];
            authorName = emailName
              .split(/[._-]/)
              .map(part => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase())
              .join(' ');
          }
          
          // Get votes for this comment
          const commentVotes = votes.filter(v => v.comment_id === comment.id);
          
          return {
            id: comment.id,
            text: comment.comment_text || '',
            author: authorName,
            timestamp: new Date(comment.created_at || comment.updated_at),
            isAnonymous: comment.is_anonymous || false,
            upvotes: comment.upvotes || 0,
            downvotes: comment.downvotes || 0,
            votes: commentVotes || [],
            parent_comment_id: comment.parent_comment_id || 0,
            replies: []
          };
        });
      
      console.log('Loaded comments from Xano:', allComments.length);
      
      commentsData = structureComments(allComments);
      renderComments();
      
    } catch (error) {
      console.error('Error loading comments:', error);
      commentsData = [];
      renderComments();
    }
  }
  
  // Initialize comments
  async function initializeComments() {
    console.log('Initializing comments for matter:', matterId);
    
    await detectSoftrUser();
    
    if (isSoftrUserAuthenticated && softrUserEmail) {
      console.log('Authenticated Softr user:', softrUserName);
      currentUserName = softrUserName;
      updateCommentAsDisplay();
    }
    
    loadCommentsFromXano();
  }
  
  // Add comment function
  async function addComment(text, parentCommentId = 0) {
    const isAnonymous = parentCommentId ? true : document.getElementById('post-anonymous').checked;
    const timestamp = new Date();
    
    let userEmail = 'anonymous@example.com';
    
    if (!isAnonymous && isSoftrUserAuthenticated && softrUserEmail) {
      userEmail = softrUserEmail;
      currentUserName = softrUserName;
    } else if (!isAnonymous) {
      userEmail = `${currentUserName.toLowerCase().replace(/\s+/g, '.')}@example.com`;
    }
    
    const submitBtn = parentCommentId ? document.querySelector(`#reply-form-${parentCommentId} .reply-submit`) : document.getElementById('comment-btn');
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.textContent = 'Posting...';
    
    try {
      const commentData = {
        matterId: matterId,
        comment_text: text,
        user_email: userEmail,
        is_anonymous: isAnonymous,
        upvotes: 0,
        downvotes: 0,
        parent_comment_id: parentCommentId || 0,
        is_deleted: false,
        ip_address: 'client-ip'
      };
      
      console.log('Sending comment to Xano:', JSON.stringify(commentData, null, 2));
      
      const response = await fetch(`${XANO_CONFIG.API_BASE_URL}${XANO_CONFIG.ENDPOINTS.COMMENTS}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(commentData)
      });
      
      if (!response.ok) {
        const errorData = await response.text();
        console.error('Xano API error:', errorData);
        throw new Error(`Failed to post comment: ${response.status}`);
      }
      
      const savedComment = await response.json();
      console.log('Comment saved to Xano:', savedComment);
      
      if (parentCommentId) {
        const replyForm = document.getElementById(`reply-form-${parentCommentId}`);
        if (replyForm) {
          replyForm.remove();
        }
        activeReplyForm = null;
      } else {
        const commentInput = document.getElementById('comment-input');
        commentInput.value = '';
        document.getElementById('char-count').textContent = '0';
        document.getElementById('char-count').style.color = '#94a3b8';
      }
      
      const successEl = document.getElementById('comment-success');
      successEl.style.display = 'flex';
      setTimeout(() => {
        successEl.style.display = 'none';
      }, 3000);
      
      await loadCommentsFromXano();
      
      if (parentCommentId) {
        const parentElement = document.querySelector(`[data-comment-id="${parentCommentId}"]`);
        if (parentElement) {
          parentElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      } else {
        const commentsList = document.getElementById('comments-list');
        commentsList.scrollTop = 0;
      }
      
    } catch (error) {
      console.error('Error posting comment:', error);
      
      const successEl = document.getElementById('comment-success');
      let errorMessage = 'Failed to post comment. ';
      
      if (error.message.includes('404')) {
        errorMessage += 'The API endpoint was not found. Check your Xano configuration.';
      } else if (error.message.includes('403') || error.message.includes('401')) {
        errorMessage += 'Authentication error. Check your API permissions.';
      } else if (error.message.includes('400')) {
        errorMessage += 'Invalid data format. Check the field requirements.';
      } else {
        errorMessage += 'Please try again.';
      }
      
      successEl.innerHTML = `
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="16" height="16">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
        <span>${errorMessage}</span>
      `;
      successEl.style.background = '#fef2f2';
      successEl.style.borderColor = '#fecaca';
      successEl.style.color = '#dc2626';
      successEl.style.display = 'flex';
      
      setTimeout(() => {
        successEl.style.display = 'none';
        successEl.innerHTML = `
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" width="16" height="16">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
          </svg>
          <span>Comment posted successfully!</span>
        `;
        successEl.style.background = '#f0fdf4';
        successEl.style.borderColor = '#bbf7d0';
        successEl.style.color = '#22c55e';
      }, 3000);
      
    } finally {
      submitBtn.textContent = originalText;
      if (!parentCommentId) {
        const commentInput = document.getElementById('comment-input');
        submitBtn.disabled = commentInput.value.trim().length === 0;
      }
    }
  }

  // Vote/React function
  async function addReaction(commentId, emoji) {
    const voteData = {
      comment_id: commentId,
      matterId: matterId,
      user_identifier: isSoftrUserAuthenticated ? softrUserEmail : generateAnonymousId(),
      vote_type: 'reaction',
      vote: emoji
    };

    try {
      const response = await fetch(`${XANO_CONFIG.API_BASE_URL}${XANO_CONFIG.ENDPOINTS.VOTES}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(voteData)
      });

      if (response.ok) {
        await loadCommentsFromXano();
      }
    } catch (error) {
      console.error('Error adding reaction:', error);
    }
  }

  function aggregateReactions(votes) {
    return votes.reduce((acc, vote) => {
      acc[vote.vote] = (acc[vote.vote] || 0) + 1;
      return acc;
    }, {});
  }

  function hasUserReacted(commentId, emoji) {
    return false;
  }

  function generateAnonymousId() {
    return `anon_${Math.random().toString(36).slice(2, 10)}`;
  }
  
  // Show reply form
  window.showReplyForm = function(parentId, parentAuthor) {
    if (activeReplyForm) {
      activeReplyForm.remove();
    }
    
    const parentElement = document.querySelector(`[data-comment-id="${parentId}"]`);
    if (!parentElement) return;
    
    const replyForm = document.createElement('div');
    replyForm.id = `reply-form-${parentId}`;
    replyForm.className = 'reply-form';
    replyForm.innerHTML = `
      <div class="reply-form-header">
        <span class="replying-to">Replying to ${escapeHtml(parentAuthor)}</span>
        <a href="#" class="cancel-reply" onclick="cancelReply(${parentId}); return false;">Cancel</a>
      </div>
      <textarea 
        class="reply-textarea" 
        placeholder="Write your reply..."
        id="reply-input-${parentId}"
        maxlength="1000"
      ></textarea>
      <div class="reply-actions">
        <label class="anonymous-checkbox">
          <input type="checkbox" checked disabled>
          <span>Reply anonymously</span>
        </label>
        <button class="reply-submit" onclick="submitReply(${parentId})" disabled>Reply</button>
      </div>
    `;
    
    const commentFooter = parentElement.querySelector('.comment-footer');
    commentFooter.parentNode.insertBefore(replyForm, commentFooter.nextSibling);
    
    activeReplyForm = replyForm;
    
    const replyTextarea = document.getElementById(`reply-input-${parentId}`);
    const replySubmitBtn = replyForm.querySelector('.reply-submit');
    
    replyTextarea.focus();
    
    replyTextarea.addEventListener('input', function() {
      replySubmitBtn.disabled = this.value.trim().length === 0;
    });
    
    replyTextarea.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        if (this.value.trim()) {
          submitReply(parentId);
        }
      }
    });
  };
  
  // Cancel reply
  window.cancelReply = function(parentId) {
    const replyForm = document.getElementById(`reply-form-${parentId}`);
    if (replyForm) {
      replyForm.remove();
    }
    activeReplyForm = null;
  };
  
  // Submit reply
  window.submitReply = function(parentId) {
    const replyTextarea = document.getElementById(`reply-input-${parentId}`);
    const replyText = replyTextarea.value.trim();
    
    if (replyText) {
      addComment(replyText, parentId);
    }
  };
  
  // Toggle replies visibility
  window.toggleReplies = function(commentId) {
    const repliesContainer = document.getElementById(`replies-${commentId}`);
    const toggleBtn = document.querySelector(`[data-comment-id="${commentId}"] .show-replies-toggle`);
    
    if (repliesContainer) {
      const isHidden = repliesContainer.style.display === 'none';
      repliesContainer.style.display = isHidden ? 'block' : 'none';
      toggleBtn.classList.toggle('expanded', isHidden);
      
      const replyCount = repliesContainer.querySelectorAll('.comment-item').length;
      toggleBtn.innerHTML = `
        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
        </svg>
        ${isHidden ? 'Hide' : 'Show'} ${replyCount} ${replyCount === 1 ? 'reply' : 'replies'}
      `;
    }
  };
  
  // Render a single comment
  function renderComment(comment, isReply = false) {
    const reactions = aggregateReactions(comment.votes || []);
    return `
      <div class="comment-item${isReply ? ' comment-reply' : ''}" data-comment-id="${comment.id}">
        <div class="comment-header">
          <div class="comment-author">
            <div class="comment-avatar${!comment.isAnonymous ? ' comment-avatar-user' : ''}">${comment.isAnonymous ? '?' : comment.author[0].toUpperCase()}</div>
            <div class="author-info">
              <span class="comment-name">${comment.author}</span>
              <span class="comment-time">${getTimeAgo(comment.timestamp)}</span>
            </div>
          </div>
        </div>
        <div class="comment-text">${escapeHtml(comment.text)}</div>
        <div class="comment-footer">
          ${Object.entries(REACTIONS).map(([emoji, data]) => {
            const count = reactions[emoji] || 0;
            return count > 0 ? `
              <button class="reaction-btn ${hasUserReacted(comment.id, emoji) ? 'active' : ''}" onclick="addReaction(${comment.id}, '${emoji}')" style="--reaction-color: ${data.color}">
                <span class="reaction-emoji">${emoji}</span>
                <span class="reaction-count">${count}</span>
              </button>
            ` : '';
          }).join('')}
          <button class="reply-button" onclick="showReplyForm(${comment.id}, '${escapeHtml(comment.author).replace(/'/g, "\\'")}')">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"/>
            </svg>
            Reply
          </button>
        </div>
        ${comment.replies && comment.replies.length > 0 ? `<div class="comment-replies">${comment.replies.map(reply => renderComment(reply, true)).join('')}</div>` : ''}
      </div>
    `;
  }
  
  // Render comments
  function renderComments() {
    const commentsList = document.getElementById('comments-list');
    const commentsCount = document.querySelector('.comments-count');
    
    const countAllComments = (comments) => {
      let count = 0;
      comments.forEach(comment => {
        count++;
        if (comment.replies && comment.replies.length > 0) {
          count += countAllComments(comment.replies);
        }
      });
      return count;
    };
    
    const totalCount = countAllComments(commentsData);
    
    // Update counts across UI
    if (commentsCount) commentsCount.textContent = `${totalCount} comment${totalCount !== 1 ? 's' : ''}`;
    document.getElementById('comments-today').textContent = totalCount;
    const activeDiscussions = document.getElementById('active-discussions');
    if (activeDiscussions) activeDiscussions.textContent = totalCount;
    
    if (!commentsList) return;
    
    if (commentsData.length === 0) {
      commentsList.innerHTML = `
        <div class="no-comments">
          <p>No comments yet. Be the first to share your thoughts!</p>
        </div>
      `;
      return;
    }
    
    commentsList.innerHTML = commentsData.map(comment => renderComment(comment)).join('');
  }
  
  // Update comment as display
  function updateCommentAsDisplay() {
    const avatarEl = document.getElementById('comment-user-avatar');
    const nameEl = document.getElementById('comment-user-name');
    const anonymousCheckbox = document.getElementById('post-anonymous');

    if (!avatarEl || !nameEl) return;

    const isAnonymous = anonymousCheckbox ? anonymousCheckbox.checked : true;
    const displayName = isAnonymous ? 'Anonymous' : currentUserName;
    const avatarChar = isAnonymous ? '?' : displayName[0].toUpperCase();

    avatarEl.textContent = avatarChar;
    avatarEl.className = isAnonymous ? 'user-avatar' : 'user-avatar user-avatar-authenticated';
    nameEl.textContent = displayName;
  }
  
  // Get time ago string
  function getTimeAgo(timestamp) {
    const now = new Date();
    const diff = now - timestamp;
    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (seconds < 60) return 'just now';
    if (minutes < 60) return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;
    if (hours < 24) return `${hours} hour${hours !== 1 ? 's' : ''} ago`;
    return `${days} day${days !== 1 ? 's' : ''} ago`;
  }
  
  // Escape HTML to prevent XSS
  function escapeHtml(unsafe) {
    return unsafe
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/"/g, "&quot;")
      .replace(/'/g, "&#039;");
  }
  
  // Modal functions
  window.openModal = function(name, href) {
    titleTextEl.textContent = name;
    frameEl.src = href;
    downloadEl.href = href;
    downloadEl.setAttribute('download', name.replace(/\s+/g, '_'));
    modalEl.classList.add('show');
    document.body.style.overflow = 'hidden';
  };
  
  window.closeModal = function() {
    modalEl.classList.remove('show');
    document.body.style.overflow = '';
    setTimeout(() => {
      frameEl.src = '';
    }, 300);
  };
  
  // Click outside to close
  modalEl.addEventListener('click', function(e) {
    if (e.target === modalEl) {
      closeModal();
    }
  });
  
  // Escape key to close modal
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape' && modalEl.classList.contains('show')) {
      closeModal();
    }
  });
  
  // Tab functionality
  function setupTabs() {
    const tabs = document.querySelectorAll('.tab-btn');
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        tabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        showContent(tab.dataset.tab);
      });
    });
  }
  
  // Show content based on active tab
  function showContent(tabName) {
    const sections = document.querySelectorAll('.content-section');
    sections.forEach(section => section.classList.remove('active'));
    
    const activeSection = document.getElementById(`content-${tabName}`);
    if (activeSection) activeSection.classList.add('active');
  }
  
  // Format date
  function formatDate(dateString) {
    if (!dateString) return 'N/A';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      });
    } catch {
      return dateString;
    }
  }
  
  // Helper functions for attachments
  function buildHref(att) {
    if (att.MatterAttachmentHyperlink) return encodeURI(att.MatterAttachmentHyperlink);
    if (att.MatterAttachmentFileName) {
      return `https://nashville.legistar1.com/nashville/attachments/${encodeURIComponent(att.MatterAttachmentFileName)}`;
    }
    return null;
  }
  
  function deriveName(att) {
    const raw = (att.MatterAttachmentName || '').trim();
    if (raw && !/^hyperlink$/i.test(raw)) return raw;
    if (att.MatterAttachmentFileName) return att.MatterAttachmentFileName;
    if (att.MatterAttachmentHyperlink) return att.MatterAttachmentHyperlink.split('/').pop();
    return 'Attachment';
  }
  
  function isPreviewable(href) {
    try {
      const url = new URL(href);
      return /legistar1\.com$/.test(url.hostname);
    } catch (_) {
      return false;
    }
  }
  
  // Display matter details - complete function with all content
  function displayMatterDetails(data) {
    // Update hero header
    const fileNumber = data.MatterFile || `Matter #${matterId}`;
    document.getElementById('hero-title').textContent = data.MatterTitle || data.MatterName || 'Untitled Legislation';
    document.getElementById('meta-status').textContent = data.MatterStatusName || 'Unknown';
    document.getElementById('meta-type').textContent = data.MatterTypeName || 'N/A';
    document.getElementById('meta-introduced').textContent = formatDate(data.MatterIntroDate);
    document.getElementById('meta-action').textContent = formatDate(data.MatterAgendaDate);
    
    // Update file number displays
    if (matterFileEl) matterFileEl.textContent = fileNumber;
    if (breadcrumbFileEl) breadcrumbFileEl.textContent = fileNumber;
    
    // Build content HTML
    let contentHTML = '';
    
    // Overview section
    contentHTML += `
      <div id="content-overview" class="content-section active">
        <div class="content-card">
          <div class="card-header">
            <div class="card-title">
              <div class="card-icon">📊</div>
              <span>Legislation Overview</span>
            </div>
          </div>
          
          <div class="info-grid">
            <div class="info-item">
              <span class="info-label">File Number</span>
              <span class="info-value">${data.MatterFile || 'N/A'}</span>
            </div>
            <div class="info-item">
              <span class="info-label">Type</span>
              <span class="info-value">${data.MatterTypeName || 'N/A'}</span>
            </div>
            <div class="info-item full-width">
              <span class="info-label">Title</span>
              <span class="info-value">${data.MatterTitle || data.MatterName || 'N/A'}</span>
            </div>
            <div class="info-item">
              <span class="info-label">Status</span>
              <span class="info-value">${data.MatterStatusName || 'N/A'}</span>
            </div>
            <div class="info-item">
              <span class="info-label">Agenda Date</span>
              <span class="info-value">${formatDate(data.MatterAgendaDate)}</span>
            </div>
          </div>
          
          <div class="full-text">
            <h4>Matter Details</h4>
            <p><strong>Introduction Date:</strong> ${formatDate(data.MatterIntroDate)}</p>
            <p><strong>Passed Date:</strong> ${formatDate(data.MatterPassedDate)}</p>
            <p><strong>Enactment Date:</strong> ${formatDate(data.MatterEnactmentDate)}</p>
            <p><strong>Enactment Number:</strong> ${data.MatterEnactmentNumber || 'N/A'}</p>
            ${data.MatterRequester ? `<p><strong>Requester:</strong> ${data.MatterRequester}</p>` : ''}
            ${data.MatterNotes ? `<p><strong>Notes:</strong> ${data.MatterNotes}</p>` : ''}
          </div>
        </div>
        
        <!-- Related Legislation -->
        <div class="content-card" style="margin-top: 1.5rem;">
          <div class="card-header">
            <div class="card-title">
              <div class="card-icon">🔗</div>
              <span>Related Legislation</span>
            </div>
          </div>
          <div id="related-content">
            <p style="color: #64748b; font-size: 0.875rem;">Loading related items...</p>
          </div>
        </div>
      </div>
    `;
    
    // Sponsors section
    contentHTML += `
      <div id="content-sponsors" class="content-section">
        <div class="content-card">
          <div class="card-header">
            <div class="card-title">
              <div class="card-icon">👥</div>
              <span>Sponsors</span>
            </div>
          </div>
          <div id="sponsors-content">
            <div class="loading-skeleton">
              <div class="skeleton-item skeleton-line"></div>
              <div class="skeleton-item skeleton-line"></div>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Documents section
    contentHTML += `
      <div id="content-documents" class="content-section">
        <div class="content-card">
          <div class="card-header">
            <div class="card-title">
              <div class="card-icon">📎</div>
              <span>Documents & Attachments</span>
            </div>
          </div>
          <div id="documents-content">
            <div class="loading-skeleton">
              <div class="skeleton-item skeleton-line"></div>
              <div class="skeleton-item skeleton-line"></div>
            </div>
          </div>
        </div>
      </div>
    `;
    
    // History section
    contentHTML += `
      <div id="content-history" class="content-section">
        <div class="content-card">
          <div class="card-header">
            <div class="card-title">
              <div class="card-icon">📜</div>
              <span>Legislative History</span>
            </div>
          </div>
          <div id="history-content">
            <div class="loading-skeleton">
              <div class="skeleton-item skeleton-line"></div>
              <div class="skeleton-item skeleton-line"></div>
            </div>
          </div>
        </div>
      </div>
    `;
    
    contentContainer.innerHTML = contentHTML;
    
    // Set up comment functionality for sidebar
    const commentInput = document.getElementById('comment-input');
    const charCountEl = document.getElementById('char-count');
    const commentBtn = document.getElementById('comment-btn');
    const anonymousCheckbox = document.getElementById('post-anonymous');
    
    anonymousCheckbox.addEventListener('change', updateCommentAsDisplay);
    updateCommentAsDisplay();
    
    commentInput.addEventListener('input', function() {
      const length = this.value.length;
      charCountEl.textContent = length;
      
      if (length > 900) {
        charCountEl.style.color = '#dc2626';
      } else if (length > 800) {
        charCountEl.style.color = '#f59e0b';
      } else {
        charCountEl.style.color = '#94a3b8';
      }
      
      commentBtn.disabled = this.value.trim().length === 0;
    });
    
    commentBtn.disabled = true;
    
    commentInput.addEventListener('keydown', function(e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        const comment = commentInput.value.trim();
        if (comment) {
          addComment(comment);
        }
      }
    });
    
    commentBtn.addEventListener('click', function() {
      const comment = commentInput.value.trim();
      if (comment) {
        addComment(comment);
      }
    });
    
    setupTabs();
    loadSponsors();
    loadAttachments();
    loadHistory();
    
    // Initialize comments immediately since it's always visible in sidebar
    initializeComments();
  }
  
  // Load sponsors
  function loadSponsors() {
    console.log('Loading sponsors...');
    
    fetch(corsProxy + encodeURIComponent(endpoints.sponsors))
      .then(r => r.ok ? r.json() : Promise.reject(new Error(`HTTP ${r.status}`)))
      .then(data => {
        sponsorsData = data;
        displaySponsors(data);
        
        // Update sponsor count
        const sponsorCount = Array.isArray(data) ? data.length : 0;
        document.getElementById('sponsors-count').textContent = sponsorCount;
      })
      .catch(err => {
        console.error('Error loading sponsors:', err);
        document.getElementById('sponsors-content').innerHTML = `
          <p style="color: #64748b; font-size: 0.875rem;">Failed to load sponsors: ${err.message}</p>
        `;
      });
  }
  
  // Display sponsors
  function displaySponsors(data) {
    const sponsorsContent = document.getElementById('sponsors-content');
    
    if (!Array.isArray(data) || data.length === 0) {
      sponsorsContent.innerHTML = '<p style="color: #64748b;">No sponsors found.</p>';
      return;
    }
    
    let sponsorsHTML = '<div class="sponsors-grid">';
    
    data.forEach(sponsor => {
      const sponsorName = sponsor.MatterSponsorName || 'Unknown';
      const sponsorType = sponsor.MatterSponsorTypeName || 'Sponsor';
      const initials = sponsorName.split(' ').map(n => n[0]).join('').substring(0, 2).toUpperCase();
      
      sponsorsHTML += `
        <div class="sponsor-card">
          <div class="sponsor-avatar">${initials}</div>
          <div class="sponsor-info">
            <div class="sponsor-name">${sponsorName}</div>
            <div class="sponsor-type">${sponsorType}</div>
          </div>
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
          </svg>
        </div>
      `;
    });
    
    sponsorsHTML += '</div>';
    sponsorsContent.innerHTML = sponsorsHTML;
  }
  
  // Load attachments
  function loadAttachments() {
    fetch(corsProxy + encodeURIComponent(endpoints.attachments))
      .then(r => r.ok ? r.json() : Promise.reject(new Error(`HTTP ${r.status}`)))
      .then(data => {
        attachmentsData = data;
        displayAttachments(data);
        
        // Update document count
        const docCount = Array.isArray(data) ? data.length : 0;
        document.getElementById('documents-count').textContent = docCount;
      })
      .catch(err => {
        document.getElementById('documents-content').innerHTML = `
          <p style="color: #64748b; font-size: 0.875rem;">Failed to load attachments: ${err.message}</p>
        `;
      });
  }
  
  // Display attachments
  function displayAttachments(data) {
    const documentsContent = document.getElementById('documents-content');
    
    if (!Array.isArray(data) || data.length === 0) {
      documentsContent.innerHTML = `
        <div class="empty-state">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
          </svg>
          <p>No documents or attachments found.</p>
        </div>
      `;
      return;
    }
    
    let attachmentsHTML = '<div class="documents-list">';
    
    data.forEach((att, index) => {
      const href = buildHref(att);
      const name = deriveName(att);
      
      if (!href) {
        attachmentsHTML += `
          <div class="document-item" style="opacity: 0.6;">
            <div class="document-info">
              <div class="doc-icon">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
                </svg>
              </div>
              <div class="doc-name">${name}</div>
            </div>
            <span style="color: #94a3b8; font-size: 0.875rem;">No link available</span>
          </div>
        `;
        return;
      }
      
      const previewable = isPreviewable(href);
      const actionHtml = previewable
        ? `<button class="btn-secondary" onclick="openModal('${name.replace(/'/g, "\\'")}', '${href}')">
             <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
             </svg>
             Preview
           </button>`
        : '';
      
      attachmentsHTML += `
        <div class="document-item">
          <div class="document-info">
            <div class="doc-icon">
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
            </div>
            <div class="doc-name" title="${name}">${name}</div>
          </div>
          <div class="doc-actions">
            ${actionHtml}
            <a class="btn-secondary" href="${href}" target="_blank" rel="noopener">
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
              </svg>
              Open
            </a>
          </div>
        </div>
      `;
    });
    
    attachmentsHTML += '</div>';
    documentsContent.innerHTML = attachmentsHTML;
  }
  
  // Load history
  function loadHistory() {
    fetch(corsProxy + encodeURIComponent(endpoints.history))
      .then(r => r.ok ? r.json() : Promise.reject(new Error(`HTTP ${r.status}`)))
      .then(data => {
        historyData = data;
        displayHistory(data);
      })
      .catch(err => {
        document.getElementById('history-content').innerHTML = `
          <p style="color: #64748b; font-size: 0.875rem;">Failed to load history: ${err.message}</p>
        `;
      });
  }
  
  // Display history
  function displayHistory(data) {
    const historyContent = document.getElementById('history-content');
    
    if (!Array.isArray(data) || data.length === 0) {
      historyContent.innerHTML = '<p style="color: #64748b;">No history records found.</p>';
      return;
    }
    
    let historyHTML = '<div class="history-timeline">';
    
    data.forEach(item => {
      historyHTML += `
        <div class="history-item">
          <div class="history-action">${item.MatterHistoryActionName || 'Action'}</div>
          <div class="history-date">${formatDate(item.MatterHistoryActionDate)}</div>
          ${item.MatterHistoryActionText ? `<div class="history-text">${item.MatterHistoryActionText}</div>` : ''}
          ${item.MatterHistoryActionBodyName ? `<div class="history-body">By: ${item.MatterHistoryActionBodyName}</div>` : ''}
          ${item.MatterHistoryPassedFlagName ? `<div class="history-status">${item.MatterHistoryPassedFlagName}</div>` : ''}
        </div>
      `;
    });
    
    historyHTML += '</div>';
    historyContent.innerHTML = historyHTML;
  }
  
  // Initial load
  statusEl.textContent = 'Loading legislation data...';
  
  // Detect Softr user on page load
  detectSoftrUser().then(() => {
    console.log('Initial Softr user detection complete');
  });
  
  // Fetch matter data
  console.log('Fetching matter data from:', corsProxy + encodeURIComponent(endpoints.matter));
  
  fetch(corsProxy + encodeURIComponent(endpoints.matter))
    .then(r => r.ok ? r.json() : Promise.reject(new Error(`HTTP ${r.status}`)))
    .then(data => {
      matterData = data;
      statusEl.textContent = 'All data loaded successfully';
      displayMatterDetails(data);
    })
    .catch(err => {
      console.error('Error loading matter:', err);
      statusEl.textContent = 'Failed to load matter';
      contentContainer.innerHTML = `
        <div class="content-card">
          <div class="error-state">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            <div>
              <p>Failed to load matter details: ${err.message}</p>
              <p style="margin-top: 0.5rem; font-size: 0.8125rem;">Make sure the record ID (${matterId}) is valid and try refreshing the page.</p>
            </div>
          </div>
        </div>
      `;
      // Still update with placeholder text
      if (matterFileEl) matterFileEl.textContent = `Matter #${matterId}`;
      if (breadcrumbFileEl) breadcrumbFileEl.textContent = matterId;
    });
})();
</script>

</body>
</html>
