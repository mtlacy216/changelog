<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nashville Civic News</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        :root {
            --primary: #6B5B95;
            --secondary: #88B0D3;
            --accent: #FF6B6B;
            --success: #4CAF50;
            --warning: #FFC107;
            --error: #F44336;
            --dark: #212529;
            --light: #F8F9FA;
            --gray: #6C757D;
            --border: #DEE2E6;
            --shadow: 0 2px 4px rgba(0,0,0,0.08);
            --shadow-hover: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px 0;
            line-height: 1.6;
        }
        
        .app-header {
            background: white;
            padding: 24px 0;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .app-title {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .app-title h1 {
            font-size: 24px;
            font-weight: 700;
            color: var(--dark);
        }
        
        .location-badge {
            padding: 4px 12px;
            background: var(--primary);
            color: white;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 0.5px;
        }
        
        .sync-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            background: var(--light);
            border-radius: 20px;
            font-size: 13px;
            color: var(--gray);
            transition: all 0.3s ease;
        }
        
        .sync-indicator.loading {
            background: var(--warning);
            color: white;
        }
        
        .sync-indicator.success {
            background: var(--success);
            color: white;
        }
        
        .sync-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: currentColor;
            animation: pulse 2s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.3; }
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        
        .hero-section {
            text-align: center;
            color: white;
            margin-bottom: 40px;
        }
        
        .hero-title {
            font-size: 48px;
            font-weight: 700;
            margin-bottom: 16px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .hero-subtitle {
            font-size: 20px;
            opacity: 0.95;
            max-width: 600px;
            margin: 0 auto;
        }
        
        .stats-bar {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 12px;
            box-shadow: var(--shadow);
            transition: transform 0.2s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-hover);
        }
        
        .stat-label {
            font-size: 12px;
            text-transform: uppercase;
            color: var(--gray);
            letter-spacing: 0.5px;
            margin-bottom: 8px;
        }
        
        .stat-value {
            font-size: 32px;
            font-weight: 700;
            color: var(--dark);
        }
        
        .stat-change {
            font-size: 14px;
            color: var(--success);
            margin-top: 4px;
        }
        
        .filter-bar {
            background: white;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: var(--shadow);
        }
        
        .filter-row {
            display: flex;
            gap: 20px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .search-box {
            flex: 1;
            min-width: 300px;
            position: relative;
        }
        
        .search-input {
            width: 100%;
            padding: 12px 16px 12px 44px;
            border: 2px solid var(--border);
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.2s ease;
        }
        
        .search-input:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .search-icon {
            position: absolute;
            left: 16px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray);
        }
        
        .theme-filters {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin-top: 16px;
        }
        
        .theme-pill {
            padding: 8px 16px;
            border: 2px solid;
            background: white;
            border-radius: 20px;
            font-size: 13px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .theme-pill:hover {
            transform: translateY(-1px);
        }
        
        .theme-pill.active {
            color: white;
        }
        
        .theme-count {
            background: rgba(0,0,0,0.1);
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 11px;
        }
        
        .theme-pill.active .theme-count {
            background: rgba(255,255,255,0.3);
        }
        
        /* Theme colors */
        .theme-all { border-color: var(--gray); color: var(--gray); }
        .theme-all.active { background: var(--gray); }
        
        .theme-governance { border-color: #4A90E2; color: #4A90E2; }
        .theme-governance.active { background: #4A90E2; }
        
        .theme-transparency { border-color: #7FBA00; color: #7FBA00; }
        .theme-transparency.active { background: #7FBA00; }
        
        .theme-decisions { border-color: #B854D4; color: #B854D4; }
        .theme-decisions.active { background: #B854D4; }
        
        .theme-leadership { border-color: #FF8C00; color: #FF8C00; }
        .theme-leadership.active { background: #FF8C00; }
        
        .theme-culture { border-color: #E81E63; color: #E81E63; }
        .theme-culture.active { background: #E81E63; }
        
        .theme-resources { border-color: #009688; color: #009688; }
        .theme-resources.active { background: #009688; }
        
        .theme-care { border-color: #8BC34A; color: #8BC34A; }
        .theme-care.active { background: #8BC34A; }
        
        .articles-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 24px;
            margin-bottom: 40px;
        }
        
        .article-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: var(--shadow);
            transition: all 0.3s ease;
            cursor: pointer;
            display: flex;
            flex-direction: column;
        }
        
        .article-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow-hover);
        }
        
        .article-card.skeleton {
            animation: skeleton-loading 1.5s infinite ease-in-out;
        }
        
        @keyframes skeleton-loading {
            0%, 100% { opacity: 0.7; }
            50% { opacity: 1; }
        }
        
        .article-image {
            width: 100%;
            height: 200px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            position: relative;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
        }
        
        .article-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .article-category {
            position: absolute;
            top: 12px;
            left: 12px;
            padding: 6px 12px;
            background: rgba(255,255,255,0.95);
            border-radius: 6px;
            font-size: 11px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .article-content {
            padding: 20px;
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        
        .article-source {
            font-size: 12px;
            color: var(--gray);
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 8px;
        }
        
        .article-title {
            font-size: 18px;
            font-weight: 700;
            color: var(--dark);
            margin-bottom: 12px;
            line-height: 1.4;
            flex: 1;
        }
        
        .article-excerpt {
            font-size: 14px;
            color: var(--gray);
            line-height: 1.5;
            margin-bottom: 16px;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .article-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 16px;
            border-top: 1px solid var(--border);
        }
        
        .article-meta {
            display: flex;
            align-items: center;
            gap: 12px;
            font-size: 12px;
            color: var(--gray);
        }
        
        .article-actions {
            display: flex;
            gap: 8px;
        }
        
        .action-btn {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: none;
            background: var(--light);
            color: var(--gray);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }
        
        .action-btn:hover {
            background: var(--primary);
            color: white;
        }
        
        .loading-spinner {
            display: none;
            justify-content: center;
            padding: 40px;
        }
        
        .loading-spinner.active {
            display: flex;
        }
        
        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(255,255,255,0.3);
            border-top: 4px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .load-more {
            text-align: center;
            margin: 40px 0;
        }
        
        .load-more-btn {
            padding: 12px 32px;
            background: white;
            color: var(--primary);
            border: 2px solid var(--primary);
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .load-more-btn:hover {
            background: var(--primary);
            color: white;
        }
        
        .floating-refresh {
            position: fixed;
            bottom: 30px;
            right: 30px;
            width: 56px;
            height: 56px;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 50%;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            z-index: 100;
        }
        
        .floating-refresh:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 20px rgba(0,0,0,0.3);
        }
        
        .floating-refresh.spinning {
            animation: spin 1s linear infinite;
        }
        
        .update-toast {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%) translateY(-100px);
            background: var(--success);
            color: white;
            padding: 16px 24px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            display: flex;
            align-items: center;
            gap: 12px;
            transition: transform 0.3s ease;
            z-index: 1000;
        }
        
        .update-toast.show {
            transform: translateX(-50%) translateY(0);
        }
        
        .skeleton-title {
            height: 20px;
            background: var(--border);
            border-radius: 4px;
            margin-bottom: 12px;
        }
        
        .skeleton-text {
            height: 14px;
            background: var(--border);
            border-radius: 4px;
            margin-bottom: 8px;
        }
        
        .skeleton-text:last-child {
            width: 80%;
        }
        
        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.7);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 2000;
            padding: 20px;
            overflow-y: auto;
        }
        
        .modal-overlay.active {
            display: flex;
        }
        
        .modal-container {
            background: white;
            border-radius: 16px;
            max-width: 900px;
            width: 100%;
            max-height: 90vh;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            animation: modalSlideIn 0.3s ease;
        }
        
        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .modal-header {
            padding: 20px 24px;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: var(--light);
        }
        
        .modal-tags {
            display: flex;
            gap: 8px;
            align-items: center;
        }
        
        .modal-tag {
            padding: 6px 12px;
            background: white;
            border: 1px solid var(--border);
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            color: var(--gray);
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .modal-tag.news {
            color: var(--primary);
            border-color: var(--primary);
        }
        
        .modal-close {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: none;
            background: transparent;
            color: var(--gray);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            transition: all 0.2s ease;
        }
        
        .modal-close:hover {
            background: var(--border);
        }
        
        .modal-body {
            overflow-y: auto;
            flex: 1;
        }
        
        .modal-article {
            padding: 24px;
        }
        
        .modal-article-header {
            margin-bottom: 20px;
        }
        
        .modal-article-title {
            font-size: 28px;
            font-weight: 700;
            line-height: 1.3;
            color: var(--dark);
            margin-bottom: 16px;
        }
        
        .modal-article-meta {
            display: flex;
            align-items: center;
            gap: 16px;
            font-size: 14px;
            color: var(--gray);
        }
        
        .modal-article-author {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .modal-article-stats {
            display: flex;
            align-items: center;
            gap: 16px;
        }
        
        .modal-stat {
            display: flex;
            align-items: center;
            gap: 4px;
        }
        
        .modal-article-image {
            width: 100%;
            height: 300px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 12px;
            margin-bottom: 20px;
            background-size: cover;
            background-position: center;
        }
        
        .modal-article-content {
            font-size: 16px;
            line-height: 1.7;
            color: var(--dark);
            margin-bottom: 24px;
        }
        
        .modal-article-content p {
            margin-bottom: 16px;
        }
        
        .modal-divider {
            height: 1px;
            background: var(--border);
            margin: 24px 0;
        }
        
        .modal-discussion {
            padding: 0 24px 24px;
        }
        
        .modal-discussion-header {
            font-size: 20px;
            font-weight: 700;
            margin-bottom: 20px;
            color: var(--dark);
        }
        
        .comment-form {
            margin-bottom: 24px;
        }
        
        .comment-input {
            width: 100%;
            min-height: 100px;
            padding: 12px;
            border: 2px solid var(--border);
            border-radius: 8px;
            font-size: 14px;
            font-family: inherit;
            resize: vertical;
            transition: border-color 0.2s ease;
        }
        
        .comment-input:focus {
            outline: none;
            border-color: var(--primary);
        }
        
        .comment-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
            margin-top: 12px;
        }
        
        .btn {
            padding: 8px 20px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
        }
        
        .btn-primary {
            background: var(--primary);
            color: white;
        }
        
        .btn-primary:hover {
            background: #5a4a83;
        }
        
        .btn-secondary {
            background: var(--light);
            color: var(--gray);
        }
        
        .btn-secondary:hover {
            background: var(--border);
        }
        
        .comments-list {
            display: flex;
            flex-direction: column;
            gap: 16px;
        }
        
        .comment {
            padding: 16px;
            background: var(--light);
            border-radius: 8px;
            transition: background 0.2s ease;
        }
        
        .comment:hover {
            background: #f0f0f0;
        }
        
        .comment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }
        
        .comment-author {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .comment-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: 600;
        }
        
        .comment-username {
            font-weight: 600;
            color: var(--primary);
            font-size: 14px;
        }
        
        .comment-time {
            font-size: 12px;
            color: var(--gray);
        }
        
        .comment-content {
            color: var(--dark);
            font-size: 14px;
            line-height: 1.5;
            margin-bottom: 12px;
        }
        
        .comment-actions {
            display: flex;
            gap: 16px;
        }
        
        .comment-action {
            background: none;
            border: none;
            color: var(--gray);
            font-size: 13px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 4px;
            padding: 0;
            transition: color 0.2s ease;
        }
        
        .comment-action:hover {
            color: var(--primary);
        }
        
        .comment-action.active {
            color: var(--primary);
        }
        
        .comment-replies {
            margin-left: 40px;
            margin-top: 16px;
            padding-left: 16px;
            border-left: 2px solid var(--border);
        }
        
        .view-full-link {
            display: inline-flex;
            align-items: center;
            gap: 4px;
            color: var(--primary);
            text-decoration: none;
            font-size: 14px;
            margin-top: 16px;
        }
        
        .view-full-link:hover {
            text-decoration: underline;
        }
        
        @media (max-width: 768px) {
            .hero-title {
                font-size: 32px;
            }
            
            .hero-subtitle {
                font-size: 16px;
            }
            
            .articles-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-bar {
                grid-template-columns: 1fr;
            }
            
            .modal-container {
                max-height: 100vh;
                border-radius: 0;
            }
            
            .modal-article-title {
                font-size: 22px;
            }
        }
    </style>
</head>
<body>
    <header class="app-header">
        <div class="header-content">
            <div class="app-title">
                <h1>Civic News</h1>
                <span class="location-badge">NASHVILLE</span>
            </div>
            <div class="sync-indicator" id="syncIndicator">
                <span class="sync-dot"></span>
                <span id="syncText">Syncing...</span>
            </div>
        </div>
    </header>

    <div class="container">
        <div class="hero-section">
            <h1 class="hero-title">Your City, Your Voice</h1>
            <p class="hero-subtitle">Stay connected with what's happening in Nashville. Track proposals, join discussions, and see how your community is evolving.</p>
        </div>

        <div class="stats-bar" id="statsBar">
            <div class="stat-card">
                <div class="stat-label">All Updates</div>
                <div class="stat-value" id="totalArticles">0</div>
                <div class="stat-change">Loading...</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Legislation</div>
                <div class="stat-value" id="legislationCount">0</div>
                <div class="stat-change">Active proposals</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Discussions</div>
                <div class="stat-value" id="discussionsCount">0</div>
                <div class="stat-change">Community topics</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">News</div>
                <div class="stat-value" id="newsCount">0</div>
                <div class="stat-change">Recent updates</div>
            </div>
        </div>

        <div class="filter-bar">
            <div class="filter-row">
                <div class="search-box">
                    <span class="search-icon">🔍</span>
                    <input type="text" class="search-input" id="searchInput" placeholder="Search articles, topics, or sources..." />
                </div>
            </div>
            <div class="theme-filters" id="themeFilters">
                <button class="theme-pill theme-all active" onclick="filterByTheme('all')">
                    All Themes <span class="theme-count">0</span>
                </button>
                <button class="theme-pill theme-governance" onclick="filterByTheme('governance')">
                    Governance <span class="theme-count">0</span>
                </button>
                <button class="theme-pill theme-transparency" onclick="filterByTheme('transparency')">
                    Transparency <span class="theme-count">0</span>
                </button>
                <button class="theme-pill theme-decisions" onclick="filterByTheme('decisions')">
                    Decisions <span class="theme-count">0</span>
                </button>
                <button class="theme-pill theme-leadership" onclick="filterByTheme('leadership')">
                    Leadership <span class="theme-count">0</span>
                </button>
                <button class="theme-pill theme-culture" onclick="filterByTheme('culture')">
                    Culture <span class="theme-count">0</span>
                </button>
                <button class="theme-pill theme-resources" onclick="filterByTheme('resources')">
                    Resources <span class="theme-count">0</span>
                </button>
                <button class="theme-pill theme-care" onclick="filterByTheme('care')">
                    Care <span class="theme-count">0</span>
                </button>
            </div>
        </div>

        <div class="articles-grid" id="articlesGrid">
            <!-- Skeleton loaders -->
            <div class="article-card skeleton">
                <div class="article-image"></div>
                <div class="article-content">
                    <div class="skeleton-title"></div>
                    <div class="skeleton-text"></div>
                    <div class="skeleton-text"></div>
                </div>
            </div>
            <div class="article-card skeleton">
                <div class="article-image"></div>
                <div class="article-content">
                    <div class="skeleton-title"></div>
                    <div class="skeleton-text"></div>
                    <div class="skeleton-text"></div>
                </div>
            </div>
            <div class="article-card skeleton">
                <div class="article-image"></div>
                <div class="article-content">
                    <div class="skeleton-title"></div>
                    <div class="skeleton-text"></div>
                    <div class="skeleton-text"></div>
                </div>
            </div>
        </div>

        <div class="loading-spinner" id="loadingSpinner">
            <div class="spinner"></div>
        </div>

        <div class="load-more" id="loadMore" style="display: none;">
            <button class="load-more-btn" onclick="loadMoreArticles()">Load More Articles</button>
        </div>
    </div>

    <button class="floating-refresh" id="floatingRefresh" onclick="refreshContent()">
        🔄
    </button>

    <div class="update-toast" id="updateToast">
        <span>✨</span>
        <span id="updateMessage">New articles available!</span>
    </div>

    <!-- Article Modal -->
    <div class="modal-overlay" id="articleModal">
        <div class="modal-container">
            <div class="modal-header">
                <div class="modal-tags">
                    <span class="modal-tag news">
                        📰 NEWS
                    </span>
                    <span class="modal-tag" id="modalThemeTag">
                        Category
                    </span>
                </div>
                <button class="modal-close" onclick="closeModal()">✕</button>
            </div>
            
            <div class="modal-body">
                <div class="modal-article">
                    <div class="modal-article-header">
                        <h2 class="modal-article-title" id="modalTitle">Article Title</h2>
                        <div class="modal-article-meta">
                            <div class="modal-article-author">
                                <span>Posted by</span>
                                <span id="modalAuthor">@user</span>
                            </div>
                            <div class="modal-article-stats">
                                <div class="modal-stat">
                                    💬 <span id="modalComments">0</span>
                                </div>
                                <div class="modal-stat">
                                    🔥 <span id="modalLikes">0</span>
                                </div>
                                <div class="modal-stat">
                                    👁️ <span id="modalViews">0</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="modal-article-image" id="modalImage"></div>
                    
                    <div class="modal-article-content" id="modalContent">
                        <p>Article content will be loaded here...</p>
                    </div>
                    
                    <a href="#" class="view-full-link" id="modalFullLink" target="_blank">
                        🔗 Full View
                    </a>
                    
                    <div class="modal-divider"></div>
                </div>
                
                <div class="modal-discussion">
                    <h3 class="modal-discussion-header">Discussion</h3>
                    
                    <div class="comment-form">
                        <textarea class="comment-input" placeholder="What are your thoughts? Join the discussion..." id="commentInput"></textarea>
                        <div class="comment-actions">
                            <button class="btn btn-secondary" onclick="clearComment()">Cancel</button>
                            <button class="btn btn-primary" onclick="postComment()">Post Comment</button>
                        </div>
                    </div>
                    
                    <div class="comments-list" id="commentsList">
                        <!-- Comments will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const XANO_API = 'https://xvkq-pq7i-idtl.n7d.xano.io/api:Hj4C6PGO';
        const SOURCES_API = `${XANO_API}/rss_feed`;
        const CONTENT_API = `${XANO_API}/content`;
        const CORS_PROXY = 'https://api.allorigins.win/raw?url=';
        
        // Theme configuration
        const THEMES = {
            governance: { name: 'Governance', color: '#4A90E2' },
            transparency: { name: 'Transparency', color: '#7FBA00' },
            decisions: { name: 'Decisions', color: '#B854D4' },
            leadership: { name: 'Leadership', color: '#FF8C00' },
            culture: { name: 'Culture', color: '#E81E63' },
            resources: { name: 'Resources', color: '#009688' },
            care: { name: 'Care', color: '#8BC34A' }
        };
        
        // State management
        let allArticles = [];
        let displayedArticles = [];
        let filteredArticles = [];
        let feedSources = [];
        let activeThemeFilter = 'all';
        let searchTerm = '';
        let articleUrlMap = new Map();
        let isLoadingMore = false;
        let hasMoreArticles = true;
        let currentPage = 0;
        const articlesPerPage = 12;
        
        // Comments storage (in production, this would be in a database)
        let articleComments = {};
        let currentArticle = null;
        
        // Initialize on page load
        document.addEventListener('DOMContentLoaded', async () => {
            initializeEventListeners();
            await loadInitialContent();
            startBackgroundSync();
        });
        
        // Initialize event listeners
        function initializeEventListeners() {
            const searchInput = document.getElementById('searchInput');
            searchInput.addEventListener('input', debounce(handleSearch, 300));
            
            // Infinite scroll
            window.addEventListener('scroll', handleScroll);
        }
        
        // Load initial content
        async function loadInitialContent() {
            updateSyncIndicator('loading', 'Loading articles...');
            
            try {
                // Load from cache first (immediate display)
                await loadCachedArticles();
                
                // Then fetch fresh RSS in background
                setTimeout(() => fetchRSSInBackground(), 2000);
                
            } catch (error) {
                console.error('Initial load error:', error);
                showError('Failed to load articles. Please refresh.');
            }
        }
        
        // Load cached articles
        async function loadCachedArticles() {
            const cutoffDate = new Date(Date.now() - (48 * 60 * 60 * 1000));
            const params = new URLSearchParams({
                published_after: cutoffDate.toISOString()
            });
            
            try {
                const response = await fetch(`${CONTENT_API}?${params}`);
                if (!response.ok) throw new Error('Cache load failed');
                
                const cached = await response.json();
                
                // Process cached articles
                const processed = cached.map(article => ({
                    ...article,
                    id: article.id || Math.random().toString(36),
                    link: article.url,
                    date: article.published_at ? new Date(article.published_at) : new Date(),
                    themes: article.category && article.category.length > 0 ? 
                        { primary: article.category[0], secondary: article.category.slice(1) } :
                        calculateThemes(article),
                    image_url: article.image || article.image_url, // Preserve image from cache
                    fromCache: true
                }));
                
                // Filter articles with themes
                const themedArticles = processed.filter(a => a.themes && a.themes.primary);
                
                // Sort by date
                themedArticles.sort((a, b) => b.date - a.date);
                
                // Update state
                allArticles = themedArticles;
                articleUrlMap.clear();
                allArticles.forEach(article => {
                    articleUrlMap.set(article.url || article.link, article);
                });
                
                // Display initial batch
                displayArticles(allArticles.slice(0, articlesPerPage));
                updateStats();
                updateSyncIndicator('success', `${themedArticles.length} articles loaded`);
                
            } catch (error) {
                console.error('Cache error:', error);
                updateSyncIndicator('error', 'Cache load failed');
            }
        }
        
        // Fetch RSS in background
        async function fetchRSSInBackground() {
            try {
                const sources = await loadSources();
                if (!sources.length) return;
                
                const newArticles = [];
                
                for (const source of sources) {
                    try {
                        const articles = await fetchFeed(source);
                        articles.forEach(article => {
                            const url = article.url || article.link;
                            if (!articleUrlMap.has(url)) {
                                article.themes = calculateThemes(article);
                                if (article.themes && article.themes.primary) {
                                    // Preserve all article properties including image_url
                                    newArticles.push({
                                        ...article,
                                        themes: article.themes
                                    });
                                    articleUrlMap.set(url, article);
                                }
                            }
                        });
                    } catch (error) {
                        console.error(`Error fetching ${source.name}:`, error);
                    }
                }
                
                if (newArticles.length > 0) {
                    // Merge new articles
                    allArticles = [...newArticles, ...allArticles];
                    allArticles.sort((a, b) => b.date - a.date);
                    
                    // Cache new articles
                    cacheArticles(newArticles);
                    
                    // Show notification
                    showUpdateToast(`${newArticles.length} new articles found!`);
                    
                    // Update display if on first page
                    if (currentPage === 0 && activeThemeFilter === 'all' && !searchTerm) {
                        displayArticles(allArticles.slice(0, articlesPerPage));
                    }
                    
                    updateStats();
                }
                
            } catch (error) {
                console.error('Background fetch error:', error);
            }
        }
        
        // Calculate themes
        function calculateThemes(article) {
            const text = `${article.title || ''} ${article.description || ''}`.toLowerCase();
            const scores = {};
            
            const keywords = {
                governance: ['council', 'mayor', 'commission', 'board', 'vote', 'election', 'ordinance'],
                transparency: ['transparency', 'disclosure', 'audit', 'report', 'investigation', 'accountability'],
                decisions: ['decision', 'proposal', 'plan', 'strategy', 'initiative', 'approach'],
                leadership: ['leader', 'director', 'chief', 'coordinator', 'manager', 'administrator'],
                culture: ['culture', 'arts', 'heritage', 'tradition', 'festival', 'community', 'neighborhood'],
                resources: ['budget', 'funding', 'grant', 'revenue', 'expense', 'cost', 'investment'],
                care: ['health', 'safety', 'education', 'housing', 'transit', 'infrastructure', 'environment']
            };
            
            Object.entries(keywords).forEach(([theme, words]) => {
                scores[theme] = 0;
                words.forEach(word => {
                    if (text.includes(word)) scores[theme]++;
                });
            });
            
            const sorted = Object.entries(scores)
                .filter(([_, score]) => score > 0)
                .sort((a, b) => b[1] - a[1]);
            
            return {
                primary: sorted[0] ? sorted[0][0] : null,
                secondary: sorted.slice(1, 3).map(([key]) => key)
            };
        }
        
        // Display articles
        function displayArticles(articles, append = false) {
            const grid = document.getElementById('articlesGrid');
            
            if (!append) {
                grid.innerHTML = '';
                displayedArticles = [];
            }
            
            if (articles.length === 0 && !append) {
                grid.innerHTML = '<div style="grid-column: 1/-1; text-align: center; padding: 40px; color: white;">No articles found</div>';
                return;
            }
            
            articles.forEach(article => {
                const card = createArticleCard(article);
                grid.appendChild(card);
                displayedArticles.push(article);
            });
            
            // Update load more button
            const loadMore = document.getElementById('loadMore');
            if (displayedArticles.length < (filteredArticles.length || allArticles.length)) {
                loadMore.style.display = 'block';
            } else {
                loadMore.style.display = 'none';
            }
        }
        
        // Create article card
        function getProxiedImageUrl(originalUrl) {
            if (!originalUrl) return null;

            // Return original URL for now; proxy options can be added if needed
            return originalUrl;
        }

        function createArticleCard(article) {
            const card = document.createElement('div');
            card.className = 'article-card';
            card.onclick = () => openArticleModal(article);

            const themeColor = article.themes?.primary ? THEMES[article.themes.primary]?.color : '#666';
            const imageUrl = getProxiedImageUrl(article.image_url || article.image);

            // Create a unique ID for this card's image
            const imageId = `img-${article.id || Math.random().toString(36)}`;

            card.innerHTML = `
                <div class="article-image" id="${imageId}" style="background: linear-gradient(135deg, ${themeColor}66, ${themeColor}bb);">
                    ${article.themes?.primary ? `
                        <div class="article-category" style="${imageUrl ? 'background: rgba(255,255,255,0.95);' : ''} color: ${themeColor}">
                            ${THEMES[article.themes.primary].name}
                        </div>
                    ` : ''}
                </div>
                <div class="article-content">
                    <div class="article-source">${escapeHtml(article.source_name || article.source || 'Unknown')}</div>
                    <h3 class="article-title">${escapeHtml(article.title || 'Untitled')}</h3>
                    <p class="article-excerpt">${escapeHtml((article.description || '').substring(0, 150))}...</p>
                    <div class="article-footer">
                        <div class="article-meta">
                            <span>📅 ${article.date ? formatDate(article.date) : 'Today'}</span>
                            ${article.fromCache ? '<span>💾 Cached</span>' : '<span>🔄 Fresh</span>'}
                        </div>
                        <div class="article-actions">
                            <button class="action-btn" onclick="event.stopPropagation(); shareArticle('${escapeHtml(article.link)}')">🔗</button>
                            <button class="action-btn" onclick="event.stopPropagation(); saveArticle('${article.id}')">⭐</button>
                        </div>
                    </div>
                </div>
            `;

            // Try to load the image after card is created
            if (imageUrl) {
                const imageDiv = card.querySelector(`#${imageId}`);
                const img = new Image();

                img.onload = function() {
                    imageDiv.style.backgroundImage = `url('${imageUrl}')`;
                    imageDiv.style.backgroundSize = 'cover';
                    imageDiv.style.backgroundPosition = 'center';
                };

                img.onerror = function() {
                    console.log('Image failed to load:', imageUrl);
                };

                img.src = imageUrl;
            }

            return card;
        }
        
        // Filter by theme
        function filterByTheme(theme) {
            activeThemeFilter = theme;
            currentPage = 0;
            
            // Update UI
            document.querySelectorAll('.theme-pill').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector(`.theme-pill.theme-${theme}`).classList.add('active');
            
            // Apply filter
            if (theme === 'all') {
                filteredArticles = [];
            } else {
                filteredArticles = allArticles.filter(article => 
                    article.themes?.primary === theme || 
                    article.themes?.secondary?.includes(theme)
                );
            }
            
            // Apply search if active
            applyFilters();
        }
        
        // Handle search
        function handleSearch() {
            searchTerm = document.getElementById('searchInput').value.toLowerCase();
            currentPage = 0;
            applyFilters();
        }
        
        // Apply all filters
        function applyFilters() {
            let articles = activeThemeFilter === 'all' ? allArticles : filteredArticles;
            
            if (searchTerm) {
                articles = articles.filter(article => 
                    (article.title || '').toLowerCase().includes(searchTerm) ||
                    (article.description || '').toLowerCase().includes(searchTerm) ||
                    (article.source_name || '').toLowerCase().includes(searchTerm)
                );
            }
            
            displayArticles(articles.slice(0, articlesPerPage));
        }
        
        // Load more articles
        function loadMoreArticles() {
            const articles = filteredArticles.length > 0 || activeThemeFilter !== 'all' ? 
                filteredArticles : allArticles;
            
            const start = displayedArticles.length;
            const end = start + articlesPerPage;
            const nextBatch = articles.slice(start, end);
            
            if (nextBatch.length > 0) {
                displayArticles(nextBatch, true);
            }
        }
        
        // Handle infinite scroll
        function handleScroll() {
            if (isLoadingMore) return;
            
            const scrollPosition = window.innerHeight + window.scrollY;
            const threshold = document.body.offsetHeight - 500;
            
            if (scrollPosition >= threshold) {
                loadMoreArticles();
            }
        }
        
        // Refresh content
        async function refreshContent() {
            const btn = document.getElementById('floatingRefresh');
            btn.classList.add('spinning');
            
            await loadInitialContent();
            
            setTimeout(() => {
                btn.classList.remove('spinning');
            }, 1000);
        }
        
        // Start background sync
        function startBackgroundSync() {
            // Sync every 5 minutes
            setInterval(async () => {
                await fetchRSSInBackground();
            }, 5 * 60 * 1000);
        }
        
        // Update stats
        function updateStats() {
            const stats = {
                total: allArticles.length,
                governance: 0,
                transparency: 0,
                decisions: 0,
                leadership: 0,
                culture: 0,
                resources: 0,
                care: 0
            };
            
            allArticles.forEach(article => {
                if (article.themes?.primary) {
                    stats[article.themes.primary] = (stats[article.themes.primary] || 0) + 1;
                }
            });
            
            // Update stat cards
            document.getElementById('totalArticles').textContent = stats.total;
            document.getElementById('legislationCount').textContent = stats.governance + stats.decisions;
            document.getElementById('discussionsCount').textContent = stats.culture + stats.care;
            document.getElementById('newsCount').textContent = stats.transparency + stats.resources;
            
            // Update theme counts
            Object.entries(stats).forEach(([theme, count]) => {
                if (theme !== 'total') {
                    const btn = document.querySelector(`.theme-pill.theme-${theme} .theme-count`);
                    if (btn) btn.textContent = count;
                }
            });
            
            document.querySelector('.theme-pill.theme-all .theme-count').textContent = stats.total;
        }
        
        // Update sync indicator
        function updateSyncIndicator(status, text) {
            const indicator = document.getElementById('syncIndicator');
            const syncText = document.getElementById('syncText');
            
            indicator.className = `sync-indicator ${status}`;
            syncText.textContent = text;
            
            if (status === 'success') {
                setTimeout(() => {
                    indicator.className = 'sync-indicator';
                    syncText.textContent = 'Synced';
                }, 3000);
            }
        }
        
        // Show update toast
        function showUpdateToast(message) {
            const toast = document.getElementById('updateToast');
            document.getElementById('updateMessage').textContent = message;
            toast.classList.add('show');
            
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }
        
        // Helper functions
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text || '';
            return div.innerHTML;
        }
        
        function formatDate(date) {
            const now = new Date();
            const diff = now - date;
            const hours = Math.floor(diff / (1000 * 60 * 60));
            
            if (hours < 1) return 'Just now';
            if (hours < 24) return `${hours}h ago`;
            if (hours < 48) return 'Yesterday';
            return date.toLocaleDateString();
        }
        
        // Load RSS sources
        async function loadSources() {
            try {
                const response = await fetch(SOURCES_API);
                if (!response.ok) throw new Error('Failed to load sources');
                return await response.json();
            } catch (error) {
                console.error('Error loading sources:', error);
                return [];
            }
        }
        
        // Fetch single feed
        async function fetchFeed(source) {
            const url = source.url || source.link;
            if (!url) return [];

            try {
                const proxyUrl = CORS_PROXY + encodeURIComponent(url);
                const response = await fetch(proxyUrl);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);

                const text = await response.text();
                // Pass the original feed URL for relative URL resolution
                return parseRSSFeed(text, source.name || source.title, source.id, url);
            } catch (error) {
                console.error(`Error fetching ${source.name}:`, error);
                return [];
            }
        }

        // Enhanced image extraction
        function extractImageFromRSSItem(item, feedUrl) {
            const images = [];

            // 1. Check for media:content and media:thumbnail first (most reliable)
            const mediaContent = item.querySelector('content[medium="image"], thumbnail');
            if (mediaContent) {
                const url = mediaContent.getAttribute('url');
                if (url) images.push({ url, score: 20, source: 'media:content' });
            }

            // 2. Check enclosure tags (common for podcasts and media)
            const enclosures = item.querySelectorAll('enclosure[type^="image"]');
            enclosures.forEach(enc => {
                const url = enc.getAttribute('url');
                if (url) images.push({ url, score: 18, source: 'enclosure' });
            });

            // 3. Check all namespace variations
            const namespaceElements = [
                'media\\:content', 'media\\:thumbnail',
                'itunes\\:image', 'image', 'thumbnail',
                'content[type="image"]', 'link[rel="enclosure"][type^="image"]'
            ];

            namespaceElements.forEach(selector => {
                try {
                    const elements = item.querySelectorAll(selector);
                    elements.forEach(elem => {
                        const typeAttr = (elem.getAttribute('type') || '').toLowerCase();
                        ['url', 'href', 'src'].forEach(attr => {
                            const url = elem.getAttribute(attr);
                            if (url && (isImageUrl(url) || typeAttr.startsWith('image'))) {
                                images.push({
                                    url,
                                    score: 15,
                                    source: `${selector}.${attr}`
                                });
                            }
                        });
                        const text = elem.textContent?.trim();
                        if (text && (isImageUrl(text) || typeAttr.startsWith('image'))) {
                            images.push({
                                url: text,
                                score: 14,
                                source: `${selector}.text`
                            });
                        }
                    });
                } catch (e) {
                    // Ignore selector errors
                }
            });

            // 4. Extract from description/content HTML
            const contentFields = [
                'description', 'content', 'encoded',
                'content\\:encoded', 'summary'
            ];

            contentFields.forEach(field => {
                const contentElem = item.querySelector(field);
                if (contentElem) {
                    const content = contentElem.textContent || '';

                    const imgRegex = /<img[^>]+src=["']([^"']+)["'][^>]*>/gi;
                    let match;
                    while ((match = imgRegex.exec(content)) !== null) {
                        if (match[1]) {
                            images.push({
                                url: match[1],
                                score: 12,
                                source: `${field}.img`
                            });
                        }
                    }

                    const urlRegex = /https?:\/\/[^\s<>"']+\.(?:jpg|jpeg|png|gif|webp|svg)(?:\?[^\s<>"']*)?/gi;
                    const urls = content.match(urlRegex);
                    if (urls) {
                        urls.forEach(url => {
                            images.push({
                                url,
                                score: 10,
                                source: `${field}.url`
                            });
                        });
                    }
                }
            });

            // 5. Deduplicate and resolve relative URLs
            const uniqueUrls = new Map();
            images.forEach(img => {
                let finalUrl = img.url;

                // Resolve relative URLs
                if (finalUrl && !finalUrl.startsWith('http')) {
                    finalUrl = resolveRelativeUrl(finalUrl, item, feedUrl);
                }

                if (finalUrl && isValidImageUrl(finalUrl)) {
                    if (!uniqueUrls.has(finalUrl) || uniqueUrls.get(finalUrl).score < img.score) {
                        uniqueUrls.set(finalUrl, { ...img, url: finalUrl });
                    }
                }
            });

            const sortedImages = Array.from(uniqueUrls.values())
                .sort((a, b) => b.score - a.score);

            if (sortedImages.length > 0) {
                console.log(`Found ${sortedImages.length} images, best: ${sortedImages[0].source}`);
                return sortedImages[0].url;
            }

            return null;
        }

        // Helper to resolve relative URLs
        function resolveRelativeUrl(relativeUrl, item, feedUrl) {
            let baseUrl = feedUrl;

            const itemLink = item.querySelector('link')?.textContent ||
                           item.querySelector('link')?.getAttribute('href');
            if (itemLink && itemLink.startsWith('http')) {
                try {
                    const url = new URL(itemLink);
                    baseUrl = `${url.protocol}//${url.host}`;
                } catch (e) {
                    // Use feed URL as fallback
                }
            }

            if (!baseUrl) {
                const feedLink = item.ownerDocument?.querySelector('channel > link')?.textContent;
                if (feedLink) baseUrl = feedLink;
            }

            if (baseUrl) {
                try {
                    if (relativeUrl.startsWith('//')) {
                        return 'https:' + relativeUrl;
                    }

                    if (relativeUrl.startsWith('/')) {
                        const base = new URL(baseUrl);
                        return `${base.protocol}//${base.host}${relativeUrl}`;
                    }

                    return new URL(relativeUrl, baseUrl).href;
                } catch (e) {
                    console.error('Failed to resolve URL:', relativeUrl, 'with base:', baseUrl);
                }
            }

            return relativeUrl;
        }

        // Enhanced URL validation
        function isValidImageUrl(url) {
            if (!url || typeof url !== 'string') return false;

            if (!url.match(/^https?:\/\//i)) return false;

            const excludePatterns = [
                /1x1/i, /pixel/i, /tracking/i, /analytics/i,
                /favicon/i, /icon-\d+/i, /badge/i,
                /feeds\.feedburner/i, /feedburner\.com\/~ff/i
            ];

            if (excludePatterns.some(pattern => pattern.test(url))) {
                return false;
            }

            return true;
        }

        // Simplified image URL check
        function isImageUrl(str) {
            if (!str || typeof str !== 'string') return false;

            if (/(\.jpg|\.jpeg|\.png|\.gif|\.webp|\.svg)(\?|#|$)/i.test(str)) {
                return true;
            }

            const imagePatterns = [
                /cloudinary/i, /imgur/i, /wp-content\/uploads/i,
                /media\//i, /images?\//i, /photo/i,
                /\.wordpress\.com.*\?/i, /blogspot/i
            ];

            return imagePatterns.some(pattern => pattern.test(str));
        }

        function parseRSSFeed(xmlText, sourceName, sourceId, feedUrl) {
            const parser = new DOMParser();
            const xml = parser.parseFromString(xmlText, 'text/xml');
            const articles = [];

            // Get the feed's base URL for relative URL resolution
            const channelLink = xml.querySelector('channel > link')?.textContent || feedUrl;

            const items = xml.querySelectorAll('item, entry');

            items.forEach(item => {
                const title = item.querySelector('title')?.textContent || '';
                const link = item.querySelector('link')?.textContent ||
                           item.querySelector('link')?.getAttribute('href') || '';
                const description = item.querySelector('description, summary')?.textContent || '';
                const pubDate = item.querySelector('pubDate, published, updated')?.textContent || '';

                // Extract image with enhanced function
                const imageUrl = extractImageFromRSSItem(item, channelLink || feedUrl);

                if (title || description) {
                    articles.push({
                        id: Math.random().toString(36),
                        title: cleanText(title),
                        link: link,
                        url: link,
                        description: cleanText(description),
                        date: pubDate ? new Date(pubDate) : new Date(),
                        source_name: sourceName,
                        rss_feed_id: sourceId,
                        image_url: imageUrl
                    });
                }
            });

            return articles;
        }
        
        // Clean text
        function cleanText(text) {
            if (!text) return '';
            return text.replace(/<[^>]*>/g, '').trim();
        }
        
        // Cache articles
        async function cacheArticles(articles) {
            for (const article of articles) {
                try {
                    await fetch(CONTENT_API, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            url: article.link || article.url,
                            title: article.title,
                            description: article.description,
                            published_at: article.date.toISOString(),
                            source_name: article.source_name,
                            rss_feed: article.rss_feed_id,
                            category: article.themes?.primary ? [article.themes.primary, ...(article.themes.secondary || [])] : [],
                            image: article.image_url || null // Save image URL to cache
                        })
                    });
                } catch (error) {
                    console.error('Cache error:', error);
                }
            }
        }
        
        // Share article
        function shareArticle(url) {
            if (navigator.share) {
                navigator.share({ url });
            } else {
                navigator.clipboard.writeText(url);
                showUpdateToast('Link copied to clipboard!');
            }
        }
        
        // Save article (placeholder)
        function saveArticle(id) {
            showUpdateToast('Article saved!');
        }
        
        // Show error
        function showError(message) {
            const grid = document.getElementById('articlesGrid');
            grid.innerHTML = `<div style="grid-column: 1/-1; text-align: center; padding: 40px; color: white;">${message}</div>`;
        }
        
        // Modal Functions
        function openArticleModal(article) {
            currentArticle = article;
            const modal = document.getElementById('articleModal');
            
            // Update modal content
            document.getElementById('modalTitle').textContent = article.title || 'Untitled';
            document.getElementById('modalAuthor').textContent = '@' + (article.source_name || 'unknown').toLowerCase().replace(/\s+/g, '');
            
            // Set theme tag
            if (article.themes?.primary) {
                const themeTag = document.getElementById('modalThemeTag');
                themeTag.textContent = THEMES[article.themes.primary].name;
                themeTag.style.color = THEMES[article.themes.primary].color;
                themeTag.style.borderColor = THEMES[article.themes.primary].color;
            }
            
            // Set image
            const modalImage = document.getElementById('modalImage');
            if (article.image_url || article.image) {
                modalImage.style.backgroundImage = `url('${article.image_url || article.image}')`;
                modalImage.style.display = 'block';
            } else {
                const themeColor = article.themes?.primary ? THEMES[article.themes.primary]?.color : '#666';
                modalImage.style.background = `linear-gradient(135deg, ${themeColor}66, ${themeColor}bb)`;
                modalImage.style.display = 'block';
            }
            
            // Set content
            const content = document.getElementById('modalContent');
            content.innerHTML = `
                <p>${escapeHtml(article.description || 'No content available.')}</p>
                <p style="margin-top: 16px; color: var(--gray); font-size: 14px;">
                    <em>This is an excerpt from the original article. Click "Full View" below to read the complete article on the source website.</em>
                </p>
            `;
            
            // Set full link
            document.getElementById('modalFullLink').href = article.link || article.url || '#';
            
            // Set stats (simulated for now)
            const articleId = article.id || article.link;
            const comments = articleComments[articleId] || [];
            document.getElementById('modalComments').textContent = comments.length;
            document.getElementById('modalLikes').textContent = Math.floor(Math.random() * 500) + 1;
            document.getElementById('modalViews').textContent = Math.floor(Math.random() * 1000) + comments.length * 10;
            
            // Load comments
            loadComments(articleId);
            
            // Show modal
            modal.classList.add('active');
            document.body.style.overflow = 'hidden';
        }
        
        function closeModal() {
            const modal = document.getElementById('articleModal');
            modal.classList.remove('active');
            document.body.style.overflow = '';
            currentArticle = null;
            document.getElementById('commentInput').value = '';
        }
        
        function loadComments(articleId) {
            const commentsList = document.getElementById('commentsList');
            const comments = articleComments[articleId] || [];
            
            if (comments.length === 0) {
                commentsList.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: var(--gray);">
                        <p>No comments yet. Be the first to share your thoughts!</p>
                    </div>
                `;
                return;
            }
            
            commentsList.innerHTML = comments.map(comment => createCommentHTML(comment)).join('');
        }
        
        function createCommentHTML(comment) {
            const timeAgo = getTimeAgo(comment.timestamp);
            const initials = comment.username.substring(0, 2).toUpperCase();
            
            return `
                <div class="comment">
                    <div class="comment-header">
                        <div class="comment-author">
                            <div class="comment-avatar">${initials}</div>
                            <span class="comment-username">@${comment.username}</span>
                        </div>
                        <span class="comment-time">${timeAgo}</span>
                    </div>
                    <div class="comment-content">${escapeHtml(comment.content)}</div>
                    <div class="comment-actions">
                        <button class="comment-action" onclick="likeComment('${comment.id}')">
                            👍 ${comment.likes || 0}
                        </button>
                        <button class="comment-action" onclick="replyToComment('${comment.id}')">
                            💬 Reply
                        </button>
                        <button class="comment-action" onclick="shareComment('${comment.id}')">
                            🔗 Share
                        </button>
                    </div>
                    ${comment.replies ? `
                        <div class="comment-replies">
                            ${comment.replies.map(reply => createCommentHTML(reply)).join('')}
                        </div>
                    ` : ''}
                </div>
            `;
        }
        
        function postComment() {
            const input = document.getElementById('commentInput');
            const content = input.value.trim();
            
            if (!content) return;
            
            const articleId = currentArticle.id || currentArticle.link;
            
            // Initialize comments array if needed
            if (!articleComments[articleId]) {
                articleComments[articleId] = [];
            }
            
            // Create new comment
            const comment = {
                id: Math.random().toString(36).substr(2, 9),
                username: generateUsername(),
                content: content,
                timestamp: new Date(),
                likes: 0,
                replies: []
            };
            
            // Add to comments
            articleComments[articleId].unshift(comment);
            
            // Clear input
            input.value = '';
            
            // Reload comments
            loadComments(articleId);
            
            // Update comment count
            document.getElementById('modalComments').textContent = articleComments[articleId].length;
            
            // Show success message
            showUpdateToast('Comment posted successfully!');
        }
        
        function clearComment() {
            document.getElementById('commentInput').value = '';
        }
        
        function likeComment(commentId) {
            // In production, this would update the database
            showUpdateToast('Comment liked!');
        }
        
        function replyToComment(commentId) {
            // In production, this would open a reply form
            showUpdateToast('Reply feature coming soon!');
        }
        
        function shareComment(commentId) {
            // In production, this would share the comment
            showUpdateToast('Link copied to clipboard!');
        }
        
        function generateUsername() {
            const adjectives = ['happy', 'clever', 'brave', 'gentle', 'wise', 'swift', 'bright', 'calm'];
            const nouns = ['citizen', 'resident', 'neighbor', 'voter', 'advocate', 'participant', 'observer'];
            const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
            const noun = nouns[Math.floor(Math.random() * nouns.length)];
            const num = Math.floor(Math.random() * 99) + 1;
            return `${adj}_${noun}${num}`;
        }
        
        function getTimeAgo(timestamp) {
            const now = new Date();
            const diff = now - timestamp;
            const minutes = Math.floor(diff / 60000);
            const hours = Math.floor(diff / 3600000);
            const days = Math.floor(diff / 86400000);
            
            if (minutes < 1) return 'just now';
            if (minutes < 60) return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
            if (hours < 24) return `${hours} hour${hours > 1 ? 's' : ''} ago`;
            return `${days} day${days > 1 ? 's' : ''} ago`;
        }
        
        // Close modal on escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && document.getElementById('articleModal').classList.contains('active')) {
                closeModal();
            }
        });
        
        // Close modal on overlay click
        document.getElementById('articleModal').addEventListener('click', (e) => {
            if (e.target === document.getElementById('articleModal')) {
                closeModal();
            }
        });
        
        // Sample comments for demonstration
        function seedSampleComments() {
            const sampleComments = [
                {
                    id: '1',
                    username: 'sarah_martinez',
                    content: 'This is exactly the kind of community-led governance we need. The land trust model has proven successful in other cities.',
                    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
                    likes: 12,
                    replies: []
                },
                {
                    id: '2',
                    username: 'district5_resident',
                    content: 'I attended the committee meeting. We need everyone to show up next Tuesday for the final vote.',
                    timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000),
                    likes: 8,
                    replies: []
                }
            ];
            
            // Add sample comments to a few articles
            setTimeout(() => {
                if (allArticles.length > 0) {
                    const firstArticleId = allArticles[0].id || allArticles[0].link;
                    articleComments[firstArticleId] = sampleComments;
                }
            }, 2000);
        }
        
        // Initialize sample comments
        seedSampleComments();
    </script>
</body>
</html>
