<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Nashville Civic News Aggregator</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f5;
            color: #333;
            padding: 20px;
            line-height: 1.6;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        h1 {
            font-size: 28px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e0e0e0;
        }
        
        .sync-status {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            padding: 10px 15px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
            font-size: 12px;
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .sync-status.syncing {
            background: #FFF3CD;
            border: 1px solid #FFC107;
        }
        
        .sync-status.success {
            background: #D4EDDA;
            border: 1px solid #28A745;
        }
        
        .sync-status.error {
            background: #F8D7DA;
            border: 1px solid #DC3545;
        }
        
        .cache-stats {
            background: #E3F2FD;
            border-left: 4px solid #2196F3;
            padding: 10px 15px;
            margin-bottom: 20px;
            font-size: 13px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .cache-stats span {
            margin-right: 15px;
        }
        
        .theme-filter-section {
            margin-bottom: 25px;
            padding: 15px;
            background: #fafafa;
            border-radius: 8px;
            border: 1px solid #e0e0e0;
            position: relative;
        }
        
        .theme-processing-indicator {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 12px;
            color: #666;
            display: none;
            align-items: center;
            gap: 5px;
        }
        
        .theme-processing-indicator.active {
            display: flex;
        }
        
        .mini-spinner {
            width: 12px;
            height: 12px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #2196F3;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        .theme-filter-label {
            font-size: 14px;
            color: #666;
            margin-bottom: 12px;
            font-weight: 500;
        }
        
        .theme-filters {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .theme-filter-btn {
            padding: 8px 16px;
            border: 2px solid;
            background: white;
            cursor: pointer;
            font-size: 14px;
            border-radius: 20px;
            transition: all 0.3s;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .theme-filter-btn .count {
            background: rgba(0,0,0,0.1);
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 12px;
        }
        
        .theme-filter-btn.active {
            color: white;
        }
        
        .theme-filter-btn.active .count {
            background: rgba(255,255,255,0.3);
        }
        
        /* Theme colors */
        .theme-governance { border-color: #4A90E2; color: #4A90E2; }
        .theme-governance.active { background: #4A90E2; }
        
        .theme-transparency { border-color: #7FBA00; color: #7FBA00; }
        .theme-transparency.active { background: #7FBA00; }
        
        .theme-inclusive { border-color: #B854D4; color: #B854D4; }
        .theme-inclusive.active { background: #B854D4; }
        
        .theme-leadership { border-color: #FF8C00; color: #FF8C00; }
        .theme-leadership.active { background: #FF8C00; }
        
        .theme-ritual { border-color: #E81E63; color: #E81E63; }
        .theme-ritual.active { background: #E81E63; }
        
        .theme-power { border-color: #009688; color: #009688; }
        .theme-power.active { background: #009688; }
        
        .theme-care { border-color: #8BC34A; color: #8BC34A; }
        .theme-care.active { background: #8BC34A; }
        
        .theme-all { border-color: #666; color: #666; }
        .theme-all.active { background: #666; }
        
        .controls {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center;
        }
        
        button {
            padding: 10px 20px;
            border: 1px solid #ddd;
            background: white;
            cursor: pointer;
            font-size: 14px;
            border-radius: 4px;
            transition: all 0.2s;
        }
        
        button:hover:not(:disabled) {
            background: #f0f0f0;
            border-color: #999;
        }
        
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .stats {
            margin-bottom: 20px;
            padding: 15px;
            background: #f9f9f9;
            border-left: 4px solid #2196F3;
            font-size: 14px;
        }
        
        .theme-analytics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 10px;
            margin-top: 10px;
            padding-top: 10px;
            border-top: 1px solid #e0e0e0;
        }
        
        .theme-stat {
            font-size: 12px;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .theme-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            display: inline-block;
        }
        
        .progress-bar {
            width: 100%;
            height: 24px;
            background: #e0e0e0;
            border-radius: 12px;
            overflow: hidden;
            margin-bottom: 20px;
            position: relative;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #8BC34A);
            transition: width 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 12px;
            font-weight: 500;
        }
        
        .loading-indicator {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #2196F3;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .feed-sources {
            margin-bottom: 20px;
            padding: 10px;
            background: #fafafa;
            border-radius: 4px;
            font-size: 12px;
            max-height: 150px;
            overflow-y: auto;
        }
        
        .source-badge {
            display: inline-block;
            padding: 2px 8px;
            margin: 2px;
            background: #e0e0e0;
            border-radius: 12px;
            font-size: 11px;
            transition: all 0.2s;
        }
        
        .source-badge.loading {
            background: #FFC107;
            color: white;
            animation: pulse 1s infinite;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }
        
        .source-badge.active {
            background: #4CAF50;
            color: white;
        }
        
        .source-badge.error {
            background: #f44336;
            color: white;
        }
        
        .article {
            padding: 20px 0;
            border-bottom: 1px solid #e0e0e0;
            animation: slideIn 0.3s ease;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        .article:last-child {
            border-bottom: none;
        }
        
        .article-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            gap: 15px;
            margin-bottom: 8px;
        }
        
        .article-title {
            font-size: 20px;
            line-height: 1.3;
            flex: 1;
        }
        
        .article-title a {
            color: #1976D2;
            text-decoration: none;
        }
        
        .article-title a:hover {
            text-decoration: underline;
        }
        
        .article-themes {
            display: flex;
            gap: 6px;
            flex-wrap: wrap;
        }
        
        .theme-badge {
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 11px;
            font-weight: 500;
            color: white;
            white-space: nowrap;
        }
        
        .theme-badge.primary {
            opacity: 1;
        }
        
        .theme-badge.secondary {
            opacity: 0.7;
        }
        
        .article-meta {
            font-size: 13px;
            color: #666;
            margin-bottom: 10px;
        }
        
        .article-source {
            color: #f57c00;
            font-weight: 500;
        }
        
        .article-description {
            font-size: 15px;
            color: #555;
            line-height: 1.5;
        }
        
        .article-cached {
            display: inline-block;
            margin-left: 10px;
            padding: 2px 6px;
            background: #E3F2FD;
            color: #1976D2;
            border-radius: 4px;
            font-size: 11px;
        }
        
        .error {
            padding: 15px;
            background: #ffebee;
            border-left: 4px solid #f44336;
            color: #c62828;
            margin: 20px 0;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin: 30px 0;
            padding: 20px 0;
            border-top: 1px solid #e0e0e0;
        }
        
        .pagination button {
            min-width: 40px;
            padding: 8px 12px;
        }
        
        .pagination .page-info {
            margin: 0 20px;
            font-size: 14px;
            color: #666;
        }
        
        .pagination .page-size-selector {
            margin-left: 20px;
        }
        
        .pagination select {
            padding: 6px 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .debug-panel {
            display: none;
            margin: 20px 0;
            padding: 15px;
            background: #263238;
            color: #aed581;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            border-radius: 4px;
            max-height: 400px;
            overflow-y: auto;
            white-space: pre-wrap;
        }
        
        .debug-panel.active {
            display: block;
        }
        
        .filter-section {
            margin-bottom: 20px;
            padding: 15px;
            background: #f5f5f5;
            border-radius: 4px;
        }
        
        .filter-label {
            font-size: 14px;
            margin-bottom: 8px;
            font-weight: 500;
        }
        
        .filter-input {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
        
        .load-settings {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .load-settings label {
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        .load-settings input[type="number"] {
            width: 60px;
            padding: 4px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .load-settings select {
            padding: 4px 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Nashville Civic News Aggregator</h1>
        
        <div class="sync-status" id="syncStatus">
            <span>Ready</span>
        </div>
        
        <div class="cache-stats" id="cacheStats">
            <div>
                <span>🗄️ Cached: <strong id="cachedCount">0</strong></span>
                <span>🆕 New: <strong id="newCount">0</strong></span>
                <span>📡 From RSS: <strong id="rssCount">0</strong></span>
                <span>🚫 Filtered: <strong id="filteredCount">0</strong></span>
            </div>
            <div>
                <span>Last sync: <strong id="lastSync">Never</strong></span>
            </div>
        </div>
        
        <div class="theme-filter-section">
            <div class="theme-filter-label">Filter by civic theme:</div>
            <div class="theme-processing-indicator" id="themeProcessing">
                <div class="mini-spinner"></div>
                <span>Analyzing themes...</span>
            </div>
            <div class="theme-filters" id="themeFilters">
                <button class="theme-filter-btn theme-all active" onclick="filterByTheme('all')">
                    All Themes <span class="count">0</span>
                </button>
                <button class="theme-filter-btn theme-governance" onclick="filterByTheme('governance')">
                    Collaborative Governance <span class="count">0</span>
                </button>
                <button class="theme-filter-btn theme-transparency" onclick="filterByTheme('transparency')">
                    Civic Transparency <span class="count">0</span>
                </button>
                <button class="theme-filter-btn theme-inclusive" onclick="filterByTheme('inclusive')">
                    Inclusive Solutions <span class="count">0</span>
                </button>
                <button class="theme-filter-btn theme-leadership" onclick="filterByTheme('leadership')">
                    Contextual Leadership <span class="count">0</span>
                </button>
                <button class="theme-filter-btn theme-ritual" onclick="filterByTheme('ritual')">
                    Culture <span class="count">0</span>
                </button>
                <button class="theme-filter-btn theme-power" onclick="filterByTheme('power')">
                    Power & Resources <span class="count">0</span>
                </button>
                <button class="theme-filter-btn theme-care" onclick="filterByTheme('care')">
                    Systemic Care <span class="count">0</span>
                </button>
            </div>
        </div>
        
        <div class="controls">
            <button onclick="syncWithCache()" id="syncBtn">🔄 Sync & Load</button>
            <button onclick="forceRefresh()" id="refreshBtn">🔃 Force Refresh</button>
            <button onclick="clearArticles()">Clear Articles</button>
            <button onclick="toggleDebug()">Toggle Debug</button>
            
            <div class="load-settings">
                <label>
                    Time window:
                    <select id="timeWindow">
                        <option value="24">24 hours</option>
                        <option value="48" selected>48 hours</option>
                        <option value="72">3 days</option>
                        <option value="168">1 week</option>
                    </select>
                </label>
            </div>
        </div>
        
        <div class="filter-section">
            <div class="filter-label">Search articles:</div>
            <input type="text" class="filter-input" id="searchInput" placeholder="Filter by title, source, or content..." onkeyup="filterArticles()">
            <details style="margin-top: 10px;">
                <summary style="cursor: pointer; font-size: 13px; color: #666;">Advanced Cache Search</summary>
                <div style="margin-top: 10px; padding: 10px; background: #f9f9f9; border-radius: 4px;">
                    <div style="margin-bottom: 8px;">
                        <label style="font-size: 12px; display: block; margin-bottom: 4px;">Keywords (comma-separated):</label>
                        <input type="text" id="advKeywords" placeholder="e.g., budget, council, park" style="width: 100%; padding: 6px; border: 1px solid #ddd; border-radius: 4px; font-size: 13px;">
                    </div>
                    <div style="margin-bottom: 8px;">
                        <label style="font-size: 12px; display: block; margin-bottom: 4px;">Source Publication:</label>
                        <input type="text" id="advPublication" placeholder="e.g., Nashville Scene" style="width: 100%; padding: 6px; border: 1px solid #ddd; border-radius: 4px; font-size: 13px;">
                    </div>
                    <div style="margin-bottom: 8px;">
                        <label style="font-size: 12px; display: block; margin-bottom: 4px;">Search Term (in description):</label>
                        <input type="text" id="advSearchTerm" placeholder="e.g., downtown development" style="width: 100%; padding: 6px; border: 1px solid #ddd; border-radius: 4px; font-size: 13px;">
                    </div>
                    <button onclick="advancedCacheSearch()" style="padding: 8px 16px; background: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 13px;">Search Cache</button>
                </div>
            </details>
        </div>
        
        <div class="progress-bar" id="progressBar" style="display: none;">
            <div class="progress-fill" id="progressFill" style="width: 0%">0%</div>
        </div>
        
        <div class="debug-panel" id="debugPanel"></div>
        
        <div class="stats" id="stats">
            Ready to sync. Click "Sync & Load" to begin.
            <div class="theme-analytics" id="themeAnalytics"></div>
        </div>
        
        <div class="feed-sources" id="feedSources">
            <strong>Feed Sources:</strong> Not loaded yet
        </div>
        
        <div class="pagination" id="topPagination" style="display: none;">
            <button onclick="goToPage(1)">First</button>
            <button onclick="previousPage()">Previous</button>
            <span class="page-info">Page <span id="currentPageTop">1</span> of <span id="totalPagesTop">1</span></span>
            <button onclick="nextPage()">Next</button>
            <button onclick="goToPage(totalPages)">Last</button>
            <div class="page-size-selector">
                Show:
                <select id="pageSizeTop" onchange="changePageSize(this.value)">
                    <option value="10">10</option>
                    <option value="25" selected>25</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </div>
        </div>
        
        <div id="articlesContainer">
            <div class="loading-indicator">
                <div>Click "Sync & Load" to fetch articles</div>
            </div>
        </div>
        
        <div class="pagination" id="bottomPagination" style="display: none;">
            <button onclick="goToPage(1)">First</button>
            <button onclick="previousPage()">Previous</button>
            <span class="page-info">Page <span id="currentPageBottom">1</span> of <span id="totalPagesBottom">1</span></span>
            <button onclick="nextPage()">Next</button>
            <button onclick="goToPage(totalPages)">Last</button>
            <div class="page-size-selector">
                Show:
                <select id="pageSizeBottom" onchange="changePageSize(this.value)">
                    <option value="10">10</option>
                    <option value="25" selected>25</option>
                    <option value="50">50</option>
                    <option value="100">100</option>
                </select>
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const XANO_API = 'https://xvkq-pq7i-idtl.n7d.xano.io/api:Hj4C6PGO';
        const SOURCES_API = `${XANO_API}/rss_feed`;
        const CONTENT_API = `${XANO_API}/content`;
        const CORS_PROXY = 'https://api.allorigins.win/raw?url=';
        
        // Cache configuration
        const CACHE_CONFIG = {
            defaultTimeWindow: 48 * 60 * 60 * 1000,  // 48 hours
            batchSize: 20,                            // Articles to POST at once
            localCacheKey: 'nashville_civic_cache'
        };
        
        // Theme definitions with keywords and weights
        const THEMES = {
            governance: {
                name: 'Collaborative Governance',
                color: '#4A90E2',
                primary: ['governance', 'democracy', 'participation', 'collaboration', 'civic', 'council', 'commission', 'board', 'committee', 'referendum', 'vote', 'voting', 'election'],
                secondary: ['public', 'community', 'citizen', 'resident', 'constituent', 'municipal', 'city', 'county', 'government', 'policy', 'ordinance', 'resolution'],
                phrases: ['public comment', 'town hall', 'community meeting', 'civic engagement', 'public input', 'citizen advisory', 'participatory budgeting'],
                negative: ['sports', 'entertainment', 'game']
            },
            transparency: {
                name: 'Civic Transparency',
                color: '#7FBA00',
                primary: ['transparency', 'accountability', 'disclosure', 'audit', 'investigation', 'report', 'data', 'budget', 'finance', 'spending', 'contract', 'ethics'],
                secondary: ['open', 'public', 'record', 'document', 'information', 'review', 'oversight', 'inspection', 'compliance', 'violation'],
                phrases: ['public records', 'open data', 'financial disclosure', 'freedom of information', 'sunshine law', 'open meeting'],
                negative: ['sports', 'weather']
            },
            inclusive: {
                name: 'Inclusive Solutions',
                color: '#B854D4',
                primary: ['inclusive', 'inclusion', 'diversity', 'equity', 'justice', 'equality', 'discrimination', 'bias', 'barrier', 'access', 'disability', 'immigrant'],
                secondary: ['community', 'minority', 'underserved', 'marginalized', 'vulnerable', 'disparity', 'gap', 'representation', 'voice', 'participation'],
                phrases: ['social justice', 'equal opportunity', 'civil rights', 'fair housing', 'language access', 'cultural competency'],
                negative: ['exclusive event', 'luxury', 'premium']
            },
            leadership: {
                name: 'Contextual Leadership',
                color: '#FF8C00',
                primary: ['leadership', 'leader', 'director', 'chief', 'mayor', 'commissioner', 'administrator', 'manager', 'executive', 'superintendent'],
                secondary: ['appoint', 'hire', 'resign', 'retire', 'candidate', 'nomination', 'selection', 'governance', 'administration', 'management'],
                phrases: ['new leadership', 'leadership change', 'executive search', 'leadership development', 'succession planning'],
                negative: ['sports coach', 'team captain']
            },
            ritual: {
                name: 'Culture',
                color: '#E81E63',
                primary: ['tradition', 'heritage', 'culture', 'festival', 'celebration', 'ceremony', 'memorial', 'commemoration', 'anniversary', 'historic', 'landmark'],
                secondary: ['community', 'gathering', 'event', 'parade', 'fair', 'market', 'arts', 'music', 'theater', 'museum', 'library'],
                phrases: ['cultural event', 'community celebration', 'historic preservation', 'cultural heritage', 'public art', 'community tradition'],
                negative: ['commercial', 'sale', 'discount']
            },
            power: {
                name: 'Power & Resources',
                color: '#009688',
                primary: ['power', 'resource', 'funding', 'grant', 'budget', 'allocation', 'investment', 'development', 'infrastructure', 'utility', 'service'],
                secondary: ['economic', 'financial', 'revenue', 'tax', 'fee', 'cost', 'expense', 'project', 'contract', 'procurement', 'bid'],
                phrases: ['resource allocation', 'budget priority', 'economic development', 'public investment', 'capital improvement', 'tax revenue'],
                negative: ['personal finance', 'stock market']
            },
            care: {
                name: 'Systemic Care',
                color: '#8BC34A',
                primary: ['environment', 'climate', 'sustainability', 'green', 'clean', 'pollution', 'health', 'safety', 'welfare', 'housing', 'homeless', 'food'],
                secondary: ['park', 'tree', 'water', 'air', 'waste', 'recycle', 'energy', 'solar', 'renewable', 'conservation', 'protection', 'preserve'],
                phrases: ['climate action', 'environmental justice', 'public health', 'affordable housing', 'food security', 'community wellness'],
                negative: ['real estate', 'luxury', 'profit']
            }
        };
        
        // State
        let allArticles = [];
        let filteredArticles = [];
        let feedSources = [];
        let debugMode = false;
        let isLoading = false;
        let activeThemeFilter = 'all';
        let themeCounts = {};
        let cachedUrls = new Set();
        let lastSyncTime = null;
        
        // Cache statistics
        let cacheStats = {
            fromCache: 0,
            fromRSS: 0,
            new: 0,
            filtered: 0
        };
        
        // Pagination state
        let currentPage = 1;
        let pageSize = 25;
        let totalPages = 1;
        
        // Calculate theme relevance for an article - MORE LENIENT
        function calculateThemeRelevance(article) {
            const text = `${article.title} ${article.description}`.toLowerCase();
            const titleText = article.title.toLowerCase();
            const scores = {};
            
            for (const [themeKey, theme] of Object.entries(THEMES)) {
                let score = 0;
                
                // Check primary keywords (3x weight in title, 1x in description)
                theme.primary.forEach(keyword => {
                    const keywordLower = keyword.toLowerCase();
                    if (titleText.includes(keywordLower)) score += 3;
                    if (text.includes(keywordLower)) score += 1;
                });
                
                // Check secondary keywords (1.5x weight in title, 0.5x in description)
                theme.secondary.forEach(keyword => {
                    const keywordLower = keyword.toLowerCase();
                    if (titleText.includes(keywordLower)) score += 1.5;
                    if (text.includes(keywordLower)) score += 0.5;
                });
                
                // Check phrases (2x weight)
                theme.phrases.forEach(phrase => {
                    const phraseLower = phrase.toLowerCase();
                    if (text.includes(phraseLower)) score += 2;
                });
                
                // Apply negative keywords (reduce score)
                if (theme.negative) {
                    theme.negative.forEach(keyword => {
                        const keywordLower = keyword.toLowerCase();
                        if (text.includes(keywordLower)) score -= 2;
                    });
                }
                
                // Source-based hints
                if (article.source_name) {
                    const sourceLower = article.source_name.toLowerCase();
                    if (themeKey === 'care' && sourceLower.includes('environment')) score += 2;
                    if (themeKey === 'governance' && (sourceLower.includes('council') || sourceLower.includes('government'))) score += 2;
                    if (themeKey === 'transparency' && sourceLower.includes('news')) score += 0.5;
                }
                
                // Check RSS categories if available
                if (article.rss_categories && article.rss_categories.length > 0) {
                    article.rss_categories.forEach(cat => {
                        const catLower = cat.toLowerCase();
                        if (themeKey === 'governance' && (catLower.includes('politic') || catLower.includes('government'))) score += 1;
                        if (themeKey === 'care' && (catLower.includes('environment') || catLower.includes('health'))) score += 1;
                        if (themeKey === 'power' && (catLower.includes('business') || catLower.includes('econom'))) score += 1;
                        if (themeKey === 'ritual' && (catLower.includes('culture') || catLower.includes('arts'))) score += 1;
                    });
                }
                
                scores[themeKey] = Math.max(0, score);
            }
            
            // Determine primary and secondary themes - require minimum score
            const sortedThemes = Object.entries(scores)
                .filter(([_, score]) => score > 1) // Raised threshold slightly
                .sort((a, b) => b[1] - a[1]);
            
            // Only assign themes if we have a meaningful match
            const themes = {
                primary: sortedThemes[0] ? sortedThemes[0][0] : null,
                secondary: sortedThemes.slice(1, 3).map(([key]) => key),
                scores: scores
            };
            
            return themes;
        }
        
        // Load from Xano cache with intelligent filtering
        async function loadFromCache(searchParams = {}) {
            const timeWindow = parseInt(document.getElementById('timeWindow').value) || 48;
            const cutoffDate = new Date(Date.now() - (timeWindow * 60 * 60 * 1000));
            
            // Build params using new Xano query structure
            const params = new URLSearchParams({
                published_after: cutoffDate.toISOString()
            });
            
            // Add optional search parameters
            if (searchParams.themes) {
                params.append('themes', searchParams.themes);
            }
            if (searchParams.keywords) {
                params.append('keywords', searchParams.keywords);
            }
            if (searchParams.publication) {
                params.append('publication', searchParams.publication);
            }
            if (searchParams.search_term) {
                params.append('search_term', searchParams.search_term);
            }
            
            try {
                updateSyncStatus('syncing', 'Loading from cache...');
                const response = await fetch(`${CONTENT_API}?${params}`);
                
                if (!response.ok) throw new Error('Failed to load cache');
                
                const cachedArticles = await response.json();
                
                // Process cached articles
                cachedArticles.forEach(article => {
                    cachedUrls.add(article.url);
                    
                    // Convert Xano format to our format
                    article.fromCache = true;
                    article.link = article.url; // Ensure link is set
                    
                    if (article.published_at) {
                        article.date = new Date(article.published_at);
                    }
                    
                    // Keep image_url if present
                    if (!article.image_url) {
                        article.image_url = '';
                    }
                    
                    // Restore category array as themes
                    if (article.category && article.category.length > 0) {
                        article.themes = {
                            primary: article.category[0],
                            secondary: article.category.slice(1, 3),
                            scores: {}
                        };
                    } else {
                        // If no category in cache, calculate themes
                        article.themes = calculateThemeRelevance(article);
                    }
                });
                
                // Filter out articles without themes
                const themedArticles = cachedArticles.filter(article => 
                    article.themes && article.themes.primary
                );
                
                cacheStats.fromCache = themedArticles.length;
                return themedArticles;
                
            } catch (error) {
                console.error('Cache load error:', error);
                updateSyncStatus('error', 'Cache load failed');
                return [];
            }
        }
        
        // Check if URL exists in cache
        async function checkUrlInCache(url) {
            // First check local set
            if (cachedUrls.has(url)) return true;
            
            // Then check Xano - 404 means not cached, which is expected
            try {
                const response = await fetch(`${CONTENT_API}/${encodeURIComponent(url)}`);
                if (response.ok) {
                    cachedUrls.add(url); // Add to local cache
                    return true;
                }
                // 404 means not in cache, which is what we want to know
                return false;
            } catch (error) {
                // Network error - assume not cached
                return false;
            }
        }
        
        // Post new articles to Xano (only articles WITH themes)
        async function postToCache(articles) {
            if (articles.length === 0) return;
            
            // Filter to only post articles with themes
            const themedArticles = articles.filter(a => a.themes && a.themes.primary);
            
            if (themedArticles.length === 0) {
                console.log('No themed articles to post to cache');
                return;
            }
            
            console.log(`Posting ${themedArticles.length} themed articles to Xano...`);
            
            const batches = [];
            for (let i = 0; i < themedArticles.length; i += CACHE_CONFIG.batchSize) {
                batches.push(themedArticles.slice(i, i + CACHE_CONFIG.batchSize));
            }
            
            let successCount = 0;
            let errorCount = 0;
            
            for (const batch of batches) {
                for (const article of batch) {
                    try {
                        // Prepare article for Xano with all fields
                        const xanoArticle = {
                            url: article.link || article.url || '',
                            title: article.title || 'Untitled',
                            description: article.description || '',
                            published_at: article.date ? article.date.toISOString() : new Date().toISOString(),
                            source_name: article.source_name || article.source || 'Unknown',
                            author: article.author || '',
                            image_url: article.image_url || '',
                            category: [],
                            keywords: []
                        };
                        
                        // Add themes as categories (only if they exist)
                        if (article.themes && article.themes.primary) {
                            xanoArticle.category.push(article.themes.primary);
                            
                            if (article.themes.secondary && article.themes.secondary.length > 0) {
                                xanoArticle.category = xanoArticle.category.concat(article.themes.secondary);
                            }
                        }
                        
                        // Extract better keywords from title and description
                        const combinedText = `${article.title} ${article.description}`.toLowerCase();
                        const stopWords = new Set(['the', 'is', 'at', 'which', 'on', 'and', 'a', 'an', 'as', 'are', 'was', 'been', 'be', 'have', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should', 'may', 'might', 'must', 'can', 'shall', 'to', 'of', 'in', 'for', 'with', 'by', 'from', 'up', 'about', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'between', 'under', 'again', 'further', 'then', 'once']);
                        
                        const words = combinedText
                            .replace(/[^\w\s]/g, ' ') // Remove punctuation
                            .split(/\s+/)
                            .filter(word => word.length > 4 && !stopWords.has(word))
                            .slice(0, 15);
                        
                        xanoArticle.keywords = [...new Set(words)];
                        
                        const response = await fetch(CONTENT_API, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(xanoArticle)
                        });
                        
                        if (response.ok) {
                            cachedUrls.add(xanoArticle.url);
                            cacheStats.new++;
                            successCount++;
                        } else {
                            const errorText = await response.text();
                            console.error(`Failed to post article: ${response.status}`, errorText);
                            console.error('Article data:', xanoArticle);
                            errorCount++;
                        }
                        
                    } catch (error) {
                        console.error('Failed to cache article:', error);
                        errorCount++;
                    }
                }
                
                // Small delay between batches
                await new Promise(resolve => setTimeout(resolve, 100));
            }
            
            console.log(`Posted ${successCount} articles successfully, ${errorCount} errors`);
        }
        
        // Load RSS sources
        async function loadSources() {
            try {
                const response = await fetch(SOURCES_API);
                if (!response.ok) throw new Error('Failed to load sources');
                
                const data = await response.json();
                feedSources = data;
                updateSourcesDisplay();
                return data;
            } catch (error) {
                console.error('Error loading sources:', error);
                showError('Failed to load feed sources');
                return [];
            }
        }
        
        // Parse RSS feed with enhanced data extraction
        function parseRSSFeed(xmlText, sourceName) {
            const parser = new DOMParser();
            const xml = parser.parseFromString(xmlText, 'text/xml');
            const articles = [];
            
            if (xml.querySelector('parsererror')) {
                console.error('XML parse error for', sourceName);
                return articles;
            }
            
            let items = xml.querySelectorAll('item');
            if (items.length === 0) {
                items = xml.querySelectorAll('entry');
            }
            
            items.forEach(item => {
                // Extract all possible fields
                const title = item.querySelector('title')?.textContent || '';
                const link = item.querySelector('link')?.textContent || 
                           item.querySelector('link')?.getAttribute('href') || '';
                const description = item.querySelector('description')?.textContent || 
                                  item.querySelector('summary')?.textContent || 
                                  item.querySelector('content\\:encoded')?.textContent || '';
                const pubDate = item.querySelector('pubDate')?.textContent || 
                              item.querySelector('published')?.textContent || 
                              item.querySelector('updated')?.textContent || '';
                const author = item.querySelector('author')?.textContent || 
                             item.querySelector('dc\\:creator')?.textContent || 
                             item.querySelector('creator')?.textContent || '';
                
                // Extract image URL from various possible locations
                let imageUrl = '';
                
                // Check for media:content
                const mediaContent = item.querySelector('media\\:content, content');
                if (mediaContent && mediaContent.getAttribute('url')) {
                    imageUrl = mediaContent.getAttribute('url');
                }
                
                // Check for enclosure
                if (!imageUrl) {
                    const enclosure = item.querySelector('enclosure');
                    if (enclosure && enclosure.getAttribute('type')?.startsWith('image')) {
                        imageUrl = enclosure.getAttribute('url');
                    }
                }
                
                // Check for media:thumbnail
                if (!imageUrl) {
                    const thumbnail = item.querySelector('media\\:thumbnail, thumbnail');
                    if (thumbnail) {
                        imageUrl = thumbnail.getAttribute('url');
                    }
                }
                
                // Extract from description HTML if no dedicated image field
                if (!imageUrl && description) {
                    const imgMatch = description.match(/<img[^>]+src=["']([^"']+)["']/i);
                    if (imgMatch) {
                        imageUrl = imgMatch[1];
                    }
                }
                
                // Extract categories/tags
                const categories = [];
                item.querySelectorAll('category').forEach(cat => {
                    const catText = cat.textContent?.trim();
                    if (catText) categories.push(catText);
                });
                
                if (title || description) {
                    const article = {
                        title: cleanText(title || 'Untitled'),
                        link: link || '#',
                        url: link || '#',
                        description: cleanHTML(description || ''),
                        date: parseDate(pubDate),
                        published_at: parseDate(pubDate),
                        author: cleanText(author),
                        source: sourceName,
                        source_name: sourceName,
                        image_url: imageUrl,
                        rss_categories: categories,
                        themes: null
                    };
                    
                    articles.push(article);
                }
            });
            
            return articles;
        }
        
        // Fetch RSS feed
        async function fetchFeed(source) {
            const url = source.url || source.link;
            const name = source.name || source.title || 'Unknown';
            
            if (!url) return [];
            
            try {
                const proxyUrl = CORS_PROXY + encodeURIComponent(url);
                const response = await fetch(proxyUrl);
                
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                
                const text = await response.text();
                const articles = parseRSSFeed(text, name);
                
                return articles;
            } catch (error) {
                console.error(`Error fetching ${name}:`, error);
                return [];
            }
        }
        
        // Main sync function
        async function syncWithCache() {
            if (isLoading) return;
            
            isLoading = true;
            const syncBtn = document.getElementById('syncBtn');
            const progressBar = document.getElementById('progressBar');
            const container = document.getElementById('articlesContainer');
            
            syncBtn.disabled = true;
            progressBar.style.display = 'block';
            
            // Reset stats
            cacheStats = { fromCache: 0, fromRSS: 0, new: 0, filtered: 0 };
            allArticles = [];
            
            updateProgress(10, 'Loading cached articles...');
            
            // Step 1: Load from cache
            const cachedArticles = await loadFromCache();
            allArticles = allArticles.concat(cachedArticles);
            
            updateProgress(30, 'Loading RSS sources...');
            
            // Step 2: Load RSS sources
            const sources = await loadSources();
            
            if (sources.length === 0) {
                isLoading = false;
                syncBtn.disabled = false;
                progressBar.style.display = 'none';
                container.innerHTML = '<div class="error">No feed sources found</div>';
                return;
            }
            
            // Step 3: Fetch RSS feeds and check against cache
            let newArticles = [];
            let processed = 0;
            let allNewArticles = []; // Collect all for final sort
            let unfilteredCount = 0;
            
            for (const source of sources) {
                if (!isLoading) break;
                
                processed++;
                const progress = 30 + (processed / sources.length) * 60; // Adjusted progress
                updateProgress(progress, `Fetching ${source.name || 'Unknown'}...`);
                updateSourceStatus(source.name || source.title, 'loading');
                
                const articles = await fetchFeed(source);
                let sourceNewArticles = [];
                
                for (const article of articles) {
                    // Skip checking individual URLs during initial load if cache is empty
                    const shouldCheckCache = cachedUrls.size > 0 || cacheStats.fromCache > 0;
                    const inCache = shouldCheckCache ? await checkUrlInCache(article.url) : false;
                    
                    if (!inCache) {
                        unfilteredCount++;
                        // Calculate themes for new article
                        article.themes = calculateThemeRelevance(article);
                        
                        // Only keep articles WITH themes
                        if (article.themes && article.themes.primary) {
                            article.fromCache = false;
                            sourceNewArticles.push(article);
                            cacheStats.fromRSS++;
                        } else {
                            cacheStats.filtered++;
                        }
                    }
                }
                
                // Post this source's new articles immediately
                if (sourceNewArticles.length > 0) {
                    allNewArticles = allNewArticles.concat(sourceNewArticles);
                    
                    // Add to display immediately
                    allArticles = allArticles.concat(sourceNewArticles);
                    allArticles.sort((a, b) => {
                        if (!a.date) return 1;
                        if (!b.date) return -1;
                        return b.date - a.date;
                    });
                    
                    // Update display in real-time
                    updateThemeCounts();
                    filterArticles();
                    updateCacheStats();
                    
                    // Post to Xano in background (don't await)
                    postToCache(sourceNewArticles).then(() => {
                        updateCacheStats();
                    });
                }
                
                updateSourceStatus(source.name || source.title, articles.length > 0 ? 'active' : 'error');
            }
            
            updateProgress(95, 'Finalizing...');
            
            updateProgress(100, 'Sync complete!');
            
            // Final update
            updateThemeCounts();
            filterArticles();
            updateCacheStats();
            lastSyncTime = new Date();
            updateLastSyncTime();
            
            setTimeout(() => {
                progressBar.style.display = 'none';
                updateSyncStatus('success', 'Sync complete');
            }, 1000);
            
            isLoading = false;
            syncBtn.disabled = false;
            
            if (debugMode) {
                updateDebug();
            }
        }
        
        // Force refresh (bypass cache and re-analyze)
        async function forceRefresh() {
            if (confirm('This will clear the local cache and re-analyze all articles. Continue?')) {
                cachedUrls.clear();
                localStorage.removeItem(CACHE_CONFIG.localCacheKey + '_urls');
                cacheStats = { fromCache: 0, fromRSS: 0, new: 0, filtered: 0 };
                await syncWithCache();
            }
        }
        
        // Update sync status
        function updateSyncStatus(status, message) {
            const statusEl = document.getElementById('syncStatus');
            statusEl.className = `sync-status ${status}`;
            statusEl.innerHTML = `<span>${message}</span>`;
            
            if (status === 'success' || status === 'error') {
                setTimeout(() => {
                    statusEl.className = 'sync-status';
                    statusEl.innerHTML = '<span>Ready</span>';
                }, 3000);
            }
        }
        
        // Update cache statistics display
        function updateCacheStats() {
            document.getElementById('cachedCount').textContent = cacheStats.fromCache;
            document.getElementById('newCount').textContent = cacheStats.new;
            document.getElementById('rssCount').textContent = cacheStats.fromRSS;
            document.getElementById('filteredCount').textContent = cacheStats.filtered;
        }
        
        // Update last sync time
        function updateLastSyncTime() {
            const el = document.getElementById('lastSync');
            if (lastSyncTime) {
                el.textContent = lastSyncTime.toLocaleTimeString();
            } else {
                el.textContent = 'Never';
            }
        }
        
        // Clean text content
        function cleanText(text) {
            if (!text) return '';
            return text.replace(/<[^>]*>/g, '').trim();
        }
        
        // Clean HTML content
        function cleanHTML(html) {
            if (!html) return '';
            html = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
            html = html.replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, '');
            html = html.replace(/<[^>]*>/g, ' ');
            html = html.replace(/\s+/g, ' ').trim();
            return html;
        }
        
        // Parse date strings
        function parseDate(dateStr) {
            if (!dateStr) return null;
            const date = new Date(dateStr);
            return isNaN(date.getTime()) ? null : date;
        }
        
        // Filter by theme
        function filterByTheme(theme) {
            activeThemeFilter = theme;
            
            // Update button states
            document.querySelectorAll('.theme-filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            const activeBtn = document.querySelector(`.theme-filter-btn.theme-${theme}`);
            if (activeBtn) activeBtn.classList.add('active');
            
            // Apply filter
            if (theme === 'all') {
                filteredArticles = [];
                currentPage = 1;
                displayArticles(allArticles);
            } else {
                filteredArticles = allArticles.filter(article => {
                    return article.themes && 
                           (article.themes.primary === theme || 
                            (article.themes.secondary && article.themes.secondary.includes(theme)));
                });
                currentPage = 1;
                displayArticles(filteredArticles);
            }
            
            updateStats();
        }
        
        // Update theme counts
        function updateThemeCounts() {
            themeCounts = {
                all: allArticles.length,
                governance: 0,
                transparency: 0,
                inclusive: 0,
                leadership: 0,
                ritual: 0,
                power: 0,
                care: 0
            };
            
            allArticles.forEach(article => {
                if (article.themes) {
                    if (article.themes.primary) {
                        themeCounts[article.themes.primary]++;
                    }
                    if (article.themes.secondary) {
                        article.themes.secondary.forEach(theme => {
                            themeCounts[theme]++;
                        });
                    }
                }
            });
            
            // Update UI counts
            Object.entries(themeCounts).forEach(([theme, count]) => {
                const btn = document.querySelector(`.theme-filter-btn.theme-${theme} .count`);
                if (btn) btn.textContent = count;
            });
            
            // Update analytics
            updateThemeAnalytics();
        }
        
        // Update theme analytics
        function updateThemeAnalytics() {
            const container = document.getElementById('themeAnalytics');
            let html = '';
            
            Object.entries(THEMES).forEach(([key, theme]) => {
                const count = themeCounts[key] || 0;
                const percentage = allArticles.length > 0 ? 
                    Math.round((count / allArticles.length) * 100) : 0;
                
                html += `
                    <div class="theme-stat">
                        <span class="theme-dot" style="background: ${theme.color}"></span>
                        ${theme.name}: ${count} (${percentage}%)
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }
        
        // Clear articles
        function clearArticles() {
            allArticles = [];
            filteredArticles = [];
            currentPage = 1;
            activeThemeFilter = 'all';
            cacheStats = { fromCache: 0, fromRSS: 0, new: 0, filtered: 0 };
            
            displayArticles([]);
            updateThemeCounts();
            updateCacheStats();
            updateStats('Articles cleared. Cache preserved.');
            
            feedSources.forEach(source => {
                updateSourceStatus(source.name || source.title, '');
            });
            
            document.querySelectorAll('.theme-filter-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.querySelector('.theme-filter-btn.theme-all').classList.add('active');
        }
        
        // Update progress bar
        function updateProgress(percent, text) {
            const fill = document.getElementById('progressFill');
            fill.style.width = percent + '%';
            fill.textContent = text || percent + '%';
        }
        
        // Display articles with pagination
        function displayArticles(articles) {
            const container = document.getElementById('articlesContainer');
            
            if (!articles || articles.length === 0) {
                container.innerHTML = '<div class="error">No articles found</div>';
                document.getElementById('topPagination').style.display = 'none';
                document.getElementById('bottomPagination').style.display = 'none';
                return;
            }
            
            totalPages = Math.ceil(articles.length / pageSize);
            currentPage = Math.min(currentPage, totalPages);
            
            const startIndex = (currentPage - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, articles.length);
            const pageArticles = articles.slice(startIndex, endIndex);
            
            updatePaginationControls();
            
            let html = '';
            pageArticles.forEach(article => {
                html += '<div class="article">';
                
                // Show image if available
                if (article.image_url) {
                    html += '<div style="float: right; margin: 0 0 10px 15px; max-width: 200px;">';
                    html += `<img src="${escapeHtml(article.image_url)}" alt="${escapeHtml(article.title)}" style="width: 100%; height: auto; border-radius: 4px;">`;
                    html += '</div>';
                }
                
                // Header with title and theme badges
                html += '<div class="article-header">';
                html += '<div class="article-title">';
                html += `<a href="${escapeHtml(article.link || article.url)}" target="_blank" rel="noopener">`;
                html += escapeHtml(article.title);
                html += '</a>';
                
                // Show if from cache
                if (article.fromCache) {
                    html += '<span class="article-cached">cached</span>';
                }
                
                html += '</div>';
                
                // Theme badges
                if (article.themes && article.themes.primary) {
                    html += '<div class="article-themes">';
                    
                    if (article.themes.primary) {
                        const theme = THEMES[article.themes.primary];
                        if (theme) {
                            html += `<span class="theme-badge primary" style="background: ${theme.color}">${theme.name}</span>`;
                        }
                    }
                    
                    if (article.themes.secondary) {
                        article.themes.secondary.forEach(themeKey => {
                            const theme = THEMES[themeKey];
                            if (theme) {
                                html += `<span class="theme-badge secondary" style="background: ${theme.color}">${theme.name}</span>`;
                            }
                        });
                    }
                    
                    html += '</div>';
                }
                
                html += '</div>';
                
                // Meta information
                html += '<div class="article-meta">';
                html += `<span class="article-source">${escapeHtml(article.source_name || article.source)}</span>`;
                if (article.date) {
                    html += ` • ${article.date.toLocaleString()}`;
                }
                if (article.author) {
                    html += ` • By ${escapeHtml(article.author)}`;
                }
                html += '</div>';
                
                // Description
                if (article.description) {
                    html += '<div class="article-description">';
                    const desc = article.description.substring(0, 300);
                    html += escapeHtml(desc);
                    if (article.description.length > 300) html += '...';
                    html += '</div>';
                }
                
                html += '<div style="clear: both;"></div>'; // Clear float
                html += '</div>';
            });
            
            container.innerHTML = html;
            
            const showPagination = articles.length > pageSize;
            document.getElementById('topPagination').style.display = showPagination ? 'flex' : 'none';
            document.getElementById('bottomPagination').style.display = showPagination ? 'flex' : 'none';
        }
        
        // Update pagination controls
        function updatePaginationControls() {
            document.getElementById('currentPageTop').textContent = currentPage;
            document.getElementById('totalPagesTop').textContent = totalPages;
            document.getElementById('currentPageBottom').textContent = currentPage;
            document.getElementById('totalPagesBottom').textContent = totalPages;
        }
        
        // Pagination functions
        function goToPage(page) {
            currentPage = Math.max(1, Math.min(page, totalPages));
            displayArticles(filteredArticles.length > 0 || activeThemeFilter !== 'all' ? filteredArticles : allArticles);
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }
        
        function nextPage() {
            goToPage(currentPage + 1);
        }
        
        function previousPage() {
            goToPage(currentPage - 1);
        }
        
        function changePageSize(size) {
            pageSize = parseInt(size);
            currentPage = 1;
            document.getElementById('pageSizeTop').value = size;
            document.getElementById('pageSizeBottom').value = size;
            displayArticles(filteredArticles.length > 0 || activeThemeFilter !== 'all' ? filteredArticles : allArticles);
        }
        
        // Filter articles by search term
        function filterArticles() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            
            let baseArticles = activeThemeFilter === 'all' ? allArticles : 
                allArticles.filter(article => {
                    return article.themes && 
                           (article.themes.primary === activeThemeFilter || 
                            article.themes.secondary.includes(activeThemeFilter));
                });
            
            if (!searchTerm) {
                filteredArticles = activeThemeFilter === 'all' ? [] : baseArticles;
                displayArticles(baseArticles);
                updateStats();
                return;
            }
            
            filteredArticles = baseArticles.filter(article => {
                return article.title.toLowerCase().includes(searchTerm) ||
                       article.description.toLowerCase().includes(searchTerm) ||
                       (article.source_name || article.source).toLowerCase().includes(searchTerm);
            });
            
            currentPage = 1;
            displayArticles(filteredArticles);
            updateStats();
        }
        
        // Update sources display
        function updateSourcesDisplay() {
            const container = document.getElementById('feedSources');
            let html = '<strong>Feed Sources:</strong> ';
            
            feedSources.forEach(source => {
                const name = source.name || source.title || 'Unknown';
                html += `<span class="source-badge" id="source-${name.replace(/\s+/g, '-')}">${escapeHtml(name)}</span>`;
            });
            
            container.innerHTML = html;
        }
        
        // Update source status
        function updateSourceStatus(name, status) {
            const badge = document.getElementById(`source-${name.replace(/\s+/g, '-')}`);
            if (badge) {
                badge.className = `source-badge ${status}`;
            }
        }
        
        // Update stats
        function updateStats(customMessage) {
            const articlesToShow = filteredArticles.length > 0 || activeThemeFilter !== 'all' ? 
                filteredArticles : allArticles;
            
            let message = customMessage || `Showing ${articlesToShow.length} articles`;
            
            if (activeThemeFilter !== 'all') {
                const themeName = THEMES[activeThemeFilter]?.name || activeThemeFilter;
                message += ` (filtered by ${themeName})`;
            }
            
            if (filteredArticles.length > 0 && document.getElementById('searchInput').value) {
                message += ' (search active)';
            }
            
            // Add note about filtering
            if (cacheStats.filtered > 0) {
                message += ` <em style="font-size: 12px; color: #999;">(${cacheStats.filtered} non-civic articles filtered out)</em>`;
            }
            
            document.getElementById('stats').innerHTML = message + 
                '<div class="theme-analytics" id="themeAnalytics"></div>';
            
            updateThemeAnalytics();
        }
        
        // Show error
        function showError(message) {
            const container = document.getElementById('articlesContainer');
            container.innerHTML = `<div class="error">${escapeHtml(message)}</div>`;
        }
        
        // Toggle debug panel
        function toggleDebug() {
            debugMode = !debugMode;
            const panel = document.getElementById('debugPanel');
            panel.classList.toggle('active');
            
            if (debugMode) {
                updateDebug();
            }
        }
        
        // Update debug info
        function updateDebug() {
            const panel = document.getElementById('debugPanel');
            let debug = 'Debug Information\n';
            debug += '=================\n\n';
            debug += `Total Sources: ${feedSources.length}\n`;
            debug += `Total Articles: ${allArticles.length}\n`;
            debug += `Filtered Articles: ${filteredArticles.length}\n`;
            debug += `Active Theme Filter: ${activeThemeFilter}\n`;
            debug += `Cached URLs: ${cachedUrls.size}\n`;
            debug += `Current Page: ${currentPage}/${totalPages}\n`;
            debug += `Page Size: ${pageSize}\n\n`;
            
            debug += 'Cache Statistics:\n';
            debug += `  From Cache: ${cacheStats.fromCache}\n`;
            debug += `  From RSS: ${cacheStats.fromRSS}\n`;
            debug += `  New Cached: ${cacheStats.new}\n`;
            debug += `  Filtered Out: ${cacheStats.filtered}\n\n`;
            
            debug += 'Theme Distribution:\n';
            Object.entries(themeCounts).forEach(([theme, count]) => {
                if (theme !== 'all') {
                    const percentage = allArticles.length > 0 ? 
                        Math.round((count / allArticles.length) * 100) : 0;
                    debug += `  ${theme}: ${count} articles (${percentage}%)\n`;
                }
            });
            
            debug += '\nArticles by Source:\n';
            const sourceCounts = {};
            allArticles.forEach(article => {
                const source = article.source_name || article.source;
                sourceCounts[source] = (sourceCounts[source] || 0) + 1;
            });
            
            Object.entries(sourceCounts)
                .sort((a, b) => b[1] - a[1])
                .forEach(([source, count]) => {
                    debug += `  ${source}: ${count} articles\n`;
                });
            
            panel.textContent = debug;
        }
        
        // Advanced cache search using Xano query parameters
        async function advancedCacheSearch() {
            const keywords = document.getElementById('advKeywords').value.trim();
            const publication = document.getElementById('advPublication').value.trim();
            const searchTerm = document.getElementById('advSearchTerm').value.trim();
            
            if (!keywords && !publication && !searchTerm) {
                alert('Please enter at least one search parameter');
                return;
            }
            
            const searchParams = {};
            if (keywords) searchParams.keywords = keywords;
            if (publication) searchParams.publication = publication;
            if (searchTerm) searchParams.search_term = searchTerm;
            
            // Clear current articles and reset stats
            allArticles = [];
            filteredArticles = [];
            cacheStats = { fromCache: 0, fromRSS: 0, new: 0, filtered: 0 };
            currentPage = 1;
            
            updateSyncStatus('syncing', 'Searching cache...');
            
            // Load from cache with search parameters
            const cachedArticles = await loadFromCache(searchParams);
            
            if (cachedArticles.length > 0) {
                allArticles = cachedArticles;
                updateThemeCounts();
                filterArticles();
                updateCacheStats();
                updateSyncStatus('success', `Found ${cachedArticles.length} matching articles`);
            } else {
                updateSyncStatus('error', 'No matching articles found');
                showError('No articles found matching your search criteria');
            }
            
            updateStats(`Found ${cachedArticles.length} articles matching advanced search`);
        }
        
        // Escape HTML
        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = String(text);
            return div.innerHTML;
        }
        
        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            updateStats('Ready to sync. Click "Sync & Load" to begin. <em style="font-size: 12px; color: #999;">(Only civic-themed articles are cached)</em>');
            updateCacheStats();
            updateLastSyncTime();
            
            // Load local storage preferences
            const savedTimeWindow = localStorage.getItem(CACHE_CONFIG.localCacheKey + '_timeWindow');
            if (savedTimeWindow) {
                document.getElementById('timeWindow').value = savedTimeWindow;
            }
            
            // Save preferences on change
            document.getElementById('timeWindow').addEventListener('change', (e) => {
                localStorage.setItem(CACHE_CONFIG.localCacheKey + '_timeWindow', e.target.value);
            });
        });
    </script>
</body>
</html>
