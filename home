<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Change Log // Nashville</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500;600;700&family=Playfair+Display:wght@400;700;900&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --bg-primary: #fefefe;
            --bg-secondary: #ffffff;
            --bg-card: #fafafa;
            --text-primary: #2d3436;
            --text-secondary: #74828c;
            --text-tertiary: #a0aab4;
            --border: #f0f2f5;
            --border-light: #f8f9fa;
            
            --theme-1: #4a90e2;
            --theme-2: #27ae60;
            --theme-3: #9b59b6;
            --theme-4: #f39c12;
            --theme-5: #e91e63;
            --theme-6: #1abc9c;
            --theme-7: #7cb342;
            
            --type-legislation: #2c3e50;
            --type-news: #e74c3c;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            line-height: 1.6;
        }

        .demo-banner {
            background: linear-gradient(135deg, #4a90e2 0%, #9b59b6 100%);
            color: white;
            padding: 0.75rem;
            text-align: center;
            font-size: 0.875rem;
            cursor: pointer;
            transition: all 0.2s;
        }

        .demo-banner:hover {
            background: linear-gradient(135deg, #3a7bc8 0%, #8b49a6 100%);
        }

        .header {
            background: var(--bg-secondary);
            border-bottom: 1px solid var(--border);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1.5rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .logo {
            font-family: 'JetBrains Mono', monospace;
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--text-primary);
        }

        .logo-slash {
            color: var(--theme-1);
        }

        .nav-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        /* Refresh Button */
        .refresh-btn {
            background: var(--bg-card);
            border: 1px solid var(--border);
            padding: 0.75rem 1.25rem;
            border-radius: 24px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .refresh-btn:hover {
            background: var(--bg-secondary);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .refresh-btn.loading {
            opacity: 0.7;
            cursor: not-allowed;
        }

        .refresh-btn.loading .refresh-icon {
            animation: spin 1s linear infinite;
        }

        /* View Switcher */
        .view-switcher {
            display: flex;
            background: var(--bg-card);
            border-radius: 24px;
            padding: 0.25rem;
            gap: 0.25rem;
        }

        .view-btn {
            padding: 0.5rem 1rem;
            background: transparent;
            border: none;
            border-radius: 20px;
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .view-btn:hover {
            color: var(--text-primary);
        }

        .view-btn.active {
            background: var(--bg-secondary);
            color: var(--theme-1);
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .view-btn svg {
            width: 16px;
            height: 16px;
        }

        .view-btn span {
            display: none;
        }

        @media (min-width: 640px) {
            .view-btn span {
                display: inline;
            }
        }

        /* Source Selector Dropdown */
        .source-selector {
            position: relative;
        }

        .source-btn {
            background: var(--bg-card);
            border: 1px solid var(--border);
            padding: 0.75rem 1.25rem;
            border-radius: 24px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.875rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .source-btn:hover {
            background: var(--bg-secondary);
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .source-dropdown {
            position: absolute;
            top: calc(100% + 0.5rem);
            right: 0;
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
            width: 350px;
            max-height: 600px;
            overflow-y: auto;
            display: none;
            z-index: 1000;
        }

        .source-dropdown.show {
            display: block;
        }

        .dropdown-header {
            padding: 1rem 1.25rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .dropdown-header h4 {
            margin: 0;
            font-size: 1rem;
        }

        .close-dropdown {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-tertiary);
            padding: 0;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .close-dropdown:hover {
            color: var(--text-primary);
        }

        .dropdown-content {
            padding: 0.5rem 0;
        }

        .source-section {
            padding: 0.75rem 1.25rem;
            border-bottom: 1px solid var(--border-light);
        }

        .source-section:last-child {
            border-bottom: none;
        }

        .source-section h5 {
            margin: 0 0 0.5rem 0;
            font-size: 0.75rem;
            text-transform: uppercase;
            color: var(--text-tertiary);
            letter-spacing: 0.05em;
        }

        .source-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.5rem 0;
            cursor: pointer;
            transition: opacity 0.2s;
            font-size: 0.875rem;
        }

        .source-item:hover {
            opacity: 0.8;
        }

        .source-item input[type="checkbox"] {
            width: 16px;
            height: 16px;
            cursor: pointer;
        }

        .source-item input[type="checkbox"]:disabled {
            cursor: not-allowed;
            opacity: 0.5;
        }

        .source-item.permanent {
            opacity: 0.8;
        }

        .source-item.permanent span::after {
            content: ' 🔒';
            font-size: 0.75rem;
        }

        .dropdown-footer {
            padding: 1rem 1.25rem;
            border-top: 1px solid var(--border);
        }

        .apply-sources-btn {
            width: 100%;
            background: var(--theme-1);
            color: white;
            border: none;
            padding: 0.75rem;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }

        .apply-sources-btn:hover {
            background: #3a7bc8;
        }

        /* Search Bar */
        .search-container {
            max-width: 600px;
            margin: 2rem auto;
            padding: 0 2rem;
        }

        .search-box {
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 1rem 3rem 1rem 1.25rem;
            border: 1px solid var(--border);
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.2s;
            background: var(--bg-secondary);
        }

        .search-input:focus {
            outline: none;
            border-color: var(--theme-1);
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        .search-clear {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            color: var(--text-tertiary);
            cursor: pointer;
            font-size: 1.25rem;
            padding: 0.25rem;
            display: none;
            transition: color 0.2s;
        }

        .search-clear.visible {
            display: block;
        }

        .search-clear:hover {
            color: var(--text-primary);
        }

        /* View Mode Switcher Below Search */
        .view-controls {
            max-width: 600px;
            margin: 1rem auto 2rem;
            padding: 0 2rem;
            display: flex;
            justify-content: center;
        }

        /* Filter System */
        .filters-wrapper {
            max-width: 1200px;
            margin: 0 auto 2rem;
            padding: 0 2rem;
        }

        .content-types {
            display: flex;
            gap: 2rem;
            justify-content: center;
            border-bottom: 1px solid var(--border);
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
        }

        .type-tab {
            padding: 1rem 0;
            background: none;
            border: none;
            border-bottom: 2px solid transparent;
            color: var(--text-secondary);
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .type-tab:hover {
            color: var(--text-primary);
        }

        .type-tab.active {
            color: var(--text-primary);
            border-bottom-color: var(--theme-1);
        }

        .type-icon {
            font-size: 1.125rem;
        }

        .type-count {
            background: var(--bg-card);
            padding: 0.125rem 0.5rem;
            border-radius: 10px;
            font-size: 0.75rem;
        }

        .theme-filters {
            display: flex;
            gap: 0.75rem;
            flex-wrap: wrap;
            align-items: center;
        }

        .theme-label {
            font-size: 0.813rem;
            color: var(--text-tertiary);
            margin-right: 0.5rem;
        }

        .theme-pill {
            padding: 0.5rem 1rem;
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: 20px;
            color: var(--text-secondary);
            font-size: 0.813rem;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .theme-pill:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .theme-pill.active {
            background: var(--bg-secondary);
            border-color: var(--text-primary);
            color: var(--text-primary);
        }

        .theme-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }

        .theme-count {
            font-size: 0.75rem;
            color: var(--text-tertiary);
            margin-left: 0.25rem;
        }

        /* Main content area */
        .main-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem 4rem;
            min-height: 400px;
        }

        /* View container with transition */
        .view-container {
            opacity: 1;
            transition: opacity 0.3s ease;
        }

        .view-container.transitioning {
            opacity: 0;
        }

        /* Loading State */
        .loading-container {
            text-align: center;
            padding: 4rem 2rem;
            color: var(--text-secondary);
        }

        .spinner {
            display: inline-block;
            width: 40px;
            height: 40px;
            border: 3px solid var(--border);
            border-top-color: var(--theme-1);
            border-radius: 50%;
            animation: spin 0.8s linear infinite;
            margin-bottom: 1rem;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Stats bar */
        .stats-bar {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 1rem 2rem;
            background: var(--bg-card);
            border-radius: 12px;
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .stat-item {
            text-align: center;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--theme-1);
        }

        .stat-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
        }

        /* CARDS VIEW (Default) */
        .card-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(340px, 1fr));
            gap: 1.5rem;
        }

        .card {
            background: var(--bg-secondary);
            border-radius: 12px;
            border: 1px solid var(--border);
            transition: all 0.2s;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            overflow: hidden;
            position: relative;
        }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
        }

        .card-type-bar {
            height: 4px;
            background: var(--text-tertiary);
        }

        .card[data-type="legislation"] .card-type-bar {
            background: var(--type-legislation);
        }

        .card[data-type="news"] .card-type-bar {
            background: var(--type-news);
        }

        .card-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            background: var(--bg-card);
        }

        .card-image-placeholder {
            width: 100%;
            height: 200px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 3rem;
            opacity: 0.8;
        }

        .gradient-1 { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .gradient-2 { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }
        .gradient-3 { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); }
        .gradient-4 { background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); }
        .gradient-5 { background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); }
        .gradient-6 { background: linear-gradient(135deg, #30cfd0 0%, #330867 100%); }
        .gradient-7 { background: linear-gradient(135deg, #fccb90 0%, #d57eeb 100%); }

        .card-content {
            padding: 1.5rem;
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .card-type-label {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: var(--text-tertiary);
            display: flex;
            align-items: center;
            gap: 0.375rem;
        }

        .card[data-type="legislation"] .card-type-label {
            color: var(--type-legislation);
        }

        .card[data-type="news"] .card-type-label {
            color: var(--type-news);
        }

        .card-source {
            font-size: 0.75rem;
            padding: 0.25rem 0.625rem;
            border-radius: 12px;
            background: var(--bg-card);
            color: var(--text-secondary);
        }

        .card-title {
            font-size: 1.125rem;
            font-weight: 600;
            line-height: 1.4;
            margin-bottom: 0.75rem;
            color: var(--text-primary);
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .card-excerpt {
            font-size: 0.875rem;
            color: var(--text-secondary);
            line-height: 1.6;
            margin-bottom: 1rem;
            flex: 1;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .theme-tags {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
            margin-bottom: 1rem;
            min-height: 28px;
        }

        .theme-tag {
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
            padding: 0.25rem 0.625rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
            background: var(--bg-card);
        }

        .theme-tag[data-theme="1"] { background: rgba(74, 144, 226, 0.1); color: var(--theme-1); }
        .theme-tag[data-theme="2"] { background: rgba(39, 174, 96, 0.1); color: var(--theme-2); }
        .theme-tag[data-theme="3"] { background: rgba(155, 89, 182, 0.1); color: var(--theme-3); }
        .theme-tag[data-theme="4"] { background: rgba(243, 156, 18, 0.1); color: var(--theme-4); }
        .theme-tag[data-theme="5"] { background: rgba(233, 30, 99, 0.1); color: var(--theme-5); }
        .theme-tag[data-theme="6"] { background: rgba(26, 188, 156, 0.1); color: var(--theme-6); }
        .theme-tag[data-theme="7"] { background: rgba(124, 179, 66, 0.1); color: var(--theme-7); }

        .card-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.813rem;
            color: var(--text-tertiary);
            padding-top: 1rem;
            border-top: 1px solid var(--border);
        }

        .card-stats {
            display: flex;
            gap: 1rem;
        }

        /* LIST VIEW */
        .list-view {
            max-width: 900px;
            margin: 0 auto;
        }

        .list-post {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 8px;
            margin-bottom: 0.75rem;
            transition: all 0.2s;
        }

        .list-post:hover {
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        }

        .list-post-content {
            display: flex;
            gap: 1rem;
            padding: 1rem;
            cursor: pointer;
        }

        .list-votes {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.25rem;
            min-width: 40px;
        }

        .vote-btn {
            background: none;
            border: none;
            color: var(--text-tertiary);
            cursor: pointer;
            padding: 0.25rem;
            transition: all 0.2s;
            font-size: 0.875rem;
        }

        .vote-btn:hover {
            color: var(--primary);
        }

        .vote-btn.upvoted {
            color: var(--theme-2);
        }

        .vote-btn.downvoted {
            color: var(--theme-5);
        }

        .vote-count {
            font-weight: 600;
            font-size: 0.875rem;
        }

        .list-main {
            flex: 1;
            min-width: 0;
        }

        .list-meta {
            display: flex;
            gap: 0.5rem;
            align-items: center;
            font-size: 0.75rem;
            color: var(--text-tertiary);
            margin-bottom: 0.5rem;
        }

        .list-type-badge {
            padding: 0.125rem 0.375rem;
            background: var(--bg-card);
            border-radius: 4px;
            text-transform: uppercase;
            font-weight: 500;
        }

        .list-title {
            font-size: 1rem;
            font-weight: 500;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
            line-height: 1.4;
        }

        .list-preview {
            font-size: 0.813rem;
            color: var(--text-secondary);
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .list-thumbnail {
            width: 70px;
            height: 70px;
            border-radius: 6px;
            object-fit: cover;
            background: var(--bg-card);
        }

        /* MODAL SYSTEM */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
            z-index: 1000;
            display: none;
            align-items: center;
            justify-content: center;
            padding: 1rem;
        }

        .modal-overlay.show {
            display: flex;
        }

        .modal {
            background: var(--bg-secondary);
            border-radius: 16px;
            max-width: 700px;
            width: 100%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
            position: relative;
        }

        .modal-close {
            position: sticky;
            top: 1rem;
            right: 1rem;
            float: right;
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s;
            z-index: 10;
            margin: 1rem;
        }

        .modal-close:hover {
            transform: scale(1.1);
            background: var(--bg-secondary);
        }

        /* Legislation Modal */
        .modal-legislation {
            padding: 2rem;
        }

        .legislation-status {
            display: inline-block;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-weight: 600;
            font-size: 0.875rem;
            margin-bottom: 1.5rem;
        }

        .status-pending {
            background: rgba(243, 156, 18, 0.1);
            color: var(--theme-4);
        }

        .status-passed {
            background: rgba(39, 174, 96, 0.1);
            color: var(--theme-2);
        }

        .status-failed {
            background: rgba(231, 76, 60, 0.1);
            color: #e74c3c;
        }

        .status-in-progress {
            background: rgba(52, 152, 219, 0.1);
            color: #3498db;
        }

        .legislation-title {
            font-family: 'Playfair Display', serif;
            font-size: 2rem;
            line-height: 1.3;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 1.5rem;
            text-wrap: balance;
        }

        .legislation-meta {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            padding: 1.5rem;
            background: var(--bg-card);
            border-radius: 12px;
            margin-bottom: 1.5rem;
        }

        .meta-item {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .meta-label {
            font-size: 0.75rem;
            text-transform: uppercase;
            color: var(--text-tertiary);
            letter-spacing: 0.05em;
        }

        .meta-value {
            font-size: 1rem;
            color: var(--text-primary);
            font-weight: 500;
        }

        .progress-section {
            margin: 2rem 0;
        }

        .progress-bar {
            height: 8px;
            background: var(--border);
            border-radius: 4px;
            overflow: hidden;
            margin-bottom: 1rem;
        }

        .progress-fill {
            height: 100%;
            background: var(--theme-1);
            transition: width 0.3s ease;
        }

        .timeline {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .timeline-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            font-size: 0.875rem;
        }

        .timeline-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid var(--border);
            background: var(--bg-secondary);
        }

        .timeline-dot.completed {
            background: var(--theme-2);
            border-color: var(--theme-2);
        }

        .timeline-dot.current {
            background: var(--theme-1);
            border-color: var(--theme-1);
        }

        /* Content Modal (News) */
        .modal-content-body {
            padding: 2rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: 600;
            margin-bottom: 1rem;
            line-height: 1.3;
        }

        .modal-meta-bar {
            display: flex;
            gap: 1rem;
            padding: 1rem 0;
            border-bottom: 1px solid var(--border);
            margin-bottom: 1.5rem;
            font-size: 0.875rem;
            color: var(--text-secondary);
        }

        .modal-excerpt {
            font-size: 1rem;
            line-height: 1.6;
            color: var(--text-primary);
            margin-bottom: 2rem;
        }

        .modal-actions {
            padding: 1.5rem;
            background: var(--bg-card);
            border-radius: 12px;
            display: flex;
            gap: 1rem;
            align-items: center;
            justify-content: space-between;
        }

        .modal-action-text {
            font-size: 0.875rem;
            color: var(--text-secondary);
        }

        .modal-action-btn {
            padding: 0.75rem 1.5rem;
            background: var(--theme-1);
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            text-decoration: none;
            display: inline-block;
        }

        .modal-action-btn:hover {
            background: #3a7bc8;
            transform: translateY(-1px);
        }

        /* Empty state */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: var(--text-secondary);
        }

        .empty-state h3 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: var(--text-primary);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .card-grid {
                grid-template-columns: 1fr;
            }
            
            .source-dropdown {
                width: 90vw;
                max-width: 350px;
                right: -1rem;
            }
            
            .legislation-title {
                font-size: 1.5rem;
            }
            
            .header-content {
                padding: 1rem;
            }
            
            .nav-actions {
                width: 100%;
                justify-content: space-between;
            }
        }
    </style>
</head>
<body>
    <!-- Demo banner -->
    <div class="demo-banner">
        🚧 Live integration with Metro Nashville legislation & local RSS news feeds
    </div>

    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <div class="logo">CHANGE LOG <span class="logo-slash">//</span> NASHVILLE</div>
            <div class="nav-actions">
                <button class="refresh-btn" id="refresh-btn" onclick="refreshData()" title="Refresh data (Ctrl+R)">
                    <span class="refresh-icon">🔄</span>
                    <span>Refresh</span>
                </button>
                <div class="source-selector">
                    <button class="source-btn" id="source-btn">
                        <span>⚙️</span> Sources
                    </button>
                    <div class="source-dropdown" id="source-dropdown">
                        <div class="dropdown-header">
                            <h4>Select Data Sources</h4>
                            <button class="close-dropdown" onclick="toggleSourceDropdown()">×</button>
                        </div>
                        <div class="dropdown-content" id="dropdown-sources-content">
                            <!-- Sources will be dynamically populated -->
                        </div>
                        <div class="dropdown-footer">
                            <button class="apply-sources-btn" onclick="applySources()">Apply Changes</button>
                            <button class="apply-sources-btn" onclick="clearCache()" style="margin-top: 0.5rem; background: var(--text-secondary);">Clear Cache & Refresh</button>
                            <small style="display: block; margin-top: 0.5rem; color: var(--text-tertiary); text-align: center;">
                                <span id="source-status">Initializing...</span>
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Search -->
    <div class="search-container">
        <div class="search-box">
            <input 
                type="text" 
                id="search-input" 
                class="search-input" 
                placeholder="Search legislation and news..."
            />
            <button class="search-clear" id="search-clear">×</button>
        </div>
    </div>

    <!-- View Mode Switcher -->
    <div class="view-controls">
        <div class="view-switcher">
            <button class="view-btn active" data-view="cards">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="3" width="7" height="7"/>
                    <rect x="14" y="3" width="7" height="7"/>
                    <rect x="3" y="14" width="7" height="7"/>
                    <rect x="14" y="14" width="7" height="7"/>
                </svg>
                <span>Cards</span>
            </button>
            <button class="view-btn" data-view="list">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M4 6h16M4 12h16M4 18h16"/>
                </svg>
                <span>List</span>
            </button>
        </div>
    </div>

    <!-- Stats Bar -->
    <div class="stats-bar" id="stats-bar" style="display: none;">
        <div class="stat-item">
            <div class="stat-value" id="stat-active">0</div>
            <div class="stat-label">Active Legislation</div>
        </div>
        <div class="stat-item">
            <div class="stat-value" id="stat-news">0</div>
            <div class="stat-label">News Articles</div>
        </div>
        <div class="stat-item">
            <div class="stat-value" id="stat-weekly">0</div>
            <div class="stat-label">Updated This Week</div>
        </div>
        <div class="stat-item">
            <div class="stat-value" id="last-update-time">--:--</div>
            <div class="stat-label">Last Updated</div>
        </div>
    </div>

    <!-- Filters -->
    <div class="filters-wrapper">
        <!-- Content type tabs -->
        <div class="content-types">
            <button class="type-tab active" data-filter="all">
                <span class="type-icon">📊</span>
                All Updates
                <span class="type-count" id="count-all">0</span>
            </button>
            <button class="type-tab" data-filter="legislation">
                <span class="type-icon">📜</span>
                Legislation
                <span class="type-count" id="count-legislation">0</span>
            </button>
            <button class="type-tab" data-filter="news">
                <span class="type-icon">📰</span>
                News
                <span class="type-count" id="count-news">0</span>
            </button>
        </div>

        <!-- Theme filters -->
        <div class="theme-filters">
            <span class="theme-label">Filter by theme:</span>
            <button class="theme-pill active" data-theme="all">
                <span class="theme-dot" style="background: var(--text-tertiary);"></span>
                All Themes
            </button>
            <button class="theme-pill" data-theme="1">
                <span class="theme-dot" style="background: var(--theme-1);"></span>
                Collaborative Governance
                <span class="theme-count" id="theme-count-1"></span>
            </button>
            <button class="theme-pill" data-theme="2">
                <span class="theme-dot" style="background: var(--theme-2);"></span>
                Civic Transparency
                <span class="theme-count" id="theme-count-2"></span>
            </button>
            <button class="theme-pill" data-theme="3">
                <span class="theme-dot" style="background: var(--theme-3);"></span>
                Inclusive Solutions
                <span class="theme-count" id="theme-count-3"></span>
            </button>
            <button class="theme-pill" data-theme="4">
                <span class="theme-dot" style="background: var(--theme-4);"></span>
                Contextual Leadership
                <span class="theme-count" id="theme-count-4"></span>
            </button>
            <button class="theme-pill" data-theme="5">
                <span class="theme-dot" style="background: var(--theme-5);"></span>
                Culture
                <span class="theme-count" id="theme-count-5"></span>
            </button>
            <button class="theme-pill" data-theme="6">
                <span class="theme-dot" style="background: var(--theme-6);"></span>
                Power & Resources
                <span class="theme-count" id="theme-count-6"></span>
            </button>
            <button class="theme-pill" data-theme="7">
                <span class="theme-dot" style="background: var(--theme-7);"></span>
                Systemic Care
                <span class="theme-count" id="theme-count-7"></span>
            </button>
        </div>
    </div>

    <!-- Main content -->
    <main class="main-content">
        <div class="view-container" id="view-container">
            <div class="loading-container">
                <div class="spinner"></div>
                <p id="loading-message">Loading Nashville civic data...</p>
            </div>
        </div>
    </main>

    <!-- Modal System -->
    <div class="modal-overlay" id="modal-overlay">
        <div class="modal" id="modal-content">
            <!-- Modal content will be dynamically inserted here -->
        </div>
    </div>

    <script>
        // Configuration
        const CONFIG = {
            xanoBaseUrl: 'https://xvkq-pq7i-idtl.n7d.xano.io/api:Hj4C6PGO',
            endpoints: {
                legislation: '/archiverecords',
                rssSources: '/rss_feed'
            },
            corsProxy: 'https://corsproxy.io/?',
            updateInterval: 300000, // 5 minutes
            rssSources: {} // Will be populated from API
        };

        // Theme definitions
        const THEMES = {
            1: 'Collaborative Governance',
            2: 'Civic Transparency',
            3: 'Inclusive Solutions',
            4: 'Contextual Leadership',
            5: 'Culture',
            6: 'Power & Resources',
            7: 'Systemic Care'
        };

        // Theme detection keywords
        const THEME_KEYWORDS = {
            1: ['community', 'resident', 'neighborhood', 'democratic', 'participatory', 'grassroots', 'local', 'citizen', 'public input', 'town hall', 'civic', 'collaborate', 'partnership', 'engagement'],
            2: ['audit', 'transparency', 'report', 'investigation', 'accountability', 'disclosure', 'truth', 'data', 'open', 'public record', 'FOIA', 'ethics', 'oversight'],
            3: ['alternative', 'options', 'compromise', 'phases', 'middle ground', 'nuanced', 'flexible', 'pilot', 'experiment', 'test', 'inclusive', 'equity', 'diverse', 'solution'],
            4: ['leadership', 'mayor', 'council', 'governance', 'administration', 'executive', 'management', 'cooper', 'freddie', 'district', 'director', 'official'],
            5: ['history', 'tradition', 'culture', 'heritage', 'memorial', 'celebration', 'art', 'music', 'festival', 'mural', 'landmark', 'community', 'event', 'museum', 'theater'],
            6: ['budget', 'funding', 'affordable', 'housing', 'economic', 'money', 'cost', 'finance', 'tax', 'development', 'gentrification', 'rent', 'property', 'wealth', 'poverty'],
            7: ['environment', 'trees', 'climate', 'sustainability', 'green', 'park', 'nature', 'pollution', 'flood', 'greenway', 'recycling', 'conservation', 'infrastructure', 'health', 'safety', 'system']
        };

        // State management
        class DataManager {
            constructor() {
                this.allCards = [];
                this.filteredCards = [];
                this.currentView = localStorage.getItem('preferredView') || 'cards';
                // Convert old reddit view to list
                if (this.currentView === 'reddit') {
                    this.currentView = 'list';
                    localStorage.setItem('preferredView', 'list');
                }
                this.filters = {
                    type: 'all',
                    themes: new Set(),
                    search: ''
                };
                this.sourcePreferences = this.loadSourcePreferences();
                this.lastFetchTime = null;
                this.counts = {
                    all: 0,
                    legislation: 0,
                    news: 0,
                    themes: {}
                };
                this.stats = {
                    active: 0,
                    newsCount: 0,
                    weeklyUpdates: 0
                };
                
                // Initialize theme counts
                for (let i = 1; i <= 7; i++) {
                    this.counts.themes[i] = 0;
                }
            }

            loadSourcePreferences() {
                const saved = localStorage.getItem('nashville-sources-v2');
                if (saved) {
                    try {
                        const cached = JSON.parse(saved);
                        // Return cached preferences if they exist
                        if (cached.preferences && cached.preferences.rss) {
                            console.log('Loaded cached preferences:', cached.preferences);
                            return cached.preferences;
                        }
                    } catch (e) {
                        console.error('Error loading preferences:', e);
                    }
                }
                
                console.log('Using default preferences');
                return this.getDefaultPreferences();
            }

            getDefaultPreferences() {
                // Enable some RSS feeds by default for better initial experience
                return {
                    legislation: true,
                    rss: {
                        '97': true,   // The Tennessean
                        '102': true,  // WPLN
                        '103': true   // Nashville Scene
                    }
                };
            }

            saveSourcePreferences(refetch = true) {
                const prefs = {
                    legislation: true,
                    rss: {}
                };
                
                // Save all RSS source states using string IDs
                Object.keys(CONFIG.rssSources).forEach(id => {
                    const stringId = String(id);
                    const checkbox = document.getElementById(`source-rss-${stringId}`);
                    if (checkbox) {
                        prefs.rss[stringId] = checkbox.checked;
                        // Update the enabled state in CONFIG.rssSources with the original key
                        if (CONFIG.rssSources[id]) {
                            CONFIG.rssSources[id].enabled = checkbox.checked;
                        }
                    } else if (CONFIG.rssSources[id]) {
                        // Preserve existing preference if checkbox not found
                        prefs.rss[stringId] = CONFIG.rssSources[id].enabled || false;
                    }
                });
                
                this.sourcePreferences = prefs;
                
                // Save with timestamp and current RSS sources
                const cacheData = {
                    preferences: prefs,
                    timestamp: Date.now(),
                    rssSources: CONFIG.rssSources
                };
                
                try {
                    localStorage.setItem('nashville-sources-v2', JSON.stringify(cacheData));
                    console.log('Saved preferences - RSS enabled count:', Object.values(prefs.rss).filter(v => v).length);
                } catch (e) {
                    console.error('Error saving preferences:', e);
                }
                
                if (refetch) {
                    window.dataFetcher.fetchAllData(false);
                }
            }

            detectThemes(title, content = '') {
                const text = `${title} ${content}`.toLowerCase();
                const detectedThemes = [];
                
                for (const [themeId, keywords] of Object.entries(THEME_KEYWORDS)) {
                    let score = 0;
                    keywords.forEach(keyword => {
                        const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
                        const matches = text.match(regex);
                        if (matches) {
                            score += matches.length;
                        }
                    });
                    
                    if (score > 0) {
                        detectedThemes.push({
                            id: parseInt(themeId),
                            score: score
                        });
                    }
                }
                
                const topThemes = detectedThemes
                    .sort((a, b) => b.score - a.score)
                    .slice(0, 2)
                    .map(t => t.id);
                
                if (topThemes.length === 0) {
                    return [Math.floor(Math.random() * 7) + 1];
                }
                
                return topThemes;
            }

            formatLegislationTitle(title) {
                const abbreviations = {
                    'Resolution Authorizing': 'Res.',
                    'Ordinance Amending': 'Ord. Amend.',
                    'Metropolitan Development and Housing Agency': 'MDHA',
                    'Metropolitan Government': 'Metro'
                };
                
                let formatted = title;
                Object.entries(abbreviations).forEach(([long, short]) => {
                    formatted = formatted.replace(long, short);
                });
                
                if (formatted.length > 80) {
                    const keywordIndex = formatted.search(/\b(to|for|regarding)\b/i);
                    if (keywordIndex > 0 && keywordIndex < 40) {
                        return formatted.substring(0, 35) + '...' + 
                               formatted.substring(keywordIndex).substring(0, 35);
                    }
                    return formatted.substring(0, 77) + '...';
                }
                
                return formatted;
            }

            normalizeLegislation(matter) {
                const title = matter.MatterTitle || matter.MatterName || 'Untitled Legislation';
                const themes = this.detectThemes(title, matter.MatterTypeName || '');
                
                let status = matter.MatterStatusName || 'Pending';
                let statusClass = 'pending';
                if (status.toLowerCase().includes('pass')) statusClass = 'passed';
                else if (status.toLowerCase().includes('fail')) statusClass = 'failed';
                else if (status.toLowerCase().includes('progress')) statusClass = 'in-progress';
                
                return {
                    id: `leg-${matter.MatterId || Math.random()}`,
                    type: 'legislation',
                    source: 'metro',
                    title: title,
                    displayTitle: this.formatLegislationTitle(title),
                    fullContent: matter.MatterText || '',
                    excerpt: `${matter.MatterTypeName || 'Legislation'} - ${status}`,
                    themes: themes,
                    status: status,
                    statusClass: statusClass,
                    date: new Date(matter.MatterIntroDate || Date.now()),
                    dateFormatted: this.formatDate(matter.MatterIntroDate),
                    sponsor: matter.MatterSponsor || '',
                    committee: matter.MatterBodyName || '',
                    fileNumber: matter.MatterFile || '',
                    rawData: matter
                };
            }

            normalizeRSSItem(item, source) {
                const title = item.querySelector('title')?.textContent || '';
                const description = item.querySelector('description')?.textContent || '';
                const link = item.querySelector('link')?.textContent || '';
                const pubDate = item.querySelector('pubDate')?.textContent;
                
                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = description;
                const cleanDescription = tempDiv.textContent || '';
                
                const themes = this.detectThemes(title, cleanDescription);
                
                return {
                    id: `rss-${String(source.id)}-${Date.now()}-${Math.random()}`,
                    type: 'news',
                    source: `rss-${String(source.id)}`,
                    title: title,
                    displayTitle: title.length > 80 ? title.substring(0, 77) + '...' : title,
                    fullContent: cleanDescription,
                    excerpt: cleanDescription.substring(0, 200) + '...',
                    themes: themes,
                    date: pubDate ? new Date(pubDate) : new Date(),
                    dateFormatted: this.formatDate(pubDate ? new Date(pubDate) : new Date()),
                    link: link,
                    sourceName: source.name
                };
            }

            formatDate(date) {
                if (!date) return '';
                const d = new Date(date);
                const now = new Date();
                const diff = now - d;
                const hours = Math.floor(diff / (1000 * 60 * 60));
                const days = Math.floor(hours / 24);
                
                if (hours < 1) return 'Just now';
                if (hours < 24) return `${hours}h ago`;
                if (days === 1) return 'Yesterday';
                if (days < 7) return `${days}d ago`;
                if (days < 30) return `${Math.floor(days / 7)}w ago`;
                return `${Math.floor(days / 30)}mo ago`;
            }

            applyFilters() {
                let filtered = [...this.allCards];
                
                if (this.filters.type !== 'all') {
                    filtered = filtered.filter(card => card.type === this.filters.type);
                }
                
                if (this.filters.themes.size > 0) {
                    filtered = filtered.filter(card => 
                        card.themes.some(theme => this.filters.themes.has(theme))
                    );
                }
                
                if (this.filters.search) {
                    const searchLower = this.filters.search.toLowerCase();
                    filtered = filtered.filter(card =>
                        card.title.toLowerCase().includes(searchLower) ||
                        card.excerpt.toLowerCase().includes(searchLower)
                    );
                }
                
                filtered.sort((a, b) => b.date - a.date);
                
                this.filteredCards = filtered;
                this.updateCounts();
                return filtered;
            }

            updateCounts() {
                this.counts.all = this.allCards.length;
                this.counts.legislation = 0;
                this.counts.news = 0;
                
                const now = new Date();
                const weekAgo = new Date(now - 7 * 24 * 60 * 60 * 1000);
                this.stats.active = 0;
                this.stats.newsCount = 0;
                this.stats.weeklyUpdates = 0;
                
                // Reset theme counts
                for (let i = 1; i <= 7; i++) {
                    this.counts.themes[i] = 0;
                }
                
                this.allCards.forEach(card => {
                    if (card.type === 'legislation') {
                        this.counts.legislation++;
                        if (card.statusClass === 'pending' || card.statusClass === 'in-progress') {
                            this.stats.active++;
                        }
                    }
                    if (card.type === 'news') {
                        this.counts.news++;
                        this.stats.newsCount++;
                    }
                    
                    if (card.date >= weekAgo) {
                        this.stats.weeklyUpdates++;
                    }
                    
                    card.themes.forEach(theme => {
                        this.counts.themes[theme] = (this.counts.themes[theme] || 0) + 1;
                    });
                });
                
                this.updateCountsUI();
            }

            updateCountsUI() {
                document.getElementById('count-all').textContent = this.counts.all;
                document.getElementById('count-legislation').textContent = this.counts.legislation;
                document.getElementById('count-news').textContent = this.counts.news;
                
                document.getElementById('stat-active').textContent = this.stats.active;
                document.getElementById('stat-news').textContent = this.stats.newsCount;
                document.getElementById('stat-weekly').textContent = this.stats.weeklyUpdates;
                
                // Update last fetch time
                const lastUpdateEl = document.getElementById('last-update-time');
                if (lastUpdateEl && this.lastFetchTime) {
                    lastUpdateEl.textContent = this.lastFetchTime.toLocaleTimeString([], {
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                }
                
                document.getElementById('stats-bar').style.display = 'flex';
                
                for (let i = 1; i <= 7; i++) {
                    const countEl = document.getElementById(`theme-count-${i}`);
                    if (countEl) {
                        const count = this.counts.themes[i] || 0;
                        countEl.textContent = count > 0 ? `(${count})` : '';
                    }
                }
            }
        }

        // Data fetching
        class DataFetcher {
            constructor(manager) {
                this.manager = manager;
                this.isFetching = false;
            }

            async fetchRSSSources(forceRefresh = false) {
                // Check if we have cached RSS sources
                if (!forceRefresh) {
                    const cached = localStorage.getItem('nashville-sources-v2');
                    if (cached) {
                        try {
                            const cacheData = JSON.parse(cached);
                            if (cacheData.rssSources && cacheData.timestamp && 
                                (Date.now() - cacheData.timestamp < 24 * 60 * 60 * 1000)) {
                                // Use cached sources if less than 24 hours old
                                CONFIG.rssSources = {};
                                
                                // Ensure all keys are strings when loading from cache
                                Object.entries(cacheData.rssSources).forEach(([id, source]) => {
                                    const stringId = String(id);
                                    CONFIG.rssSources[stringId] = {
                                        ...source,
                                        id: stringId,
                                        enabled: this.manager.sourcePreferences.rss[stringId] !== undefined ? 
                                                this.manager.sourcePreferences.rss[stringId] : 
                                                source.enabled
                                    };
                                });
                                
                                console.log('Loaded from cache with preferences:', this.manager.sourcePreferences.rss);
                                return Object.values(CONFIG.rssSources);
                            }
                        } catch (e) {
                            console.error('Error loading cached RSS sources:', e);
                        }
                    }
                }

                try {
                    console.log('Fetching fresh RSS sources from API...');
                    const response = await fetch(`${CONFIG.xanoBaseUrl}${CONFIG.endpoints.rssSources}`);
                    const sources = await response.json();
                    
                    // Clear existing sources
                    CONFIG.rssSources = {};
                    
                    // Populate sources from API
                    sources.forEach(source => {
                        if (source.is_active) {
                            // Get the first category if multiple are separated by semicolon
                            const primaryCategory = source.category ? 
                                source.category.split(';')[0].trim().toLowerCase().replace(/[&\s]+/g, '-') : 
                                'other';
                            
                            // Always use string ID consistently
                            const stringId = String(source.id);
                            
                            CONFIG.rssSources[stringId] = {
                                id: stringId,
                                name: source.name,
                                url: source.url,
                                category: primaryCategory,
                                fullCategories: source.category, // Keep original for display
                                enabled: this.manager.sourcePreferences.rss[stringId] !== undefined ? 
                                        this.manager.sourcePreferences.rss[stringId] : 
                                        this.manager.getDefaultPreferences().rss[stringId] === true
                            };
                        }
                    });
                    
                    // Only save to cache if we successfully fetched
                    if (Object.keys(CONFIG.rssSources).length > 0) {
                        const cacheData = {
                            preferences: this.manager.sourcePreferences,
                            timestamp: Date.now(),
                            rssSources: CONFIG.rssSources
                        };
                        localStorage.setItem('nashville-sources-v2', JSON.stringify(cacheData));
                        console.log('Saved RSS sources to cache with preferences');
                    }
                    
                    return sources;
                } catch (error) {
                    console.error('Error fetching RSS sources:', error);
                    // Try to use cached data even if expired
                    const cached = localStorage.getItem('nashville-sources-v2');
                    if (cached) {
                        try {
                            const cacheData = JSON.parse(cached);
                            if (cacheData.rssSources) {
                                CONFIG.rssSources = {};
                                // Ensure string IDs
                                Object.entries(cacheData.rssSources).forEach(([id, source]) => {
                                    const stringId = String(id);
                                    CONFIG.rssSources[stringId] = {
                                        ...source,
                                        id: stringId,
                                        enabled: this.manager.sourcePreferences.rss[stringId] !== undefined ? 
                                                this.manager.sourcePreferences.rss[stringId] : 
                                                source.enabled
                                    };
                                });
                                return Object.values(CONFIG.rssSources);
                            }
                        } catch (e) {
                            console.error('Error loading fallback cache:', e);
                        }
                    }
                    return [];
                }
            }

            async fetchLegislation() {
                try {
                    const response = await fetch(
                        `${CONFIG.xanoBaseUrl}${CONFIG.endpoints.legislation}?page=1&per_page=30&sort=[-MatterIntroDate]`
                    );
                    const data = await response.json();
                    const items = Array.isArray(data) ? data : (data.items || []);
                    return items.map(item => this.manager.normalizeLegislation(item));
                } catch (error) {
                    console.error('Error fetching legislation:', error);
                    return [];
                }
            }

            async fetchRSSFeed(source) {
                if (!source.enabled) return [];
                
                try {
                    const proxyUrl = CONFIG.corsProxy + encodeURIComponent(source.url);
                    const response = await fetch(proxyUrl);
                    const text = await response.text();
                    const parser = new DOMParser();
                    const xml = parser.parseFromString(text, 'text/xml');
                    
                    const items = xml.querySelectorAll('item');
                    return Array.from(items)
                        .slice(0, 10)
                        .map(item => this.manager.normalizeRSSItem(item, source));
                } catch (error) {
                    console.error(`Error fetching ${source.name}:`, error);
                    return [];
                }
            }

            async fetchAllData(forceRefresh = false) {
                if (this.isFetching) return;
                this.isFetching = true;
                
                // Update refresh button state
                const refreshBtn = document.getElementById('refresh-btn');
                const loadingMsg = document.getElementById('loading-message');
                
                if (refreshBtn) {
                    refreshBtn.classList.add('loading');
                }
                
                if (loadingMsg) {
                    loadingMsg.textContent = forceRefresh ? 
                        'Fetching fresh data...' : 
                        'Loading Nashville civic data...';
                }
                
                // First fetch RSS sources from API (or cache)
                await this.fetchRSSSources(forceRefresh);
                
                // Update source dropdown UI
                updateSourceDropdown();
                
                // Log what sources are being fetched
                const enabledRSS = Object.values(CONFIG.rssSources).filter(s => s.enabled).length;
                console.log(`Fetching data - RSS feeds: ${enabledRSS}`);
                
                const legislation = await this.fetchLegislation();
                
                const rssPromises = Object.values(CONFIG.rssSources)
                    .filter(source => source.enabled)
                    .map(source => this.fetchRSSFeed(source));
                
                const rssResults = await Promise.allSettled(rssPromises);
                const rssItems = rssResults
                    .filter(result => result.status === 'fulfilled')
                    .flatMap(result => result.value);
                
                this.manager.allCards = [...legislation, ...rssItems];
                this.manager.lastFetchTime = new Date();
                this.manager.applyFilters();
                renderView();
                
                // Update refresh button state
                if (refreshBtn) {
                    refreshBtn.classList.remove('loading');
                }
                
                // Show success indicator
                if (forceRefresh) {
                    showRefreshSuccess();
                }
                
                this.isFetching = false;
            }
        }

        // View rendering
        function renderView() {
            const container = document.getElementById('view-container');
            const cards = window.dataManager.filteredCards;
            
            if (cards.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <h3>No items found</h3>
                        <p>Try adjusting your filters or check back later</p>
                    </div>
                `;
                return;
            }
            
            container.classList.add('transitioning');
            
            // Normalize view type
            let viewType = window.dataManager.currentView;
            if (viewType === 'reddit') viewType = 'list';
            
            setTimeout(() => {
                switch(viewType) {
                    case 'list':
                        container.innerHTML = renderListView(cards);
                        break;
                    case 'cards':
                    default:
                        container.innerHTML = renderCardsView(cards);
                        break;
                }
                container.classList.remove('transitioning');
            }, 300);
        }

        function renderCardsView(cards) {
            return `<div class="card-grid">
                ${cards.map(card => `
                    <article class="card" data-type="${card.type}" onclick="openModal('${card.id}')">
                        <div class="card-type-bar"></div>
                        ${card.imageUrl ? 
                            `<img class="card-image" src="${card.imageUrl}" alt="" loading="lazy">` :
                            `<div class="card-image-placeholder gradient-${card.themes[0] || 1}">${getTypeIcon(card.type)}</div>`
                        }
                        <div class="card-content">
                            <div class="card-header">
                                <span class="card-type-label">
                                    ${getTypeIcon(card.type)} ${card.type}
                                </span>
                                ${card.status ? `<span class="status-${card.statusClass}">${card.status}</span>` : ''}
                            </div>
                            <h3 class="card-title">${card.displayTitle}</h3>
                            <div class="theme-tags">
                                ${card.themes.map(t => `<span class="theme-tag" data-theme="${t}">${THEMES[t]}</span>`).join('')}
                            </div>
                            <p class="card-excerpt">${card.excerpt}</p>
                            <div class="card-footer">
                                <div class="card-stats">
                                    ${card.type === 'legislation' ? `📋 ${card.fileNumber || 'No file'}` : ''}
                                    ${card.type === 'news' ? `📰 ${card.sourceName || 'News'}` : ''}
                                </div>
                                <span>${card.dateFormatted}</span>
                            </div>
                        </div>
                    </article>
                `).join('')}
            </div>`;
        }

        function renderListView(cards) {
            return `<div class="list-view">
                ${cards.map(card => `
                    <div class="list-post">
                        <div class="list-post-content" onclick="openModal('${card.id}')">
                            <div class="list-votes">
                                <button class="vote-btn" onclick="event.stopPropagation(); vote(this, 'up')">▲</button>
                                <span class="vote-count">0</span>
                                <button class="vote-btn" onclick="event.stopPropagation(); vote(this, 'down')">▼</button>
                            </div>
                            <div class="list-main">
                                <div class="list-meta">
                                    <span class="list-type-badge">${card.type}</span>
                                    <span>${card.sourceName || card.source}</span>
                                    <span>•</span>
                                    <span>${card.dateFormatted}</span>
                                </div>
                                <h3 class="list-title">${card.displayTitle}</h3>
                                <p class="list-preview">${card.excerpt}</p>
                            </div>
                            ${card.imageUrl ? `<img class="list-thumbnail" src="${card.imageUrl}" alt="">` : ''}
                        </div>
                    </div>
                `).join('')}
            </div>`;
        }

        // Modal system
        function openModal(cardId) {
            const card = window.dataManager.allCards.find(c => c.id === cardId);
            if (!card) return;
            
            const overlay = document.getElementById('modal-overlay');
            const modalContent = document.getElementById('modal-content');
            
            if (card.type === 'legislation') {
                modalContent.innerHTML = renderLegislationModal(card);
            } else {
                modalContent.innerHTML = renderContentModal(card);
            }
            
            overlay.classList.add('show');
        }

        function closeModal() {
            document.getElementById('modal-overlay').classList.remove('show');
        }

        function renderLegislationModal(card) {
            const progress = card.statusClass === 'passed' ? 100 : 
                           card.statusClass === 'failed' ? 0 : 
                           card.statusClass === 'in-progress' ? 60 : 30;
            
            return `
                <button class="modal-close" onclick="closeModal()">✕</button>
                <div class="modal-legislation">
                    <span class="legislation-status status-${card.statusClass}">${card.status}</span>
                    <h2 class="legislation-title">${card.title}</h2>
                    
                    <div class="legislation-meta">
                        <div class="meta-item">
                            <span class="meta-label">File Number</span>
                            <span class="meta-value">${card.fileNumber || 'Not assigned'}</span>
                        </div>
                        <div class="meta-item">
                            <span class="meta-label">Committee</span>
                            <span class="meta-value">${card.committee || 'Not assigned'}</span>
                        </div>
                        <div class="meta-item">
                            <span class="meta-label">Sponsor</span>
                            <span class="meta-value">${card.sponsor || 'Unknown'}</span>
                        </div>
                        <div class="meta-item">
                            <span class="meta-label">Introduced</span>
                            <span class="meta-value">${card.dateFormatted}</span>
                        </div>
                    </div>
                    
                    <div class="progress-section">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progress}%"></div>
                        </div>
                        <div class="timeline">
                            <div class="timeline-item">
                                <div class="timeline-dot ${progress >= 30 ? 'completed' : ''}"></div>
                                <span>First Reading</span>
                            </div>
                            <div class="timeline-item">
                                <div class="timeline-dot ${progress >= 60 ? 'completed' : ''} ${progress === 60 ? 'current' : ''}"></div>
                                <span>Committee Review</span>
                            </div>
                            <div class="timeline-item">
                                <div class="timeline-dot ${progress >= 80 ? 'completed' : ''}"></div>
                                <span>Second Reading</span>
                            </div>
                            <div class="timeline-item">
                                <div class="timeline-dot ${progress >= 100 ? 'completed' : ''}"></div>
                                <span>Final Vote</span>
                            </div>
                        </div>
                    </div>
                    
                    ${card.fullContent ? `<div class="modal-excerpt">${card.fullContent}</div>` : ''}
                    
                    <div class="modal-actions">
                        <span class="modal-action-text">View full legislation details</span>
                        <a href="https://nashville.legistar.com" target="_blank" class="modal-action-btn">
                            Open in Legistar →
                        </a>
                    </div>
                </div>
            `;
        }

        function renderContentModal(card) {
            return `
                <button class="modal-close" onclick="closeModal()">✕</button>
                <div class="modal-content-body">
                    <h2 class="modal-title">${card.title}</h2>
                    <div class="modal-meta-bar">
                        <span>${getTypeIcon(card.type)} ${card.type}</span>
                        <span>•</span>
                        <span>${card.sourceName || card.source}</span>
                        <span>•</span>
                        <span>${card.dateFormatted}</span>
                        ${card.upvotes ? `<span>• ⬆️ ${card.upvotes}</span>` : ''}
                        ${card.comments ? `<span>• 💬 ${card.comments}</span>` : ''}
                    </div>
                    
                    <div class="modal-excerpt">
                        ${card.fullContent || card.excerpt}
                    </div>
                    
                    <div class="modal-actions">
                        <span class="modal-action-text">
                            ${card.type === 'news' ? `Read full article on ${card.sourceName || 'source'}` :
                              'View original source'}
                        </span>
                        <a href="${card.link}" target="_blank" class="modal-action-btn">
                            Open Source →
                        </a>
                    </div>
                </div>
            `;
        }

        // Helper functions
        function getTypeIcon(type) {
            const icons = {
                'legislation': '📜',
                'news': '📰'
            };
            return icons[type] || '📊';
        }

        function vote(btn, direction) {
            const votes = btn.parentElement;
            const count = votes.querySelector('.vote-count');
            const current = parseInt(count.textContent) || 0;
            
            if (direction === 'up') {
                btn.classList.toggle('upvoted');
                count.textContent = btn.classList.contains('upvoted') ? current + 1 : current - 1;
            } else {
                btn.classList.toggle('downvoted');
                count.textContent = btn.classList.contains('downvoted') ? current - 1 : current + 1;
            }
        }

        function toggleSourceDropdown() {
            document.getElementById('source-dropdown').classList.toggle('show');
        }

        function applySources() {
            window.dataManager.saveSourcePreferences();
            
            // Debug: Log current state
            console.log('Applied sources - Saved preferences:', window.dataManager.sourcePreferences);
            
            // Show success feedback
            const btn = document.querySelector('.apply-sources-btn[onclick="applySources()"]');
            if (btn) {
                const originalText = btn.textContent;
                btn.textContent = '✅ Saved!';
                setTimeout(() => {
                    btn.textContent = originalText;
                    toggleSourceDropdown();
                }, 1000);
            }
        }

        function clearCache() {
            if (confirm('This will clear all cached data and reset to default settings. Continue?')) {
                // Clear all cached data
                localStorage.removeItem('nashville-sources-v2');
                localStorage.removeItem('nashville-sources'); // Also clear old format
                localStorage.removeItem('preferredView');
                
                // Reset to default preferences
                window.dataManager.sourcePreferences = window.dataManager.getDefaultPreferences();
                
                // Clear RSS sources to force fresh fetch
                CONFIG.rssSources = {};
                
                // Force refresh with cleared cache
                window.dataFetcher.fetchAllData(true).then(() => {
                    // Update dropdown after fetch completes
                    updateSourceDropdown();
                });
                
                // Close dropdown
                toggleSourceDropdown();
                
                // Show confirmation
                const btn = document.querySelector('.apply-sources-btn[onclick="clearCache()"]');
                if (btn) {
                    const originalText = btn.textContent;
                    btn.textContent = '✅ Cache Cleared!';
                    setTimeout(() => {
                        btn.textContent = originalText;
                    }, 2000);
                }
            }
        }

        function refreshData() {
            if (window.dataFetcher && !window.dataFetcher.isFetching) {
                window.dataFetcher.fetchAllData(true);
            }
        }

        function showRefreshSuccess() {
            const refreshBtn = document.getElementById('refresh-btn');
            if (refreshBtn) {
                const originalHTML = refreshBtn.innerHTML;
                refreshBtn.innerHTML = '<span>✅</span> <span>Updated!</span>';
                setTimeout(() => {
                    refreshBtn.innerHTML = originalHTML;
                }, 2000);
            }
        }

        function updateSourceDropdown() {
            const container = document.getElementById('dropdown-sources-content');
            
            // Group sources by category
            const categories = {
                'core': { title: 'Core Sources', sources: [] },
                'major-news': { title: 'Major News', sources: [] },
                'alternative-media': { title: 'Alternative Media', sources: [] },
                'lifestyle-culture': { title: 'Lifestyle & Culture', sources: [] },
                'political-opinion': { title: 'Political & Opinion', sources: [] },
                'state-regional': { title: 'State & Regional', sources: [] },
                'food-dining': { title: 'Food & Dining', sources: [] },
                'parenting-family': { title: 'Parenting & Family', sources: [] },
                'music-entertainment': { title: 'Music & Entertainment', sources: [] },
                'business': { title: 'Business', sources: [] },
                'podcasts': { title: 'Podcasts', sources: [] },
                'other': { title: 'Other Sources', sources: [] }
            };
            
            // Add legislation to core
            categories.core.sources.push({
                type: 'legislation',
                html: `
                    <label class="source-item permanent">
                        <input type="checkbox" id="source-legislation" checked disabled>
                        <span>📜 Metro Legislation</span>
                    </label>
                `
            });
            
            // Add RSS sources
            Object.values(CONFIG.rssSources).forEach(source => {
                const stringId = String(source.id);
                const category = categories[source.category] || categories.other;
                category.sources.push({
                    type: 'rss',
                    html: `
                        <label class="source-item">
                            <input type="checkbox" id="source-rss-${stringId}" ${source.enabled ? 'checked' : ''}>
                            <span>📡 ${source.name}</span>
                        </label>
                    `
                });
            });
            
            // Build HTML - only show categories that have sources
            let html = '';
            Object.entries(categories).forEach(([key, category]) => {
                if (category.sources.length > 0) {
                    html += `
                        <div class="source-section">
                            <h5>${category.title}</h5>
                            ${category.sources.map(s => s.html).join('')}
                        </div>
                    `;
                }
            });
            
            container.innerHTML = html;
            
            // Update status
            const enabledCount = Object.values(CONFIG.rssSources).filter(s => s.enabled).length;
            const totalCount = Object.keys(CONFIG.rssSources).length;
            const statusEl = document.getElementById('source-status');
            if (statusEl) {
                statusEl.textContent = `${enabledCount} of ${totalCount} RSS feeds enabled`;
            }
            
            console.log(`Dropdown updated: ${enabledCount} RSS sources enabled out of ${totalCount}`);
        }

        // Initialize event listeners
        function initializeEventListeners() {
            const manager = window.dataManager;
            
            // Search
            const searchInput = document.getElementById('search-input');
            const searchClear = document.getElementById('search-clear');
            let searchTimer;
            
            searchInput.addEventListener('input', (e) => {
                const value = e.target.value.trim();
                searchClear.classList.toggle('visible', value.length > 0);
                
                clearTimeout(searchTimer);
                searchTimer = setTimeout(() => {
                    manager.filters.search = value;
                    manager.applyFilters();
                    renderView();
                }, 300);
            });
            
            searchClear.addEventListener('click', () => {
                searchInput.value = '';
                searchClear.classList.remove('visible');
                manager.filters.search = '';
                manager.applyFilters();
                renderView();
            });
            
            // View switcher
            document.querySelectorAll('.view-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    let viewType = this.dataset.view;
                    // Convert reddit to list for backwards compatibility
                    if (viewType === 'reddit') viewType = 'list';
                    manager.currentView = viewType;
                    localStorage.setItem('preferredView', viewType);
                    renderView();
                });
            });
            
            // Type filters
            document.querySelectorAll('.type-tab').forEach(tab => {
                tab.addEventListener('click', function() {
                    document.querySelectorAll('.type-tab').forEach(t => t.classList.remove('active'));
                    this.classList.add('active');
                    manager.filters.type = this.getAttribute('data-filter');
                    manager.applyFilters();
                    renderView();
                });
            });
            
            // Theme filters
            document.querySelectorAll('.theme-pill').forEach(pill => {
                pill.addEventListener('click', function() {
                    const theme = this.getAttribute('data-theme');
                    
                    if (theme === 'all') {
                        document.querySelectorAll('.theme-pill').forEach(p => p.classList.remove('active'));
                        this.classList.add('active');
                        manager.filters.themes.clear();
                    } else {
                        document.querySelector('.theme-pill[data-theme="all"]').classList.remove('active');
                        this.classList.toggle('active');
                        
                        const themeId = parseInt(theme);
                        if (manager.filters.themes.has(themeId)) {
                            manager.filters.themes.delete(themeId);
                        } else {
                            manager.filters.themes.add(themeId);
                        }
                        
                        if (manager.filters.themes.size === 0) {
                            document.querySelector('.theme-pill[data-theme="all"]').classList.add('active');
                        }
                    }
                    
                    manager.applyFilters();
                    renderView();
                });
            });
            
            // Modal close on overlay click
            document.getElementById('modal-overlay').addEventListener('click', (e) => {
                if (e.target === e.currentTarget) closeModal();
            });
            
            // Escape key to close modal
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') closeModal();
                
                // Refresh shortcut (Cmd/Ctrl + R or F5)
                if ((e.key === 'r' && (e.ctrlKey || e.metaKey)) || e.key === 'F5') {
                    e.preventDefault();
                    refreshData();
                }
            });
            
            // Set active view button
            document.querySelectorAll('.view-btn').forEach(btn => {
                let btnView = btn.dataset.view;
                // Treat both list and reddit as the same for button highlighting
                if ((btnView === 'list' && (manager.currentView === 'list' || manager.currentView === 'reddit')) ||
                    (btnView === manager.currentView)) {
                    btn.classList.add('active');
                } else {
                    btn.classList.remove('active');
                }
            });
            
            // Source dropdown
            document.getElementById('source-btn').addEventListener('click', toggleSourceDropdown);
            
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.source-selector')) {
                    document.getElementById('source-dropdown').classList.remove('show');
                }
            });
        }

        // Initialize app
        async function initialize() {
            // Migrate old cache format if needed
            const oldCache = localStorage.getItem('nashville-sources');
            if (oldCache && !localStorage.getItem('nashville-sources-v2')) {
                try {
                    const oldData = JSON.parse(oldCache);
                    const newCache = {
                        preferences: oldData,
                        timestamp: Date.now() - (25 * 60 * 60 * 1000), // Set as expired to force refresh
                        rssSources: {}
                    };
                    localStorage.setItem('nashville-sources-v2', JSON.stringify(newCache));
                    localStorage.removeItem('nashville-sources');
                    console.log('Migrated old cache format');
                } catch (e) {
                    console.error('Error migrating cache:', e);
                }
            }
            
            window.dataManager = new DataManager();
            window.dataFetcher = new DataFetcher(window.dataManager);
            
            console.log('Initializing with preferences:', window.dataManager.sourcePreferences);
            
            // Debug helper
            window.debugPreferences = () => {
                const cached = localStorage.getItem('nashville-sources-v2');
                if (cached) {
                    const data = JSON.parse(cached);
                    console.log('Cached preferences:', data.preferences);
                    console.log('Current preferences:', window.dataManager.sourcePreferences);
                    console.log('Enabled RSS feeds:', Object.entries(data.preferences.rss || {}).filter(([k,v]) => v).map(([k,v]) => k));
                } else {
                    console.log('No cached data found');
                }
            };
            console.log('Debug helper available: run debugPreferences() in console');
            
            initializeEventListeners();
            
            // Load data (will use cache if available and fresh)
            await window.dataFetcher.fetchAllData(false);
            
            // Show last update time if available
            if (window.dataManager.lastFetchTime) {
                console.log('Data loaded at:', window.dataManager.lastFetchTime.toLocaleTimeString());
            }
            
            // Auto-refresh every 5 minutes
            setInterval(() => {
                window.dataFetcher.fetchAllData(false);
            }, CONFIG.updateInterval);
        }

        document.addEventListener('DOMContentLoaded', initialize);
    </script>
</body>
</html>
