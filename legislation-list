<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Legislation</title>
<style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  background: #f5f5f7;
  color: #1d1d1f;
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 1rem;
}

.header {
  background: white;
  border-radius: 12px;
  padding: 1.5rem;
  margin-bottom: 1.5rem;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
}

.title {
  font-size: 1.75rem;
  font-weight: 600;
  color: #1d1d1f;
  margin-bottom: 1.25rem;
}

.filters-container {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.primary-filters {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
}

.filter-input {
  width: 100%;
  padding: 0.625rem 0.875rem;
  border: 1px solid #d2d2d7;
  border-radius: 8px;
  font-size: 0.9375rem;
  background: white;
  transition: all 0.2s;
}

.filter-input:focus {
  outline: none;
  border-color: #0071e3;
  box-shadow: 0 0 0 3px rgba(0, 113, 227, 0.1);
}

.search-wrapper {
  position: relative;
}

.search-wrapper input {
  padding-right: 2.5rem;
}

.search-clear {
  position: absolute;
  right: 0.75rem;
  top: 50%;
  transform: translateY(-50%);
  background: transparent;
  border: none;
  color: #86868b;
  cursor: pointer;
  font-size: 1.25rem;
  padding: 0.25rem;
  display: none;
  transition: color 0.2s;
}

.search-clear:hover {
  color: #1d1d1f;
}

.search-clear.visible {
  display: block;
}

.advanced-toggle {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 0;
  background: none;
  border: none;
  color: #0071e3;
  font-size: 0.9375rem;
  cursor: pointer;
  transition: opacity 0.2s;
}

.advanced-toggle:hover {
  opacity: 0.8;
}

.advanced-toggle svg {
  width: 16px;
  height: 16px;
  transition: transform 0.3s;
}

.advanced-toggle.open svg {
  transform: rotate(180deg);
}

.advanced-filters {
  display: none;
  padding: 1rem;
  background: #f5f5f7;
  border-radius: 8px;
  margin-top: 0.5rem;
}

.advanced-filters.show {
  display: block;
}

.advanced-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
}

.filter-group {
  display: flex;
  flex-direction: column;
  gap: 0.375rem;
}

.filter-label {
  font-size: 0.8125rem;
  font-weight: 500;
  color: #86868b;
  text-transform: uppercase;
  letter-spacing: 0.03em;
}

.date-range {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.date-range input {
  flex: 1;
}

.date-range span {
  color: #86868b;
  font-size: 0.875rem;
}

.filter-actions {
  display: flex;
  gap: 0.75rem;
  margin-top: 1rem;
}

.btn {
  padding: 0.5rem 1.25rem;
  border: none;
  border-radius: 8px;
  font-size: 0.9375rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
}

.btn-primary {
  background: #0071e3;
  color: white;
}

.btn-primary:hover {
  background: #0077ed;
}

.btn-secondary {
  background: white;
  color: #1d1d1f;
  border: 1px solid #d2d2d7;
}

.btn-secondary:hover {
  background: #f5f5f7;
}

.active-filters {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-top: 0.75rem;
}

.filter-tag {
  display: inline-flex;
  align-items: center;
  gap: 0.375rem;
  padding: 0.25rem 0.625rem;
  background: #e8e8ed;
  border-radius: 12px;
  font-size: 0.8125rem;
}

.filter-tag button {
  background: none;
  border: none;
  color: #86868b;
  cursor: pointer;
  font-size: 1rem;
  padding: 0;
  line-height: 1;
  transition: color 0.2s;
}

.filter-tag button:hover {
  color: #1d1d1f;
}

.table-container {
  background: white;
  border-radius: 12px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
  overflow: hidden;
}

.table-wrapper {
  overflow-x: auto;
}

.legislation-table {
  width: 100%;
  border-collapse: collapse;
}

.legislation-table thead {
  background: #f5f5f7;
  border-bottom: 1px solid #d2d2d7;
}

.legislation-table th {
  text-align: left;
  padding: 0.875rem 1rem;
  font-size: 0.8125rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.03em;
  color: #86868b;
  white-space: nowrap;
}

.legislation-table td {
  padding: 0.875rem 1rem;
  font-size: 0.9375rem;
  border-bottom: 1px solid #f5f5f7;
}

.legislation-table tbody tr {
  cursor: pointer;
  transition: background 0.2s;
}

.legislation-table tbody tr:hover {
  background: #fafafa;
}

.loading-row td,
.error-row td,
.empty-row td {
  text-align: center;
  padding: 3rem 1rem;
}

.loading-row td {
  color: #86868b;
}

.error-row td {
  color: #d70015;
}

.empty-row td {
  color: #86868b;
}

.pagination {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  background: #f5f5f7;
  border-top: 1px solid #d2d2d7;
  font-size: 0.9375rem;
}

.pagination button {
  padding: 0.5rem 1rem;
  background: white;
  color: #1d1d1f;
  border: 1px solid #d2d2d7;
  border-radius: 8px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.2s;
}

.pagination button:hover:not(:disabled) {
  background: #f5f5f7;
}

.pagination button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.page-info {
  color: #86868b;
  font-size: 0.875rem;
}

.spinner {
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 2px solid #d2d2d7;
  border-top-color: #0071e3;
  border-radius: 50%;
  animation: spin 0.8s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .container {
    padding: 0.75rem;
  }
  
  .header {
    padding: 1rem;
    margin-bottom: 1rem;
  }
  
  .title {
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }
  
  .primary-filters {
    grid-template-columns: 1fr;
  }
  
  .advanced-grid {
    grid-template-columns: 1fr;
  }
  
  .date-range {
    flex-direction: column;
    align-items: stretch;
  }
  
  .filter-actions {
    flex-direction: column;
  }
  
  .btn {
    width: 100%;
    justify-content: center;
  }
  
  .legislation-table {
    font-size: 0.875rem;
  }
  
  .legislation-table th,
  .legislation-table td {
    padding: 0.625rem 0.5rem;
  }
  
  /* Hide less important columns on mobile */
  .legislation-table th:nth-child(3),
  .legislation-table td:nth-child(3),
  .legislation-table th:nth-child(4),
  .legislation-table td:nth-child(4) {
    display: none;
  }
  
  .pagination {
    flex-direction: column;
    gap: 0.75rem;
    text-align: center;
  }
  
  .pagination button {
    width: 100%;
  }
}

@media (max-width: 480px) {
  .title {
    font-size: 1.25rem;
  }
  
  /* Hide agenda date on very small screens */
  .legislation-table th:last-child,
  .legislation-table td:last-child {
    display: none;
  }
}

</style>
</head>
<body>
<div class="container">
  <div class="header">
    <h1 class="title">Legislation</h1>
    
    <div class="filters-container">
      <!-- Primary filters always visible -->
      <div class="primary-filters">
        <div class="search-wrapper">
          <input 
            type="text" 
            id="search-input" 
            class="filter-input" 
            placeholder="Search legislation..."
          />
          <button class="search-clear" id="search-clear" aria-label="Clear search">Ã—</button>
        </div>
        
        <select id="type-filter" class="filter-input">
          <option value="">All Types</option>
        </select>
        
        <select id="status-filter" class="filter-input">
          <option value="">All Statuses</option>
        </select>
      </div>
      
      <!-- Advanced filters toggle -->
      <button class="advanced-toggle" id="advanced-toggle">
        <svg fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"/>
        </svg>
        Advanced Filters
      </button>
      
      <!-- Advanced filters (hidden by default) -->
      <div class="advanced-filters" id="advanced-filters">
        <div class="advanced-grid">
          <div class="filter-group">
            <label class="filter-label" for="body-filter">Body</label>
            <select id="body-filter" class="filter-input">
              <option value="">All Bodies</option>
            </select>
          </div>
          
          <div class="filter-group">
            <label class="filter-label">Introduction Date</label>
            <div class="date-range">
              <input type="date" id="intro-date-from" class="filter-input" />
              <span>to</span>
              <input type="date" id="intro-date-to" class="filter-input" />
            </div>
          </div>
          
          <div class="filter-group">
            <label class="filter-label">Agenda Date</label>
            <div class="date-range">
              <input type="date" id="agenda-date-from" class="filter-input" />
              <span>to</span>
              <input type="date" id="agenda-date-to" class="filter-input" />
            </div>
          </div>
          
          <div class="filter-group">
            <label class="filter-label" for="page-size">Items per page</label>
            <select id="page-size" class="filter-input">
              <option value="10" selected>10 items</option>
              <option value="20">20 items</option>
              <option value="50">50 items</option>
              <option value="100">100 items</option>
            </select>
          </div>
        </div>
        
        <div class="filter-actions">
          <button class="btn btn-primary" id="apply-filters">Apply Filters</button>
          <button class="btn btn-secondary" id="clear-filters">Clear All</button>
        </div>
      </div>
      
      <!-- Active filters display -->
      <div class="active-filters" id="active-filters"></div>
    </div>
  </div>
  
  <div class="table-container">
    <div class="table-wrapper">
      <table class="legislation-table">
        <thead>
          <tr>
            <th>File #</th>
            <th>Title</th>
            <th>Type</th>
            <th>Body</th>
            <th>Status</th>
            <th>Introduced</th>
            <th>Agenda</th>
          </tr>
        </thead>
        <tbody id="table-content">
          <tr class="loading-row"><td colspan="7"><div class="spinner"></div> Loading...</td></tr>
        </tbody>
      </table>
    </div>
    <div class="pagination">
      <button id="prev-btn" disabled>Previous</button>
      <span class="page-info" id="page-info">Page 1</span>
      <button id="next-btn" disabled>Next</button>
    </div>
  </div>
</div>
<script>
// Configuration
const CONFIG = {
  xanoBaseUrl: 'https://xvkq-pq7i-idtl.n7d.xano.io/api:Hj4C6PGO',
  endpoints: {
    legislation: '/archiverecords',
    types: '/archiverecords/unique/MatterTypeName',
    statuses: '/archiverecords/unique/MatterStatusName',
    bodies: '/archiverecords/unique/MatterBodyName'
  },
  softrDomain: 'https://eonashville.preview.softr.app',
  headers: {
    'Content-Type': 'application/json'
  }
};

// State management
let state = {
  currentPage: 1,
  pageSize: 10,
  totalPages: 1,
  totalRecords: 0,
  filters: {
    search: '',
    type: '',
    status: '',
    body: '',
    introDateFrom: '',
    introDateTo: '',
    agendaDateFrom: '',
    agendaDateTo: ''
  },
  isLoading: false,
  debounceTimer: null,
  uniqueValues: {
    types: new Set(),
    statuses: new Set(),
    bodies: new Set()
  }
};

// Utility functions
function formatDate(dateStr) {
  if (!dateStr) return '';
  const date = new Date(dateStr);
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');
  return `${month}/${day}/${date.getFullYear().toString().substr(-2)}`;
}

function showLoading() {
  const tbody = document.getElementById('table-content');
  tbody.innerHTML = '<tr class="loading-row"><td colspan="7"><div class="spinner"></div> Loading...</td></tr>';
}

function showError(message) {
  const tbody = document.getElementById('table-content');
  tbody.innerHTML = `<tr class="error-row"><td colspan="7">${message}</td></tr>`;
}

function showEmpty() {
  const tbody = document.getElementById('table-content');
  tbody.innerHTML = '<tr class="empty-row"><td colspan="7">No results found</td></tr>';
}

// Extract unique values from data for filters
function extractUniqueValues(data) {
  data.forEach(item => {
    if (item.MatterTypeName) state.uniqueValues.types.add(item.MatterTypeName);
    if (item.MatterStatusName) state.uniqueValues.statuses.add(item.MatterStatusName);
    if (item.MatterBodyName) state.uniqueValues.bodies.add(item.MatterBodyName);
  });
  
  updateFilterDropdown('type-filter', Array.from(state.uniqueValues.types).sort());
  updateFilterDropdown('status-filter', Array.from(state.uniqueValues.statuses).sort());
  updateFilterDropdown('body-filter', Array.from(state.uniqueValues.bodies).sort());
}

// Update filter dropdown options
function updateFilterDropdown(selectId, options) {
  const select = document.getElementById(selectId);
  const currentValue = select.value;
  const allText = select.options[0].text;
  
  select.innerHTML = `<option value="">${allText}</option>`;
  
  options.forEach(option => {
    const optionEl = document.createElement('option');
    optionEl.value = option;
    optionEl.textContent = option;
    if (option === currentValue) {
      optionEl.selected = true;
    }
    select.appendChild(optionEl);
  });
}

// Build query parameters for Xano
function buildQueryParams() {
  const params = new URLSearchParams({
    page: state.currentPage,
    per_page: state.pageSize
  });
  
  if (state.filters.search) {
    params.append('search', state.filters.search);
  }
  
  if (state.filters.type) {
    params.append('MatterTypeName', state.filters.type);
  }
  
  if (state.filters.status) {
    params.append('MatterStatusName', state.filters.status);
  }
  
  if (state.filters.body) {
    params.append('MatterBodyName', state.filters.body);
  }
  
  if (state.filters.introDateFrom) {
    params.append('MatterIntroDate[gte]', state.filters.introDateFrom);
  }
  if (state.filters.introDateTo) {
    params.append('MatterIntroDate[lte]', state.filters.introDateTo);
  }
  
  if (state.filters.agendaDateFrom) {
    params.append('MatterAgendaDate[gte]', state.filters.agendaDateFrom);
  }
  if (state.filters.agendaDateTo) {
    params.append('MatterAgendaDate[lte]', state.filters.agendaDateTo);
  }
  
  params.append('sort', '[-MatterIntroDate]');
  
  return params;
}

// Fetch legislation data from Xano
async function fetchLegislation() {
  if (state.isLoading) return;
  
  state.isLoading = true;
  showLoading();
  
  try {
    const params = buildQueryParams();
    const url = `${CONFIG.xanoBaseUrl}${CONFIG.endpoints.legislation}?${params}`;
    
    console.log('Fetching from:', url);
    
    const response = await fetch(url, { 
      method: 'GET',
      headers: CONFIG.headers 
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('API Error:', errorText);
      throw new Error(`HTTP ${response.status}`);
    }
    
    const data = await response.json();
    console.log('API Response:', data);
    
    let items = [];
    let total = 0;
    
    if (Array.isArray(data)) {
      items = data;
      extractUniqueValues(items);
      
      total = items.length;
      if (items.length === state.pageSize) {
        state.totalPages = state.currentPage + 1;
      } else {
        state.totalPages = state.currentPage;
      }
      state.totalRecords = `${(state.currentPage - 1) * state.pageSize + items.length}+`;
    } else {
      items = data.items || data.data || data.results || [];
      total = data.itemsTotal || data.total || data.total_count || items.length;
      state.totalRecords = total;
      state.totalPages = Math.ceil(total / state.pageSize) || 1;
      extractUniqueValues(items);
    }
    
    renderTable(items);
    updatePagination();
    
  } catch (error) {
    console.error('Failed to fetch legislation:', error);
    showError('Failed to load data. Please try again.');
  } finally {
    state.isLoading = false;
  }
}

// Render table with data
function renderTable(items) {
  const tbody = document.getElementById('table-content');
  
  if (!items || items.length === 0) {
    showEmpty();
    return;
  }
  
  tbody.innerHTML = '';
  
  items.forEach(matter => {
    const row = document.createElement('tr');
    const recordId = matter.MatterId || matter.id;
    const link = `${CONFIG.softrDomain}/legislation-details?recordId=${recordId}`;
    
    row.onclick = () => window.location.href = link;
    row.innerHTML = `
      <td>${matter.MatterFile || ''}</td>
      <td>${matter.MatterTitle || ''}</td>
      <td>${matter.MatterTypeName || ''}</td>
      <td>${matter.MatterBodyName || ''}</td>
      <td>${matter.MatterStatusName || ''}</td>
      <td>${formatDate(matter.MatterIntroDate)}</td>
      <td>${formatDate(matter.MatterAgendaDate)}</td>
    `;
    
    tbody.appendChild(row);
  });
}

// Update pagination controls
function updatePagination() {
  const pageInfo = document.getElementById('page-info');
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  
  const totalDisplay = typeof state.totalRecords === 'string' 
    ? state.totalRecords 
    : state.totalRecords;
  
  if (state.totalPages > 1) {
    pageInfo.textContent = `Page ${state.currentPage} of ${state.totalPages}`;
  } else {
    pageInfo.textContent = `Page 1`;
  }
  
  prevBtn.disabled = state.currentPage === 1 || state.isLoading;
  nextBtn.disabled = state.currentPage >= state.totalPages || state.isLoading;
}

// Display active filters as tags
function updateActiveFilters() {
  const container = document.getElementById('active-filters');
  container.innerHTML = '';
  
  const filterMappings = {
    search: 'Search',
    type: 'Type',
    status: 'Status',
    body: 'Body',
    introDateFrom: 'Intro From',
    introDateTo: 'Intro To',
    agendaDateFrom: 'Agenda From',
    agendaDateTo: 'Agenda To'
  };
  
  Object.entries(state.filters).forEach(([key, value]) => {
    if (value) {
      const tag = document.createElement('div');
      tag.className = 'filter-tag';
      tag.innerHTML = `
        <span>${filterMappings[key]}: ${value}</span>
        <button onclick="removeFilter('${key}')">Ã—</button>
      `;
      container.appendChild(tag);
    }
  });
}

// Remove a specific filter
function removeFilter(filterKey) {
  state.filters[filterKey] = '';
  
  const elementId = filterKey.replace(/([A-Z])/g, '-$1').toLowerCase().replace('--', '-');
  const element = document.getElementById(elementId);
  if (element) {
    element.value = '';
  }
  
  applyFilters();
}

// Apply all filters and fetch data
function applyFilters() {
  state.filters.search = document.getElementById('search-input').value.trim();
  state.filters.type = document.getElementById('type-filter').value;
  state.filters.status = document.getElementById('status-filter').value;
  state.filters.body = document.getElementById('body-filter').value;
  state.filters.introDateFrom = document.getElementById('intro-date-from').value;
  state.filters.introDateTo = document.getElementById('intro-date-to').value;
  state.filters.agendaDateFrom = document.getElementById('agenda-date-from').value;
  state.filters.agendaDateTo = document.getElementById('agenda-date-to').value;
  
  state.currentPage = 1;
  updateActiveFilters();
  fetchLegislation();
}

// Clear all filters
function clearAllFilters() {
  Object.keys(state.filters).forEach(key => {
    state.filters[key] = '';
  });
  
  document.getElementById('search-input').value = '';
  document.getElementById('type-filter').value = '';
  document.getElementById('status-filter').value = '';
  document.getElementById('body-filter').value = '';
  document.getElementById('intro-date-from').value = '';
  document.getElementById('intro-date-to').value = '';
  document.getElementById('agenda-date-from').value = '';
  document.getElementById('agenda-date-to').value = '';
  document.getElementById('search-clear').classList.remove('visible');
  
  state.currentPage = 1;
  updateActiveFilters();
  fetchLegislation();
}

// Toggle advanced filters
function toggleAdvancedFilters() {
  const toggle = document.getElementById('advanced-toggle');
  const panel = document.getElementById('advanced-filters');
  
  toggle.classList.toggle('open');
  panel.classList.toggle('show');
}

// Event handlers
function handleSearch(event) {
  const searchTerm = event.target.value.trim();
  const clearBtn = document.getElementById('search-clear');
  
  clearBtn.classList.toggle('visible', searchTerm.length > 0);
  
  clearTimeout(state.debounceTimer);
  state.debounceTimer = setTimeout(() => {
    state.filters.search = searchTerm;
    state.currentPage = 1;
    updateActiveFilters();
    fetchLegislation();
  }, 300);
}

function handleFilterChange() {
  clearTimeout(state.debounceTimer);
  state.debounceTimer = setTimeout(() => {
    applyFilters();
  }, 300);
}

function handleClearSearch() {
  const searchInput = document.getElementById('search-input');
  const clearBtn = document.getElementById('search-clear');
  
  searchInput.value = '';
  clearBtn.classList.remove('visible');
  state.filters.search = '';
  state.currentPage = 1;
  updateActiveFilters();
  fetchLegislation();
}

function handlePageSize(event) {
  state.pageSize = parseInt(event.target.value, 10);
  state.currentPage = 1;
  fetchLegislation();
}

function handlePrevPage() {
  if (state.currentPage > 1) {
    state.currentPage--;
    fetchLegislation();
  }
}

function handleNextPage() {
  if (state.currentPage < state.totalPages) {
    state.currentPage++;
    fetchLegislation();
  }
}

// Initialize event listeners
function initializeEventListeners() {
  // Search
  document.getElementById('search-input').addEventListener('input', handleSearch);
  document.getElementById('search-clear').addEventListener('click', handleClearSearch);
  
  // Primary filters (auto-apply)
  document.getElementById('type-filter').addEventListener('change', handleFilterChange);
  document.getElementById('status-filter').addEventListener('change', handleFilterChange);
  
  // Advanced filters toggle
  document.getElementById('advanced-toggle').addEventListener('click', toggleAdvancedFilters);
  
  // Advanced filter buttons
  document.getElementById('apply-filters').addEventListener('click', applyFilters);
  document.getElementById('clear-filters').addEventListener('click', clearAllFilters);
  
  // Page controls
  document.getElementById('page-size').addEventListener('change', handlePageSize);
  document.getElementById('prev-btn').addEventListener('click', handlePrevPage);
  document.getElementById('next-btn').addEventListener('click', handleNextPage);
  
  // Enter key on date inputs
  document.querySelectorAll('.advanced-filters input').forEach(el => {
    el.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        applyFilters();
      }
    });
  });
}

// Initialize the application
async function initialize() {
  console.log('Initializing with Xano endpoint:', CONFIG.xanoBaseUrl + CONFIG.endpoints.legislation);
  initializeEventListeners();
  await fetchLegislation();
}

// Start the app
initialize();
</script>
</body>
</html>
